// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DownloadOrdersToCSVRequest download orders to c s v request
//
// swagger:model DownloadOrdersToCSVRequest
type DownloadOrdersToCSVRequest struct {

	// Date Field Type
	// Enum: ["processed","payment","cancelled","received"]
	DateField string `json:"DateField,omitempty"`

	// From Date
	// Format: date-time
	FromDate strfmt.DateTime `json:"FromDate,omitempty"`

	// Search Filters
	SearchFilters []*SearchFilters `json:"SearchFilters"`

	// Search Sorting
	SearchSorting *SearchSorting `json:"SearchSorting,omitempty"`

	// Search Term
	SearchTerm string `json:"SearchTerm,omitempty"`

	// To Date
	// Format: date-time
	ToDate strfmt.DateTime `json:"ToDate,omitempty"`
}

// Validate validates this download orders to c s v request
func (m *DownloadOrdersToCSVRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearchFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearchSorting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var downloadOrdersToCSVRequestTypeDateFieldPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["processed","payment","cancelled","received"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		downloadOrdersToCSVRequestTypeDateFieldPropEnum = append(downloadOrdersToCSVRequestTypeDateFieldPropEnum, v)
	}
}

const (

	// DownloadOrdersToCSVRequestDateFieldProcessed captures enum value "processed"
	DownloadOrdersToCSVRequestDateFieldProcessed string = "processed"

	// DownloadOrdersToCSVRequestDateFieldPayment captures enum value "payment"
	DownloadOrdersToCSVRequestDateFieldPayment string = "payment"

	// DownloadOrdersToCSVRequestDateFieldCancelled captures enum value "cancelled"
	DownloadOrdersToCSVRequestDateFieldCancelled string = "cancelled"

	// DownloadOrdersToCSVRequestDateFieldReceived captures enum value "received"
	DownloadOrdersToCSVRequestDateFieldReceived string = "received"
)

// prop value enum
func (m *DownloadOrdersToCSVRequest) validateDateFieldEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, downloadOrdersToCSVRequestTypeDateFieldPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DownloadOrdersToCSVRequest) validateDateField(formats strfmt.Registry) error {
	if swag.IsZero(m.DateField) { // not required
		return nil
	}

	// value enum
	if err := m.validateDateFieldEnum("DateField", "body", m.DateField); err != nil {
		return err
	}

	return nil
}

func (m *DownloadOrdersToCSVRequest) validateFromDate(formats strfmt.Registry) error {
	if swag.IsZero(m.FromDate) { // not required
		return nil
	}

	if err := validate.FormatOf("FromDate", "body", "date-time", m.FromDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DownloadOrdersToCSVRequest) validateSearchFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.SearchFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.SearchFilters); i++ {
		if swag.IsZero(m.SearchFilters[i]) { // not required
			continue
		}

		if m.SearchFilters[i] != nil {
			if err := m.SearchFilters[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("SearchFilters" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("SearchFilters" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *DownloadOrdersToCSVRequest) validateSearchSorting(formats strfmt.Registry) error {
	if swag.IsZero(m.SearchSorting) { // not required
		return nil
	}

	if m.SearchSorting != nil {
		if err := m.SearchSorting.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("SearchSorting")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("SearchSorting")
			}

			return err
		}
	}

	return nil
}

func (m *DownloadOrdersToCSVRequest) validateToDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ToDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ToDate", "body", "date-time", m.ToDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this download orders to c s v request based on the context it is used
func (m *DownloadOrdersToCSVRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSearchFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSearchSorting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DownloadOrdersToCSVRequest) contextValidateSearchFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SearchFilters); i++ {

		if m.SearchFilters[i] != nil {

			if swag.IsZero(m.SearchFilters[i]) { // not required
				return nil
			}

			if err := m.SearchFilters[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("SearchFilters" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("SearchFilters" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *DownloadOrdersToCSVRequest) contextValidateSearchSorting(ctx context.Context, formats strfmt.Registry) error {

	if m.SearchSorting != nil {

		if swag.IsZero(m.SearchSorting) { // not required
			return nil
		}

		if err := m.SearchSorting.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("SearchSorting")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("SearchSorting")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DownloadOrdersToCSVRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DownloadOrdersToCSVRequest) UnmarshalBinary(b []byte) error {
	var res DownloadOrdersToCSVRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
