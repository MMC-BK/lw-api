// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderItemReturnInfo order item return info
//
// swagger:model OrderItemReturnInfo
type OrderItemReturnInfo struct {

	// Order Item Batches
	Batches []*OrderItemReturnInfoBatched `json:"Batches"`

	// List of child items (populated if the return is a composite item)
	ChildItems []*OrderItemReturnInfo `json:"ChildItems"`

	// Currency
	Currency string `json:"Currency,omitempty"`

	// If item is composite parent
	IsCompositeParent bool `json:"IsCompositeParent,omitempty"`

	// If return is a part of composite item
	IsPartialCompositeReturn bool `json:"IsPartialCompositeReturn,omitempty"`

	// Product title
	ItemTitle string `json:"ItemTitle,omitempty"`

	// Order Id [Guid]
	// Example: 00000000-0000-0000-0000-000000000000
	// Read Only: true
	// Format: uuid
	OrderID strfmt.UUID `json:"OrderId,omitempty"`

	// Order quantity
	OrderQty int32 `json:"OrderQty,omitempty"`

	// parent ratio
	ParentRatio int32 `json:"ParentRatio,omitempty"`

	// Parent record row ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	ParentRowID strfmt.UUID `json:"ParentRowId,omitempty"`

	// resend quantity
	ResentQty int32 `json:"ResentQty,omitempty"`

	// Returnable quantity
	// Read Only: true
	ReturnableQty int32 `json:"ReturnableQty,omitempty"`

	// Returned quantity
	ReturnedQty int32 `json:"ReturnedQty,omitempty"`

	// Product SKU
	SKU string `json:"SKU,omitempty"`

	// Indicates whether the UnitValue specified includes or exludes tax.
	TaxCostInclusive bool `json:"TaxCostInclusive,omitempty"`

	// Tax rate
	TaxRate float64 `json:"TaxRate,omitempty"`

	// Item value
	UnitValue float64 `json:"UnitValue,omitempty"`

	// Order item record row ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkOrderItemRowID strfmt.UUID `json:"fkOrderItemRowId,omitempty"`

	// Refund Row Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkRefundRowID strfmt.UUID `json:"fkRefundRowId,omitempty"`

	// Stock item ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkStockItemID strfmt.UUID `json:"pkStockItemId,omitempty"`
}

// Validate validates this order item return info
func (m *OrderItemReturnInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentRowID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkOrderItemRowID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkRefundRowID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemReturnInfo) validateBatches(formats strfmt.Registry) error {
	if swag.IsZero(m.Batches) { // not required
		return nil
	}

	for i := 0; i < len(m.Batches); i++ {
		if swag.IsZero(m.Batches[i]) { // not required
			continue
		}

		if m.Batches[i] != nil {
			if err := m.Batches[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Batches" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Batches" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderItemReturnInfo) validateChildItems(formats strfmt.Registry) error {
	if swag.IsZero(m.ChildItems) { // not required
		return nil
	}

	for i := 0; i < len(m.ChildItems); i++ {
		if swag.IsZero(m.ChildItems[i]) { // not required
			continue
		}

		if m.ChildItems[i] != nil {
			if err := m.ChildItems[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ChildItems" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ChildItems" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderItemReturnInfo) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderId", "body", "uuid", m.OrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemReturnInfo) validateParentRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("ParentRowId", "body", "uuid", m.ParentRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemReturnInfo) validateFkOrderItemRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkOrderItemRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkOrderItemRowId", "body", "uuid", m.FkOrderItemRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemReturnInfo) validateFkRefundRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkRefundRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkRefundRowId", "body", "uuid", m.FkRefundRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemReturnInfo) validatePkStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkStockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkStockItemId", "body", "uuid", m.PkStockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order item return info based on the context it is used
func (m *OrderItemReturnInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChildItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReturnableQty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemReturnInfo) contextValidateBatches(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Batches); i++ {

		if m.Batches[i] != nil {

			if swag.IsZero(m.Batches[i]) { // not required
				return nil
			}

			if err := m.Batches[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Batches" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Batches" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderItemReturnInfo) contextValidateChildItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChildItems); i++ {

		if m.ChildItems[i] != nil {

			if swag.IsZero(m.ChildItems[i]) { // not required
				return nil
			}

			if err := m.ChildItems[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ChildItems" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ChildItems" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderItemReturnInfo) contextValidateOrderID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "OrderId", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemReturnInfo) contextValidateReturnableQty(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ReturnableQty", "body", m.ReturnableQty); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItemReturnInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItemReturnInfo) UnmarshalBinary(b []byte) error {
	var res OrderItemReturnInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
