// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReturnInfo return info
//
// swagger:model ReturnInfo
type ReturnInfo struct {

	// Additional costs involved
	AdditionalCost float64 `json:"AdditionalCost,omitempty"`

	// Batch number
	BatchNumber string `json:"BatchNumber,omitempty"`

	// Category
	Category string `json:"Category,omitempty"`

	// Return reason set on a channel
	ChannelReason string `json:"ChannelReason,omitempty"`

	// Secondary return reason on a channel
	ChannelReasonSec string `json:"ChannelReasonSec,omitempty"`

	// If return is completed
	Completed bool `json:"Completed,omitempty"`

	// Product title
	ItemTitle string `json:"ItemTitle,omitempty"`

	// Last date
	// Format: date-time
	LastDate strfmt.DateTime `json:"LastDate,omitempty"`

	// Last state
	LastState string `json:"LastState,omitempty"`

	// New product title
	NewItemTitle string `json:"NewItemTitle,omitempty"`

	// If new order were cancelled
	NewOrderCancelled bool `json:"NewOrderCancelled,omitempty"`

	// New order ID
	NewOrderID int32 `json:"NewOrderId,omitempty"`

	// When new order was processed
	// Format: date-time
	NewOrderProcessedOn strfmt.DateTime `json:"NewOrderProcessedOn,omitempty"`

	// New return quantity
	NewQty int32 `json:"NewQty,omitempty"`

	// new product SKU
	NewSKU string `json:"NewSKU,omitempty"`

	// Order item batch id
	OrderItemBatchID int32 `json:"OrderItemBatchId,omitempty"`

	// Refund pending
	PendingRefund float64 `json:"PendingRefund,omitempty"`

	// Return reason
	Reason string `json:"Reason,omitempty"`

	// Amount refunded
	RefundedAmount float64 `json:"RefundedAmount,omitempty"`

	// Return date
	// Format: date-time
	ReturnDate strfmt.DateTime `json:"ReturnDate,omitempty"`

	// Returned quantity
	ReturnQty int32 `json:"ReturnQty,omitempty"`

	// Return reference
	ReturnReference string `json:"ReturnReference,omitempty"`

	// return type (e.g. EXCHANGE)
	// Enum: ["UNKNOWN","RETURN","RETURNREFUND","EXCHANGE","RESEND","RETURNBOOKING","EXCHANGEBOOKING"]
	RowType string `json:"RowType,omitempty"`

	// Product SKU
	SKU string `json:"SKU,omitempty"`

	// Scrapped quantity
	ScrapQty int32 `json:"ScrapQty,omitempty"`

	// If returned item was scrapped
	Scrapped bool `json:"Scrapped,omitempty"`

	// New order ID for return
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkNewOrderID strfmt.UUID `json:"fkNewOrderId,omitempty"`

	// New order item record row ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkNewOrderItemRowID strfmt.UUID `json:"fkNewOrderItemRowId,omitempty"`

	// New stock item ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkNewStockItemID strfmt.UUID `json:"fkNewStockItemId,omitempty"`

	// Order ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkOrderID strfmt.UUID `json:"fkOrderId,omitempty"`

	// Order item record row ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkOrderItemRowID strfmt.UUID `json:"fkOrderItemRowId,omitempty"`

	// Refund record row ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkRefundRowID strfmt.UUID `json:"fkRefundRowId,omitempty"`

	// Return location ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkReturnLocationID strfmt.UUID `json:"fkReturnLocationId,omitempty"`

	// Linnworks order number
	NOrderID int32 `json:"nOrderId,omitempty"`

	// Return ID
	PkReturnID int32 `json:"pkReturnId,omitempty"`
}

// Validate validates this return info
func (m *ReturnInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewOrderProcessedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRowType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkNewOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkNewOrderItemRowID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkNewStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkOrderItemRowID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkRefundRowID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkReturnLocationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnInfo) validateLastDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastDate) { // not required
		return nil
	}

	if err := validate.FormatOf("LastDate", "body", "date-time", m.LastDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnInfo) validateNewOrderProcessedOn(formats strfmt.Registry) error {
	if swag.IsZero(m.NewOrderProcessedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("NewOrderProcessedOn", "body", "date-time", m.NewOrderProcessedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnInfo) validateReturnDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ReturnDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ReturnDate", "body", "date-time", m.ReturnDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var returnInfoTypeRowTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","RETURN","RETURNREFUND","EXCHANGE","RESEND","RETURNBOOKING","EXCHANGEBOOKING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		returnInfoTypeRowTypePropEnum = append(returnInfoTypeRowTypePropEnum, v)
	}
}

const (

	// ReturnInfoRowTypeUNKNOWN captures enum value "UNKNOWN"
	ReturnInfoRowTypeUNKNOWN string = "UNKNOWN"

	// ReturnInfoRowTypeRETURN captures enum value "RETURN"
	ReturnInfoRowTypeRETURN string = "RETURN"

	// ReturnInfoRowTypeRETURNREFUND captures enum value "RETURNREFUND"
	ReturnInfoRowTypeRETURNREFUND string = "RETURNREFUND"

	// ReturnInfoRowTypeEXCHANGE captures enum value "EXCHANGE"
	ReturnInfoRowTypeEXCHANGE string = "EXCHANGE"

	// ReturnInfoRowTypeRESEND captures enum value "RESEND"
	ReturnInfoRowTypeRESEND string = "RESEND"

	// ReturnInfoRowTypeRETURNBOOKING captures enum value "RETURNBOOKING"
	ReturnInfoRowTypeRETURNBOOKING string = "RETURNBOOKING"

	// ReturnInfoRowTypeEXCHANGEBOOKING captures enum value "EXCHANGEBOOKING"
	ReturnInfoRowTypeEXCHANGEBOOKING string = "EXCHANGEBOOKING"
)

// prop value enum
func (m *ReturnInfo) validateRowTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, returnInfoTypeRowTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReturnInfo) validateRowType(formats strfmt.Registry) error {
	if swag.IsZero(m.RowType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRowTypeEnum("RowType", "body", m.RowType); err != nil {
		return err
	}

	return nil
}

func (m *ReturnInfo) validateFkNewOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkNewOrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkNewOrderId", "body", "uuid", m.FkNewOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnInfo) validateFkNewOrderItemRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkNewOrderItemRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkNewOrderItemRowId", "body", "uuid", m.FkNewOrderItemRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnInfo) validateFkNewStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkNewStockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkNewStockItemId", "body", "uuid", m.FkNewStockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnInfo) validateFkOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkOrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkOrderId", "body", "uuid", m.FkOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnInfo) validateFkOrderItemRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkOrderItemRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkOrderItemRowId", "body", "uuid", m.FkOrderItemRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnInfo) validateFkRefundRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkRefundRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkRefundRowId", "body", "uuid", m.FkRefundRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnInfo) validateFkReturnLocationID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkReturnLocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkReturnLocationId", "body", "uuid", m.FkReturnLocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this return info based on context it is used
func (m *ReturnInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReturnInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnInfo) UnmarshalBinary(b []byte) error {
	var res ReturnInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
