// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemBatchInventory stock item batch inventory
//
// swagger:model StockItemBatchInventory
type StockItemBatchInventory struct {

	// Batch ID
	BatchID int32 `json:"BatchId,omitempty"`

	// Stock item batch record ID
	BatchInventoryID int32 `json:"BatchInventoryId,omitempty"`

	// Batch Status
	BatchStatus string `json:"BatchStatus,omitempty"`

	// BinRack
	BinRack string `json:"BinRack,omitempty"`

	// Binrack Id (Use for WMS)
	BinRackID int32 `json:"BinRackId,omitempty"`

	// Number of items in Transfer phase.
	InTransfer int32 `json:"InTransfer,omitempty"`

	// Is BatchInventory deleted
	IsDeleted bool `json:"IsDeleted,omitempty"`

	// Indicate how many units are now allocated in open orders
	PickedQuantity int32 `json:"PickedQuantity,omitempty"`

	// Pick order
	PrioritySequence int32 `json:"PrioritySequence,omitempty"`

	// Quantity
	Quantity int32 `json:"Quantity,omitempty"`

	// Quantity originally booked in
	// Read Only: true
	StartQuantity int32 `json:"StartQuantity,omitempty"`

	// Location ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockLocationID strfmt.UUID `json:"StockLocationId,omitempty"`

	// Current stock value
	StockValue float64 `json:"StockValue,omitempty"`

	// Warehouse binrack standard type
	WarehouseBinrackStandardType int32 `json:"WarehouseBinrackStandardType,omitempty"`

	// Warehouse binrack type unique id.
	WarehouseBinrackTypeID int32 `json:"WarehouseBinrackTypeId,omitempty"`

	// Warehouse binrack type friendly name
	WarehouseBinrackTypeName string `json:"WarehouseBinrackTypeName,omitempty"`
}

// Validate validates this stock item batch inventory
func (m *StockItemBatchInventory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStockLocationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemBatchInventory) validateStockLocationID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockLocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockLocationId", "body", "uuid", m.StockLocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this stock item batch inventory based on the context it is used
func (m *StockItemBatchInventory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStartQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemBatchInventory) contextValidateStartQuantity(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "StartQuantity", "body", m.StartQuantity); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StockItemBatchInventory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemBatchInventory) UnmarshalBinary(b []byte) error {
	var res StockItemBatchInventory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
