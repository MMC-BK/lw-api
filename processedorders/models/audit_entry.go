// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditEntry audit entry
//
// swagger:model AuditEntry
type AuditEntry struct {

	// Record time and date
	// Format: date-time
	DateStamp strfmt.DateTime `json:"DateStamp,omitempty"`

	// Note text
	HistoryNote string `json:"HistoryNote,omitempty"`

	// Audit record tag
	Tag string `json:"Tag,omitempty"`

	// Audit trail record type
	TypeDescription string `json:"TypeDescription,omitempty"`

	// User who made audited change
	UpdatedBy string `json:"UpdatedBy,omitempty"`

	// Record type ID
	FkOrderHistoryTypeID string `json:"fkOrderHistoryTypeId,omitempty"`

	// Order ID (pkOrdeID)
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkOrderID strfmt.UUID `json:"fkOrderId,omitempty"`

	// Audit record ID
	SidHistory int32 `json:"sid_history,omitempty"`
}

// Validate validates this audit entry
func (m *AuditEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateStamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkOrderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditEntry) validateDateStamp(formats strfmt.Registry) error {
	if swag.IsZero(m.DateStamp) { // not required
		return nil
	}

	if err := validate.FormatOf("DateStamp", "body", "date-time", m.DateStamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuditEntry) validateFkOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkOrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkOrderId", "body", "uuid", m.FkOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this audit entry based on context it is used
func (m *AuditEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuditEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditEntry) UnmarshalBinary(b []byte) error {
	var res AuditEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
