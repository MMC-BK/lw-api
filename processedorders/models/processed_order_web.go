// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessedOrderWeb processed order web
//
// swagger:model ProcessedOrderWeb
type ProcessedOrderWeb struct {

	// Customer channel account name
	AccountName string `json:"AccountName,omitempty"`

	// Order first line of address
	Address1 string `json:"Address1,omitempty"`

	// Order second line of address
	Address2 string `json:"Address2,omitempty"`

	// Order third line of address
	Address3 string `json:"Address3,omitempty"`

	// Billing address line one
	BillingAddress1 string `json:"BillingAddress1,omitempty"`

	// Billing address line two
	BillingAddress2 string `json:"BillingAddress2,omitempty"`

	// Billing address line three
	BillingAddress3 string `json:"BillingAddress3,omitempty"`

	// Customer billing company
	BillingCompany string `json:"BillingCompany,omitempty"`

	// Billing country
	BillingCountryName string `json:"BillingCountryName,omitempty"`

	// billing email address
	BillingEmailAddress string `json:"BillingEmailAddress,omitempty"`

	// Customer billing name
	BillingName string `json:"BillingName,omitempty"`

	// Billing phone number
	BillingPhoneNumber string `json:"BillingPhoneNumber,omitempty"`

	// Billing postcode
	BillingPostCode string `json:"BillingPostCode,omitempty"`

	// Billing region, area, county
	BillingRegion string `json:"BillingRegion,omitempty"`

	// Billing town
	BillingTown string `json:"BillingTown,omitempty"`

	// Buyer phone number
	BuyerPhoneNumber string `json:"BuyerPhoneNumber,omitempty"`

	// Channel specific name used to identify the buyer, such as a username, normally used for eBay
	ChannelBuyerName string `json:"ChannelBuyerName,omitempty"`

	// Company
	Company string `json:"Company,omitempty"`

	// Country specific tax rate
	CountryTaxRate float64 `json:"CountryTaxRate,omitempty"`

	// This is an additional reference number from the sales channel, typically used by eBay
	ExternalReference string `json:"ExternalReference,omitempty"`

	// Folder name of an order
	FolderCollection string `json:"FolderCollection,omitempty"`

	// Order fulfilment location
	FulfilmentLocationName string `json:"FulfilmentLocationName,omitempty"`

	// If order on hold or cancelled.
	HoldOrCancel bool `json:"HoldOrCancel,omitempty"`

	// If order was created from an exchange
	IsExchange bool `json:"IsExchange,omitempty"`

	// If order was created from a resend
	IsResend bool `json:"IsResend,omitempty"`

	// Items weight
	ItemWeight float64 `json:"ItemWeight,omitempty"`

	// Package category
	PackageCategory string `json:"PackageCategory,omitempty"`

	// Package name
	PackageTitle string `json:"PackageTitle,omitempty"`

	// Postage cost excluding tax
	PostageCostExTax float64 `json:"PostageCostExTax,omitempty"`

	// Postal service code
	PostalServiceCode string `json:"PostalServiceCode,omitempty"`

	// Postal service name (e.g. Next day delivery)
	PostalServiceName string `json:"PostalServiceName,omitempty"`

	// Postal tracking number
	PostalTrackingNumber string `json:"PostalTrackingNumber,omitempty"`

	// Profit margin
	ProfitMargin float64 `json:"ProfitMargin,omitempty"`

	// Order reference number
	ReferenceNum string `json:"ReferenceNum,omitempty"`

	// Region, county, area
	Region string `json:"Region,omitempty"`

	// An additional reference number for the order
	SecondaryReference string `json:"SecondaryReference,omitempty"`

	// ChannelName/Source (e.g. EBAY)
	Source string `json:"Source,omitempty"`

	// Order subsource (e.g. EBAY1)
	SubSource string `json:"SubSource,omitempty"`

	// Order subtotal
	Subtotal float64 `json:"Subtotal,omitempty"`

	// Order tax id
	TaxID string `json:"TaxId,omitempty"`

	// Total discount
	TotalDiscount float64 `json:"TotalDiscount,omitempty"`

	// Total order weight
	TotalWeight float64 `json:"TotalWeight,omitempty"`

	// Town
	Town string `json:"Town,omitempty"`

	// Courier name (e.g. DPD)
	Vendor string `json:"Vendor,omitempty"`

	// Customer billing address
	CBillingAddress string `json:"cBillingAddress,omitempty"`

	// Country
	CCountry string `json:"cCountry,omitempty"`

	// Order currency
	CCurrency string `json:"cCurrency,omitempty"`

	// Customer email address
	CEmailAddress string `json:"cEmailAddress,omitempty"`

	// Customer full name
	CFullName string `json:"cFullName,omitempty"`

	// Post Code
	CPostCode string `json:"cPostCode,omitempty"`

	// Customer's shipping address
	CShippingAddress string `json:"cShippingAddress,omitempty"`

	// When order was cancelled
	// Format: date-time
	DCancelledOn strfmt.DateTime `json:"dCancelledOn,omitempty"`

	// When order was marked as PAID
	// Format: date-time
	DPaidOn strfmt.DateTime `json:"dPaidOn,omitempty"`

	// Date when order was processed
	// Format: date-time
	DProcessedOn strfmt.DateTime `json:"dProcessedOn,omitempty"`

	// Date when order was received on a channel
	// Format: date-time
	DReceivedDate strfmt.DateTime `json:"dReceivedDate,omitempty"`

	// Order postage cost
	FPostageCost float64 `json:"fPostageCost,omitempty"`

	// Order tax
	FTax float64 `json:"fTax,omitempty"`

	// Order total charge
	FTotalCharge float64 `json:"fTotalCharge,omitempty"`

	// Linnworks order ID
	NOrderID int32 `json:"nOrderId,omitempty"`

	// Order status
	NStatus int32 `json:"nStatus,omitempty"`

	// Order ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkOrderID strfmt.UUID `json:"pkOrderID,omitempty"`

	// Days elapsed between order received and order processed
	TimeDiff float64 `json:"timeDiff,omitempty"`
}

// Validate validates this processed order web
func (m *ProcessedOrderWeb) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDCancelledOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDPaidOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDProcessedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDReceivedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkOrderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessedOrderWeb) validateDCancelledOn(formats strfmt.Registry) error {
	if swag.IsZero(m.DCancelledOn) { // not required
		return nil
	}

	if err := validate.FormatOf("dCancelledOn", "body", "date-time", m.DCancelledOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProcessedOrderWeb) validateDPaidOn(formats strfmt.Registry) error {
	if swag.IsZero(m.DPaidOn) { // not required
		return nil
	}

	if err := validate.FormatOf("dPaidOn", "body", "date-time", m.DPaidOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProcessedOrderWeb) validateDProcessedOn(formats strfmt.Registry) error {
	if swag.IsZero(m.DProcessedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("dProcessedOn", "body", "date-time", m.DProcessedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProcessedOrderWeb) validateDReceivedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DReceivedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("dReceivedDate", "body", "date-time", m.DReceivedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProcessedOrderWeb) validatePkOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkOrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkOrderID", "body", "uuid", m.PkOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this processed order web based on context it is used
func (m *ProcessedOrderWeb) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProcessedOrderWeb) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessedOrderWeb) UnmarshalBinary(b []byte) error {
	var res ProcessedOrderWeb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
