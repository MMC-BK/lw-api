// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderItemBatch order item batch
//
// swagger:model OrderItemBatch
type OrderItemBatch struct {

	// assignment type
	// Enum: ["AUTO","MANUAL"]
	AssignmentType string `json:"AssignmentType,omitempty"`

	// batch
	Batch *StockItemBatch `json:"Batch,omitempty"`

	// batch inventory Id
	BatchInventoryID int32 `json:"BatchInventoryId,omitempty"`

	// despatch unit value
	// Read Only: true
	DespatchUnitValue float64 `json:"DespatchUnitValue,omitempty"`

	// order item batch Id
	OrderItemBatchID int32 `json:"OrderItemBatchId,omitempty"`

	// order item row Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	OrderItemRowID strfmt.UUID `json:"OrderItemRowId,omitempty"`

	// quantity
	Quantity int32 `json:"Quantity,omitempty"`
}

// Validate validates this order item batch
func (m *OrderItemBatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderItemRowID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var orderItemBatchTypeAssignmentTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTO","MANUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderItemBatchTypeAssignmentTypePropEnum = append(orderItemBatchTypeAssignmentTypePropEnum, v)
	}
}

const (

	// OrderItemBatchAssignmentTypeAUTO captures enum value "AUTO"
	OrderItemBatchAssignmentTypeAUTO string = "AUTO"

	// OrderItemBatchAssignmentTypeMANUAL captures enum value "MANUAL"
	OrderItemBatchAssignmentTypeMANUAL string = "MANUAL"
)

// prop value enum
func (m *OrderItemBatch) validateAssignmentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderItemBatchTypeAssignmentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrderItemBatch) validateAssignmentType(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignmentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAssignmentTypeEnum("AssignmentType", "body", m.AssignmentType); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemBatch) validateBatch(formats strfmt.Registry) error {
	if swag.IsZero(m.Batch) { // not required
		return nil
	}

	if m.Batch != nil {
		if err := m.Batch.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Batch")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Batch")
			}

			return err
		}
	}

	return nil
}

func (m *OrderItemBatch) validateOrderItemRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderItemRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderItemRowId", "body", "uuid", m.OrderItemRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order item batch based on the context it is used
func (m *OrderItemBatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDespatchUnitValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemBatch) contextValidateBatch(ctx context.Context, formats strfmt.Registry) error {

	if m.Batch != nil {

		if swag.IsZero(m.Batch) { // not required
			return nil
		}

		if err := m.Batch.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Batch")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Batch")
			}

			return err
		}
	}

	return nil
}

func (m *OrderItemBatch) contextValidateDespatchUnitValue(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "DespatchUnitValue", "body", m.DespatchUnitValue); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItemBatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItemBatch) UnmarshalBinary(b []byte) error {
	var res OrderItemBatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
