// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RefundInfo refund info
//
// swagger:model RefundInfo
type RefundInfo struct {

	// When refund was actioned
	// Format: date-time
	ActionDate strfmt.DateTime `json:"ActionDate,omitempty"`

	// If refund has been actioned
	Actioned bool `json:"Actioned,omitempty"`

	// Refund amount
	Amount float64 `json:"Amount,omitempty"`

	// Channel refund reason
	ChannelReason string `json:"ChannelReason,omitempty"`

	// Secondary channel reason for a refund
	ChannelReasonSec string `json:"ChannelReasonSec,omitempty"`

	// Cost
	Cost float64 `json:"Cost,omitempty"`

	// Status of refund
	IgnoredValidation bool `json:"IgnoredValidation,omitempty"`

	// If its an item that is refunded
	IsItem bool `json:"IsItem,omitempty"`

	// is new
	IsNew bool `json:"IsNew,omitempty"`

	// If its a service that is refunded
	IsService bool `json:"IsService,omitempty"`

	// Product title
	ItemTitle string `json:"ItemTitle,omitempty"`

	// Reason for a refund
	Reason string `json:"Reason,omitempty"`

	// refund status
	// Enum: ["OPEN","PROCESSED","ERROR","ERROR_ACKED","PENDING"]
	RefundStatus string `json:"RefundStatus,omitempty"`

	// return reference number
	ReturnReference string `json:"ReturnReference,omitempty"`

	// Product SKU
	SKU string `json:"SKU,omitempty"`

	// should serialize channel reason
	// Read Only: true
	ShouldSerializeChannelReason *bool `json:"ShouldSerializeChannelReason,omitempty"`

	// should serialize channel reason sec
	// Read Only: true
	ShouldSerializeChannelReasonSec *bool `json:"ShouldSerializeChannelReasonSec,omitempty"`

	// Order item record ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkOrderItemRowID strfmt.UUID `json:"fkOrderItemRowId,omitempty"`

	// Refund record ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkRefundRowID strfmt.UUID `json:"pkRefundRowId,omitempty"`
}

// Validate validates this refund info
func (m *RefundInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkOrderItemRowID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkRefundRowID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RefundInfo) validateActionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ActionDate", "body", "date-time", m.ActionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var refundInfoTypeRefundStatusPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPEN","PROCESSED","ERROR","ERROR_ACKED","PENDING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		refundInfoTypeRefundStatusPropEnum = append(refundInfoTypeRefundStatusPropEnum, v)
	}
}

const (

	// RefundInfoRefundStatusOPEN captures enum value "OPEN"
	RefundInfoRefundStatusOPEN string = "OPEN"

	// RefundInfoRefundStatusPROCESSED captures enum value "PROCESSED"
	RefundInfoRefundStatusPROCESSED string = "PROCESSED"

	// RefundInfoRefundStatusERROR captures enum value "ERROR"
	RefundInfoRefundStatusERROR string = "ERROR"

	// RefundInfoRefundStatusERRORACKED captures enum value "ERROR_ACKED"
	RefundInfoRefundStatusERRORACKED string = "ERROR_ACKED"

	// RefundInfoRefundStatusPENDING captures enum value "PENDING"
	RefundInfoRefundStatusPENDING string = "PENDING"
)

// prop value enum
func (m *RefundInfo) validateRefundStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, refundInfoTypeRefundStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RefundInfo) validateRefundStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.RefundStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateRefundStatusEnum("RefundStatus", "body", m.RefundStatus); err != nil {
		return err
	}

	return nil
}

func (m *RefundInfo) validateFkOrderItemRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkOrderItemRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkOrderItemRowId", "body", "uuid", m.FkOrderItemRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RefundInfo) validatePkRefundRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkRefundRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkRefundRowId", "body", "uuid", m.PkRefundRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this refund info based on the context it is used
func (m *RefundInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateShouldSerializeChannelReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShouldSerializeChannelReasonSec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RefundInfo) contextValidateShouldSerializeChannelReason(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ShouldSerializeChannelReason", "body", m.ShouldSerializeChannelReason); err != nil {
		return err
	}

	return nil
}

func (m *RefundInfo) contextValidateShouldSerializeChannelReasonSec(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ShouldSerializeChannelReasonSec", "body", m.ShouldSerializeChannelReasonSec); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RefundInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RefundInfo) UnmarshalBinary(b []byte) error {
	var res RefundInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
