// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceItem service item
//
// swagger:model ServiceItem
type ServiceItem struct {

	// If automatic refunds allowed
	AllowsAutomatedRefund bool `json:"AllowsAutomatedRefund,omitempty"`

	// Channel refund reason
	DefaultChannelReason *ChannelRefundReason `json:"DefaultChannelReason,omitempty"`

	// Channel refund subreason
	DefaultChannelSubReason *ChannelRefundSubReason `json:"DefaultChannelSubReason,omitempty"`

	// Item number
	ItemNumber string `json:"ItemNumber,omitempty"`

	// Service cost
	ServiceCost float64 `json:"ServiceCost,omitempty"`

	// Service name
	ServiceName string `json:"ServiceName,omitempty"`

	// Order item record row ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkOrderItemRowID strfmt.UUID `json:"pkOrderItemRowId,omitempty"`
}

// Validate validates this service item
func (m *ServiceItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultChannelReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultChannelSubReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkOrderItemRowID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceItem) validateDefaultChannelReason(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultChannelReason) { // not required
		return nil
	}

	if m.DefaultChannelReason != nil {
		if err := m.DefaultChannelReason.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("DefaultChannelReason")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("DefaultChannelReason")
			}

			return err
		}
	}

	return nil
}

func (m *ServiceItem) validateDefaultChannelSubReason(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultChannelSubReason) { // not required
		return nil
	}

	if m.DefaultChannelSubReason != nil {
		if err := m.DefaultChannelSubReason.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("DefaultChannelSubReason")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("DefaultChannelSubReason")
			}

			return err
		}
	}

	return nil
}

func (m *ServiceItem) validatePkOrderItemRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkOrderItemRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkOrderItemRowId", "body", "uuid", m.PkOrderItemRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this service item based on the context it is used
func (m *ServiceItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefaultChannelReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultChannelSubReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceItem) contextValidateDefaultChannelReason(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultChannelReason != nil {

		if swag.IsZero(m.DefaultChannelReason) { // not required
			return nil
		}

		if err := m.DefaultChannelReason.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("DefaultChannelReason")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("DefaultChannelReason")
			}

			return err
		}
	}

	return nil
}

func (m *ServiceItem) contextValidateDefaultChannelSubReason(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultChannelSubReason != nil {

		if swag.IsZero(m.DefaultChannelSubReason) { // not required
			return nil
		}

		if err := m.DefaultChannelSubReason.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("DefaultChannelSubReason")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("DefaultChannelSubReason")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceItem) UnmarshalBinary(b []byte) error {
	var res ServiceItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
