// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReturnOrderHeader return order header
//
// swagger:model ReturnOrderHeader
type ReturnOrderHeader struct {

	// Postal service name (e.g. Next day delivery)
	PostalServiceName string `json:"PostalServiceName,omitempty"`

	// Link to order refund
	RefundLink string `json:"RefundLink,omitempty"`

	// ChannelName/Source (e.g. EBAY)
	Source string `json:"Source,omitempty"`

	// Subsource (e.g. EBAY1)
	SubSource string `json:"SubSource,omitempty"`

	// Currency
	CCurrency string `json:"cCurrency,omitempty"`

	// Shipping address
	CShippingAddress string `json:"cShippingAddress,omitempty"`

	// When order was processed
	// Format: date-time
	DProcessedOn strfmt.DateTime `json:"dProcessedOn,omitempty"`

	// Order received date. When order was downloaded from the channel
	// Format: date-time
	DReceivedDate strfmt.DateTime `json:"dReceivedDate,omitempty"`

	// OrdOrder total charge
	FTotalCharge float64 `json:"fTotalCharge,omitempty"`

	// Linnworks order number
	NOrderID int32 `json:"nOrderId,omitempty"`

	// Order ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkOrderID strfmt.UUID `json:"pkOrderId,omitempty"`
}

// Validate validates this return order header
func (m *ReturnOrderHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDProcessedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDReceivedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkOrderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnOrderHeader) validateDProcessedOn(formats strfmt.Registry) error {
	if swag.IsZero(m.DProcessedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("dProcessedOn", "body", "date-time", m.DProcessedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnOrderHeader) validateDReceivedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DReceivedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("dReceivedDate", "body", "date-time", m.DReceivedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnOrderHeader) validatePkOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkOrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkOrderId", "body", "uuid", m.PkOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this return order header based on context it is used
func (m *ReturnOrderHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReturnOrderHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnOrderHeader) UnmarshalBinary(b []byte) error {
	var res ReturnOrderHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
