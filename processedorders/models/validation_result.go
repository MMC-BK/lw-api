// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ValidationResult validation result
//
// swagger:model ValidationResult
type ValidationResult struct {

	// Additional information
	AdditionalInformation string `json:"AdditionalInformation,omitempty"`

	// List of affected items
	InvalidItems []*RefundItem `json:"InvalidItems"`

	// Validation result
	// Enum: ["Success","Unknown","RefundAutomationDisabled","NotAllowedByChannel","InvalidRefundAmounts","NotImplementedForChannel"]
	Type string `json:"Type,omitempty"`
}

// Validate validates this validation result
func (m *ValidationResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvalidItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidationResult) validateInvalidItems(formats strfmt.Registry) error {
	if swag.IsZero(m.InvalidItems) { // not required
		return nil
	}

	for i := 0; i < len(m.InvalidItems); i++ {
		if swag.IsZero(m.InvalidItems[i]) { // not required
			continue
		}

		if m.InvalidItems[i] != nil {
			if err := m.InvalidItems[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("InvalidItems" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("InvalidItems" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

var validationResultTypeTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Success","Unknown","RefundAutomationDisabled","NotAllowedByChannel","InvalidRefundAmounts","NotImplementedForChannel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		validationResultTypeTypePropEnum = append(validationResultTypeTypePropEnum, v)
	}
}

const (

	// ValidationResultTypeSuccess captures enum value "Success"
	ValidationResultTypeSuccess string = "Success"

	// ValidationResultTypeUnknown captures enum value "Unknown"
	ValidationResultTypeUnknown string = "Unknown"

	// ValidationResultTypeRefundAutomationDisabled captures enum value "RefundAutomationDisabled"
	ValidationResultTypeRefundAutomationDisabled string = "RefundAutomationDisabled"

	// ValidationResultTypeNotAllowedByChannel captures enum value "NotAllowedByChannel"
	ValidationResultTypeNotAllowedByChannel string = "NotAllowedByChannel"

	// ValidationResultTypeInvalidRefundAmounts captures enum value "InvalidRefundAmounts"
	ValidationResultTypeInvalidRefundAmounts string = "InvalidRefundAmounts"

	// ValidationResultTypeNotImplementedForChannel captures enum value "NotImplementedForChannel"
	ValidationResultTypeNotImplementedForChannel string = "NotImplementedForChannel"
)

// prop value enum
func (m *ValidationResult) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, validationResultTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ValidationResult) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this validation result based on the context it is used
func (m *ValidationResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvalidItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidationResult) contextValidateInvalidItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InvalidItems); i++ {

		if m.InvalidItems[i] != nil {

			if swag.IsZero(m.InvalidItems[i]) { // not required
				return nil
			}

			if err := m.InvalidItems[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("InvalidItems" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("InvalidItems" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidationResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidationResult) UnmarshalBinary(b []byte) error {
	var res ValidationResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
