// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RefundItem refund item
//
// swagger:model RefundItem
type RefundItem struct {

	// The primary channel reason
	ChannelReason string `json:"ChannelReason,omitempty"`

	// The secondary channel reason
	ChannelReasonSec string `json:"ChannelReasonSec,omitempty"`

	// Manual refunds will never be passed to the channel validation routines
	IsManualRefund bool `json:"IsManualRefund,omitempty"`

	// The seller's text reason for the refund
	Reason string `json:"Reason,omitempty"`

	// The amount of money the refund is for.
	RefundAmount float64 `json:"RefundAmount,omitempty"`

	// In the case of item refunds, the number of items
	RefundQty int32 `json:"RefundQty,omitempty"`

	// The type of refund item
	// Enum: ["Item","Service","Shipping","FreeText"]
	Type string `json:"Type,omitempty"`

	// The order item or service to refund
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkOrderItemID strfmt.UUID `json:"fkOrderItemId,omitempty"`

	// For updating refund amounts
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkRefundRowID strfmt.UUID `json:"pkRefundRowId,omitempty"`
}

// Validate validates this refund item
func (m *RefundItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkOrderItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkRefundRowID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var refundItemTypeTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Item","Service","Shipping","FreeText"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		refundItemTypeTypePropEnum = append(refundItemTypeTypePropEnum, v)
	}
}

const (

	// RefundItemTypeItem captures enum value "Item"
	RefundItemTypeItem string = "Item"

	// RefundItemTypeService captures enum value "Service"
	RefundItemTypeService string = "Service"

	// RefundItemTypeShipping captures enum value "Shipping"
	RefundItemTypeShipping string = "Shipping"

	// RefundItemTypeFreeText captures enum value "FreeText"
	RefundItemTypeFreeText string = "FreeText"
)

// prop value enum
func (m *RefundItem) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, refundItemTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RefundItem) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *RefundItem) validateFkOrderItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkOrderItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkOrderItemId", "body", "uuid", m.FkOrderItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RefundItem) validatePkRefundRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkRefundRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkRefundRowId", "body", "uuid", m.PkRefundRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this refund item based on context it is used
func (m *RefundItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RefundItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RefundItem) UnmarshalBinary(b []byte) error {
	var res RefundItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
