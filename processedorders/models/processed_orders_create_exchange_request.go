// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessedOrdersCreateExchangeRequest processed orders create exchange request
//
// swagger:model ProcessedOrders_CreateExchangeRequest
type ProcessedOrdersCreateExchangeRequest struct {

	// The refund category
	Category string `json:"category,omitempty"`

	// Channel reason - required if a refund on the channel is required
	ChannelReason string `json:"channelReason,omitempty"`

	// Channel subreason - required if a refund on the channel is required.
	ChannelSubReason string `json:"channelSubReason,omitempty"`

	// The id of the location to despatch replacement items from
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	DespatchLocation strfmt.UUID `json:"despatchLocation,omitempty"`

	// A list of items to be exchanged, including quantity, scrap, refund, etc.
	ExchangeItems []*RowQty `json:"exchangeItems"`

	// True if failed validation has been ignored (see IsRefundValid). Otherwise, false. When set to true, refunds will not be automatically actioned on the channel. Ignored if creating a booking as a refund is not created at this stage.
	IgnoredValidation bool `json:"ignoredValidation,omitempty"`

	// True if it is a exchange booking, False if it is a new exchange
	IsBooking bool `json:"isBooking,omitempty"`

	// The order id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkOrderID strfmt.UUID `json:"pkOrderId,omitempty"`

	// The reason for the reason
	Reason string `json:"reason,omitempty"`

	// The id of the location to return stock to
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	ReturnLocation strfmt.UUID `json:"returnLocation,omitempty"`
}

// Validate validates this processed orders create exchange request
func (m *ProcessedOrdersCreateExchangeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDespatchLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessedOrdersCreateExchangeRequest) validateDespatchLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.DespatchLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("despatchLocation", "body", "uuid", m.DespatchLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProcessedOrdersCreateExchangeRequest) validateExchangeItems(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeItems) { // not required
		return nil
	}

	for i := 0; i < len(m.ExchangeItems); i++ {
		if swag.IsZero(m.ExchangeItems[i]) { // not required
			continue
		}

		if m.ExchangeItems[i] != nil {
			if err := m.ExchangeItems[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("exchangeItems" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("exchangeItems" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ProcessedOrdersCreateExchangeRequest) validatePkOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkOrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkOrderId", "body", "uuid", m.PkOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProcessedOrdersCreateExchangeRequest) validateReturnLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.ReturnLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("returnLocation", "body", "uuid", m.ReturnLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this processed orders create exchange request based on the context it is used
func (m *ProcessedOrdersCreateExchangeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExchangeItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessedOrdersCreateExchangeRequest) contextValidateExchangeItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExchangeItems); i++ {

		if m.ExchangeItems[i] != nil {

			if swag.IsZero(m.ExchangeItems[i]) { // not required
				return nil
			}

			if err := m.ExchangeItems[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("exchangeItems" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("exchangeItems" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessedOrdersCreateExchangeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessedOrdersCreateExchangeRequest) UnmarshalBinary(b []byte) error {
	var res ProcessedOrdersCreateExchangeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
