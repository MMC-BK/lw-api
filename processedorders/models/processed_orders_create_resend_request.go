// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessedOrdersCreateResendRequest processed orders create resend request
//
// swagger:model ProcessedOrders_CreateResendRequest
type ProcessedOrdersCreateResendRequest struct {

	// Order-level additional cost
	AdditionalCost float64 `json:"additionalCost,omitempty"`

	// Category
	Category string `json:"category,omitempty"`

	// Location ID where from resend be despatched
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	DespatchLocation strfmt.UUID `json:"despatchLocation,omitempty"`

	// Order ID that needs to be resend
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkOrderID strfmt.UUID `json:"pkOrderId,omitempty"`

	// Resond reason
	Reason string `json:"reason,omitempty"`

	// Resend items information
	ResendItems []*RowQty `json:"resendItems"`
}

// Validate validates this processed orders create resend request
func (m *ProcessedOrdersCreateResendRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDespatchLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResendItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessedOrdersCreateResendRequest) validateDespatchLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.DespatchLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("despatchLocation", "body", "uuid", m.DespatchLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProcessedOrdersCreateResendRequest) validatePkOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkOrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkOrderId", "body", "uuid", m.PkOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProcessedOrdersCreateResendRequest) validateResendItems(formats strfmt.Registry) error {
	if swag.IsZero(m.ResendItems) { // not required
		return nil
	}

	for i := 0; i < len(m.ResendItems); i++ {
		if swag.IsZero(m.ResendItems[i]) { // not required
			continue
		}

		if m.ResendItems[i] != nil {
			if err := m.ResendItems[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("resendItems" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("resendItems" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this processed orders create resend request based on the context it is used
func (m *ProcessedOrdersCreateResendRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResendItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessedOrdersCreateResendRequest) contextValidateResendItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResendItems); i++ {

		if m.ResendItems[i] != nil {

			if swag.IsZero(m.ResendItems[i]) { // not required
				return nil
			}

			if err := m.ResendItems[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("resendItems" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("resendItems" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessedOrdersCreateResendRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessedOrdersCreateResendRequest) UnmarshalBinary(b []byte) error {
	var res ProcessedOrdersCreateResendRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
