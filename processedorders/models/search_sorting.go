// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchSorting search sorting
//
// swagger:model SearchSorting
type SearchSorting struct {

	// sort direction
	// Enum: ["ASC","DESC"]
	SortDirection string `json:"SortDirection,omitempty"`

	// sort field
	SortField string `json:"SortField,omitempty"`
}

// Validate validates this search sorting
func (m *SearchSorting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSortDirection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var searchSortingTypeSortDirectionPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ASC","DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchSortingTypeSortDirectionPropEnum = append(searchSortingTypeSortDirectionPropEnum, v)
	}
}

const (

	// SearchSortingSortDirectionASC captures enum value "ASC"
	SearchSortingSortDirectionASC string = "ASC"

	// SearchSortingSortDirectionDESC captures enum value "DESC"
	SearchSortingSortDirectionDESC string = "DESC"
)

// prop value enum
func (m *SearchSorting) validateSortDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchSortingTypeSortDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchSorting) validateSortDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.SortDirection) { // not required
		return nil
	}

	// value enum
	if err := m.validateSortDirectionEnum("SortDirection", "body", m.SortDirection); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search sorting based on context it is used
func (m *SearchSorting) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchSorting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchSorting) UnmarshalBinary(b []byte) error {
	var res SearchSorting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
