// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RowQty row qty
//
// swagger:model RowQty
type RowQty struct {

	// Additional costs
	AdditionalCost float64 `json:"AdditionalCost,omitempty"`

	// The batch related to the rowqty
	Batch *OrderItemBatch `json:"Batch,omitempty"`

	// Returned qty
	NewQty int32 `json:"NewQty,omitempty"`

	// New (returned) stock item ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	NewStockItemID strfmt.UUID `json:"NewStockItemId,omitempty"`

	// Batch inventory id
	OrderItemBatchID int32 `json:"OrderItemBatchId,omitempty"`

	// Order item record row ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	OrderItemRowID strfmt.UUID `json:"OrderItemRowId,omitempty"`

	// Affected quantity
	Qty int32 `json:"Qty,omitempty"`

	// Refund amount
	Refund float64 `json:"Refund,omitempty"`

	// Scrapped quantity
	ScrapQty int32 `json:"ScrapQty,omitempty"`
}

// Validate validates this row qty
func (m *RowQty) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderItemRowID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RowQty) validateBatch(formats strfmt.Registry) error {
	if swag.IsZero(m.Batch) { // not required
		return nil
	}

	if m.Batch != nil {
		if err := m.Batch.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Batch")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Batch")
			}

			return err
		}
	}

	return nil
}

func (m *RowQty) validateNewStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.NewStockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("NewStockItemId", "body", "uuid", m.NewStockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RowQty) validateOrderItemRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderItemRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderItemRowId", "body", "uuid", m.OrderItemRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this row qty based on the context it is used
func (m *RowQty) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RowQty) contextValidateBatch(ctx context.Context, formats strfmt.Registry) error {

	if m.Batch != nil {

		if swag.IsZero(m.Batch) { // not required
			return nil
		}

		if err := m.Batch.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Batch")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Batch")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RowQty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RowQty) UnmarshalBinary(b []byte) error {
	var res RowQty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
