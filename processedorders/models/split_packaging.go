// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SplitPackaging split packaging
//
// swagger:model SplitPackaging
type SplitPackaging struct {

	// Bin split index
	BinIndex int32 `json:"BinIndex,omitempty"`

	// Item Title
	ItemTitle string `json:"ItemTitle,omitempty"`

	// Package name
	PackageTitle string `json:"PackageTitle,omitempty"`

	// Quantity
	Quantity int32 `json:"Quantity,omitempty"`

	// Product SKU
	SKU string `json:"SKU,omitempty"`

	// Tracking number
	TrackingNumber string `json:"TrackingNumber,omitempty"`

	// Item weight
	Weight float64 `json:"Weight,omitempty"`

	// Order item row record ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkOrderItemRowID strfmt.UUID `json:"fkOrderItemRowId,omitempty"`

	// Split bin ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkBinID strfmt.UUID `json:"pkBinId,omitempty"`
}

// Validate validates this split packaging
func (m *SplitPackaging) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFkOrderItemRowID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkBinID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SplitPackaging) validateFkOrderItemRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkOrderItemRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkOrderItemRowId", "body", "uuid", m.FkOrderItemRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SplitPackaging) validatePkBinID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkBinID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkBinId", "body", "uuid", m.PkBinID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this split packaging based on context it is used
func (m *SplitPackaging) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SplitPackaging) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SplitPackaging) UnmarshalBinary(b []byte) error {
	var res SplitPackaging
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
