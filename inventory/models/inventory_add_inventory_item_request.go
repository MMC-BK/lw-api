// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InventoryAddInventoryItemRequest inventory add inventory item request
//
// swagger:model Inventory_AddInventoryItemRequest
type InventoryAddInventoryItemRequest struct {

	// New StockItem
	InventoryItem *StockItem `json:"inventoryItem,omitempty"`
}

// Validate validates this inventory add inventory item request
func (m *InventoryAddInventoryItemRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInventoryItem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryAddInventoryItemRequest) validateInventoryItem(formats strfmt.Registry) error {
	if swag.IsZero(m.InventoryItem) { // not required
		return nil
	}

	if m.InventoryItem != nil {
		if err := m.InventoryItem.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("inventoryItem")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("inventoryItem")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this inventory add inventory item request based on the context it is used
func (m *InventoryAddInventoryItemRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInventoryItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryAddInventoryItemRequest) contextValidateInventoryItem(ctx context.Context, formats strfmt.Registry) error {

	if m.InventoryItem != nil {

		if swag.IsZero(m.InventoryItem) { // not required
			return nil
		}

		if err := m.InventoryItem.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("inventoryItem")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("inventoryItem")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryAddInventoryItemRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryAddInventoryItemRequest) UnmarshalBinary(b []byte) error {
	var res InventoryAddInventoryItemRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
