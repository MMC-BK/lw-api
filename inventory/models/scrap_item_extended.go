// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScrapItemExtended scrap item extended
//
// swagger:model ScrapItemExtended
type ScrapItemExtended struct {

	// Inventory batch id
	BatchInventoryID int32 `json:"BatchInventoryId,omitempty"`

	// Quantity to scrap
	Quantity int32 `json:"Quantity,omitempty"`

	// Scrap category
	ScrapCategory string `json:"ScrapCategory,omitempty"`

	// Scrap reason (max 600 characters)
	ScrapReason string `json:"ScrapReason,omitempty"`

	// Stock item id to scrap
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkStockItemID strfmt.UUID `json:"fkStockItemId,omitempty"`

	// Nullable
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkScrapID strfmt.UUID `json:"pkScrapId,omitempty"`
}

// Validate validates this scrap item extended
func (m *ScrapItemExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFkStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkScrapID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScrapItemExtended) validateFkStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkStockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkStockItemId", "body", "uuid", m.FkStockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScrapItemExtended) validatePkScrapID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkScrapID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkScrapId", "body", "uuid", m.PkScrapID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this scrap item extended based on context it is used
func (m *ScrapItemExtended) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScrapItemExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScrapItemExtended) UnmarshalBinary(b []byte) error {
	var res ScrapItemExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
