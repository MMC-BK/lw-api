// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockLocation stock location
//
// swagger:model StockLocation
type StockLocation struct {

	// address1
	Address1 string `json:"Address1,omitempty"`

	// address2
	Address2 string `json:"Address2,omitempty"`

	// city
	City string `json:"City,omitempty"`

	// count in order until acknowledgement
	CountInOrderUntilAcknowledgement bool `json:"CountInOrderUntilAcknowledgement,omitempty"`

	// country
	Country string `json:"Country,omitempty"`

	// county
	County string `json:"County,omitempty"`

	// fulfilment center deduct stock when processed
	FulfilmentCenterDeductStockWhenProcessed bool `json:"FulfilmentCenterDeductStockWhenProcessed,omitempty"`

	// is fulfillment center
	IsFulfillmentCenter bool `json:"IsFulfillmentCenter,omitempty"`

	// is not trackable
	IsNotTrackable bool `json:"IsNotTrackable,omitempty"`

	// is warehouse managed
	IsWarehouseManaged bool `json:"IsWarehouseManaged,omitempty"`

	// location name
	LocationName string `json:"LocationName,omitempty"`

	// location tag
	LocationTag string `json:"LocationTag,omitempty"`

	// stock location Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockLocationID strfmt.UUID `json:"StockLocationId,omitempty"`

	// stock location int Id
	StockLocationIntID int32 `json:"StockLocationIntId,omitempty"`

	// zip code
	ZipCode string `json:"ZipCode,omitempty"`
}

// Validate validates this stock location
func (m *StockLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStockLocationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockLocation) validateStockLocationID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockLocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockLocationId", "body", "uuid", m.StockLocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stock location based on context it is used
func (m *StockLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StockLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockLocation) UnmarshalBinary(b []byte) error {
	var res StockLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
