// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Supplier supplier
//
// swagger:model Supplier
type Supplier struct {

	// Supplier's address
	Address string `json:"Address,omitempty"`

	// Second line of address
	AlternativeAddress string `json:"AlternativeAddress,omitempty"`

	// City
	City string `json:"City,omitempty"`

	// Name of main contact
	ContactName string `json:"ContactName,omitempty"`

	// Country
	Country string `json:"Country,omitempty"`

	// Currency used
	Currency string `json:"Currency,omitempty"`

	// E-mail
	Email string `json:"Email,omitempty"`

	// Fax number
	FaxNumber string `json:"FaxNumber,omitempty"`

	// Postcode
	PostCode string `json:"PostCode,omitempty"`

	// Region
	Region string `json:"Region,omitempty"`

	// Secondary telephone number
	SecondaryTelNumber string `json:"SecondaryTelNumber,omitempty"`

	// Supplier Name
	SupplierName string `json:"SupplierName,omitempty"`

	// Telephone number
	TelephoneNumber string `json:"TelephoneNumber,omitempty"`

	// Web page
	WebPage string `json:"WebPage,omitempty"`

	// Supplier Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkSupplierID strfmt.UUID `json:"pkSupplierID,omitempty"`
}

// Validate validates this supplier
func (m *Supplier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePkSupplierID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Supplier) validatePkSupplierID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkSupplierID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkSupplierID", "body", "uuid", m.PkSupplierID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this supplier based on context it is used
func (m *Supplier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Supplier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Supplier) UnmarshalBinary(b []byte) error {
	var res Supplier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
