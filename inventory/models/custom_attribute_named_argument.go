// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomAttributeNamedArgument custom attribute named argument
//
// swagger:model CustomAttributeNamedArgument
type CustomAttributeNamedArgument struct {

	// is field
	// Read Only: true
	IsField *bool `json:"IsField,omitempty"`

	// member info
	// Read Only: true
	MemberInfo *MemberInfo `json:"MemberInfo,omitempty"`

	// member name
	// Read Only: true
	MemberName string `json:"MemberName,omitempty"`

	// typed value
	// Read Only: true
	TypedValue *CustomAttributeTypedArgument `json:"TypedValue,omitempty"`
}

// Validate validates this custom attribute named argument
func (m *CustomAttributeNamedArgument) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMemberInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypedValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomAttributeNamedArgument) validateMemberInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.MemberInfo) { // not required
		return nil
	}

	if m.MemberInfo != nil {
		if err := m.MemberInfo.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("MemberInfo")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("MemberInfo")
			}

			return err
		}
	}

	return nil
}

func (m *CustomAttributeNamedArgument) validateTypedValue(formats strfmt.Registry) error {
	if swag.IsZero(m.TypedValue) { // not required
		return nil
	}

	if m.TypedValue != nil {
		if err := m.TypedValue.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("TypedValue")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("TypedValue")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this custom attribute named argument based on the context it is used
func (m *CustomAttributeNamedArgument) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIsField(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemberInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemberName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypedValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomAttributeNamedArgument) contextValidateIsField(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsField", "body", m.IsField); err != nil {
		return err
	}

	return nil
}

func (m *CustomAttributeNamedArgument) contextValidateMemberInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.MemberInfo != nil {

		if swag.IsZero(m.MemberInfo) { // not required
			return nil
		}

		if err := m.MemberInfo.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("MemberInfo")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("MemberInfo")
			}

			return err
		}
	}

	return nil
}

func (m *CustomAttributeNamedArgument) contextValidateMemberName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "MemberName", "body", m.MemberName); err != nil {
		return err
	}

	return nil
}

func (m *CustomAttributeNamedArgument) contextValidateTypedValue(ctx context.Context, formats strfmt.Registry) error {

	if m.TypedValue != nil {

		if swag.IsZero(m.TypedValue) { // not required
			return nil
		}

		if err := m.TypedValue.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("TypedValue")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("TypedValue")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomAttributeNamedArgument) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomAttributeNamedArgument) UnmarshalBinary(b []byte) error {
	var res CustomAttributeNamedArgument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
