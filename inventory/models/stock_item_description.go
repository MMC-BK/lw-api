// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemDescription stock item description
//
// swagger:model StockItemDescription
type StockItemDescription struct {

	// Product description
	Description string `json:"Description,omitempty"`

	// ChannelName/Source (e.g. EBAY)
	Source string `json:"Source,omitempty"`

	// Stock Item Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockItemID strfmt.UUID `json:"StockItemId,omitempty"`

	// Stock Item interger Id
	StockItemIntID int32 `json:"StockItemIntId,omitempty"`

	// Channel subsource (e.g EBAY1)
	SubSource string `json:"SubSource,omitempty"`

	// Record row ID (generate random GUID)
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkRowID strfmt.UUID `json:"pkRowId,omitempty"`
}

// Validate validates this stock item description
func (m *StockItemDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkRowID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemDescription) validateStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockItemId", "body", "uuid", m.StockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemDescription) validatePkRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkRowId", "body", "uuid", m.PkRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stock item description based on context it is used
func (m *StockItemDescription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StockItemDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemDescription) UnmarshalBinary(b []byte) error {
	var res StockItemDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
