// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigPropertySelectionListSelectStringValueOptionGUID config property selection list select string value option Guid
//
// swagger:model ConfigPropertySelectionList_SelectStringValueOption_Guid
type ConfigPropertySelectionListSelectStringValueOptionGUID struct {

	// is changed
	// Read Only: true
	IsChanged *bool `json:"IsChanged,omitempty"`

	// loaded
	// Read Only: true
	Loaded *bool `json:"Loaded,omitempty"`

	// on get selection list
	OnGetSelectionList *GetSelectionListSelectStringValueOption `json:"OnGetSelectionList,omitempty"`

	// property type
	// Read Only: true
	PropertyType string `json:"PropertyType,omitempty"`

	// property value
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PropertyValue strfmt.UUID `json:"PropertyValue,omitempty"`

	// pk property Id
	// Read Only: true
	PkPropertyID int32 `json:"pkPropertyId,omitempty"`
}

// Validate validates this config property selection list select string value option Guid
func (m *ConfigPropertySelectionListSelectStringValueOptionGUID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOnGetSelectionList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropertyValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigPropertySelectionListSelectStringValueOptionGUID) validateOnGetSelectionList(formats strfmt.Registry) error {
	if swag.IsZero(m.OnGetSelectionList) { // not required
		return nil
	}

	if m.OnGetSelectionList != nil {
		if err := m.OnGetSelectionList.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("OnGetSelectionList")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("OnGetSelectionList")
			}

			return err
		}
	}

	return nil
}

func (m *ConfigPropertySelectionListSelectStringValueOptionGUID) validatePropertyValue(formats strfmt.Registry) error {
	if swag.IsZero(m.PropertyValue) { // not required
		return nil
	}

	if err := validate.FormatOf("PropertyValue", "body", "uuid", m.PropertyValue.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this config property selection list select string value option Guid based on the context it is used
func (m *ConfigPropertySelectionListSelectStringValueOptionGUID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIsChanged(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoaded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnGetSelectionList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePropertyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePkPropertyID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigPropertySelectionListSelectStringValueOptionGUID) contextValidateIsChanged(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsChanged", "body", m.IsChanged); err != nil {
		return err
	}

	return nil
}

func (m *ConfigPropertySelectionListSelectStringValueOptionGUID) contextValidateLoaded(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Loaded", "body", m.Loaded); err != nil {
		return err
	}

	return nil
}

func (m *ConfigPropertySelectionListSelectStringValueOptionGUID) contextValidateOnGetSelectionList(ctx context.Context, formats strfmt.Registry) error {

	if m.OnGetSelectionList != nil {

		if swag.IsZero(m.OnGetSelectionList) { // not required
			return nil
		}

		if err := m.OnGetSelectionList.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("OnGetSelectionList")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("OnGetSelectionList")
			}

			return err
		}
	}

	return nil
}

func (m *ConfigPropertySelectionListSelectStringValueOptionGUID) contextValidatePropertyType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "PropertyType", "body", m.PropertyType); err != nil {
		return err
	}

	return nil
}

func (m *ConfigPropertySelectionListSelectStringValueOptionGUID) contextValidatePkPropertyID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "pkPropertyId", "body", m.PkPropertyID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigPropertySelectionListSelectStringValueOptionGUID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigPropertySelectionListSelectStringValueOptionGUID) UnmarshalBinary(b []byte) error {
	var res ConfigPropertySelectionListSelectStringValueOptionGUID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
