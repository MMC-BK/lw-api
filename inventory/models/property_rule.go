// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PropertyRule property rule
//
// swagger:model PropertyRule
type PropertyRule struct {

	// dependant field
	DependantField string `json:"DependantField,omitempty"`

	// options
	Options string `json:"Options,omitempty"`

	// rule type
	// Enum: ["GreaterThan","GreaterThanOrZero","LessThan","NotEmpty","NotEmptyOrDisabled","Percent","PositiveNumber","Regexp","Enabled","Disabled","DisabledSimple","Action","IsFilledOnce","IsReadOnlyPassword","ListAtLeastOneSelected","ListAtLeastOneOf","Hidden","Shown"]
	RuleType string `json:"RuleType,omitempty"`
}

// Validate validates this property rule
func (m *PropertyRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRuleType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var propertyRuleTypeRuleTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GreaterThan","GreaterThanOrZero","LessThan","NotEmpty","NotEmptyOrDisabled","Percent","PositiveNumber","Regexp","Enabled","Disabled","DisabledSimple","Action","IsFilledOnce","IsReadOnlyPassword","ListAtLeastOneSelected","ListAtLeastOneOf","Hidden","Shown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		propertyRuleTypeRuleTypePropEnum = append(propertyRuleTypeRuleTypePropEnum, v)
	}
}

const (

	// PropertyRuleRuleTypeGreaterThan captures enum value "GreaterThan"
	PropertyRuleRuleTypeGreaterThan string = "GreaterThan"

	// PropertyRuleRuleTypeGreaterThanOrZero captures enum value "GreaterThanOrZero"
	PropertyRuleRuleTypeGreaterThanOrZero string = "GreaterThanOrZero"

	// PropertyRuleRuleTypeLessThan captures enum value "LessThan"
	PropertyRuleRuleTypeLessThan string = "LessThan"

	// PropertyRuleRuleTypeNotEmpty captures enum value "NotEmpty"
	PropertyRuleRuleTypeNotEmpty string = "NotEmpty"

	// PropertyRuleRuleTypeNotEmptyOrDisabled captures enum value "NotEmptyOrDisabled"
	PropertyRuleRuleTypeNotEmptyOrDisabled string = "NotEmptyOrDisabled"

	// PropertyRuleRuleTypePercent captures enum value "Percent"
	PropertyRuleRuleTypePercent string = "Percent"

	// PropertyRuleRuleTypePositiveNumber captures enum value "PositiveNumber"
	PropertyRuleRuleTypePositiveNumber string = "PositiveNumber"

	// PropertyRuleRuleTypeRegexp captures enum value "Regexp"
	PropertyRuleRuleTypeRegexp string = "Regexp"

	// PropertyRuleRuleTypeEnabled captures enum value "Enabled"
	PropertyRuleRuleTypeEnabled string = "Enabled"

	// PropertyRuleRuleTypeDisabled captures enum value "Disabled"
	PropertyRuleRuleTypeDisabled string = "Disabled"

	// PropertyRuleRuleTypeDisabledSimple captures enum value "DisabledSimple"
	PropertyRuleRuleTypeDisabledSimple string = "DisabledSimple"

	// PropertyRuleRuleTypeAction captures enum value "Action"
	PropertyRuleRuleTypeAction string = "Action"

	// PropertyRuleRuleTypeIsFilledOnce captures enum value "IsFilledOnce"
	PropertyRuleRuleTypeIsFilledOnce string = "IsFilledOnce"

	// PropertyRuleRuleTypeIsReadOnlyPassword captures enum value "IsReadOnlyPassword"
	PropertyRuleRuleTypeIsReadOnlyPassword string = "IsReadOnlyPassword"

	// PropertyRuleRuleTypeListAtLeastOneSelected captures enum value "ListAtLeastOneSelected"
	PropertyRuleRuleTypeListAtLeastOneSelected string = "ListAtLeastOneSelected"

	// PropertyRuleRuleTypeListAtLeastOneOf captures enum value "ListAtLeastOneOf"
	PropertyRuleRuleTypeListAtLeastOneOf string = "ListAtLeastOneOf"

	// PropertyRuleRuleTypeHidden captures enum value "Hidden"
	PropertyRuleRuleTypeHidden string = "Hidden"

	// PropertyRuleRuleTypeShown captures enum value "Shown"
	PropertyRuleRuleTypeShown string = "Shown"
)

// prop value enum
func (m *PropertyRule) validateRuleTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, propertyRuleTypeRuleTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PropertyRule) validateRuleType(formats strfmt.Registry) error {
	if swag.IsZero(m.RuleType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRuleTypeEnum("RuleType", "body", m.RuleType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this property rule based on context it is used
func (m *PropertyRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PropertyRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PropertyRule) UnmarshalBinary(b []byte) error {
	var res PropertyRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
