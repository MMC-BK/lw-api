// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InventoryParametersRequest inventory parameters request
//
// swagger:model InventoryParametersRequest
type InventoryParametersRequest struct {

	// List of stock item ids
	InventoryItemIds []strfmt.UUID `json:"InventoryItemIds"`

	// A list of row numbers for items selected in the my inventory grid.
	// For instance if the first entry in the list is 4, 4; the selection was from the fourth row, to the fourth row.
	SelectedRegions []*TupleInt32Int32 `json:"SelectedRegions"`

	// An internal token used to identify the list of inventory items within a certain view.
	// From this, the inventory item ids can be extracted with the selected regions.
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	Token strfmt.UUID `json:"Token,omitempty"`
}

// Validate validates this inventory parameters request
func (m *InventoryParametersRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInventoryItemIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectedRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryParametersRequest) validateInventoryItemIds(formats strfmt.Registry) error {
	if swag.IsZero(m.InventoryItemIds) { // not required
		return nil
	}

	for i := 0; i < len(m.InventoryItemIds); i++ {

		if err := validate.FormatOf("InventoryItemIds"+"."+strconv.Itoa(i), "body", "uuid", m.InventoryItemIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *InventoryParametersRequest) validateSelectedRegions(formats strfmt.Registry) error {
	if swag.IsZero(m.SelectedRegions) { // not required
		return nil
	}

	for i := 0; i < len(m.SelectedRegions); i++ {
		if swag.IsZero(m.SelectedRegions[i]) { // not required
			continue
		}

		if m.SelectedRegions[i] != nil {
			if err := m.SelectedRegions[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("SelectedRegions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("SelectedRegions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *InventoryParametersRequest) validateToken(formats strfmt.Registry) error {
	if swag.IsZero(m.Token) { // not required
		return nil
	}

	if err := validate.FormatOf("Token", "body", "uuid", m.Token.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this inventory parameters request based on the context it is used
func (m *InventoryParametersRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelectedRegions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryParametersRequest) contextValidateSelectedRegions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SelectedRegions); i++ {

		if m.SelectedRegions[i] != nil {

			if swag.IsZero(m.SelectedRegions[i]) { // not required
				return nil
			}

			if err := m.SelectedRegions[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("SelectedRegions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("SelectedRegions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryParametersRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryParametersRequest) UnmarshalBinary(b []byte) error {
	var res InventoryParametersRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
