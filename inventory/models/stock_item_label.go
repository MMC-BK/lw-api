// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemLabel stock item label
//
// swagger:model StockItemLabel
type StockItemLabel struct {

	// batch inventory Id
	BatchInventoryID int32 `json:"BatchInventoryId,omitempty"`

	// Batch number
	BatchNumber string `json:"BatchNumber,omitempty"`

	// BinRack location
	BinRack string `json:"BinRack,omitempty"`

	// Product SKU
	ItemNumber string `json:"ItemNumber,omitempty"`

	// Item title
	ItemTitle string `json:"ItemTitle,omitempty"`

	// location Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	LocationID strfmt.UUID `json:"LocationId,omitempty"`

	// Item quantity
	Quantity int32 `json:"Quantity,omitempty"`

	// Stock Item Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockItemID strfmt.UUID `json:"StockItemId,omitempty"`

	// Stock Item interger Id
	StockItemIntID int32 `json:"StockItemIntId,omitempty"`
}

// Validate validates this stock item label
func (m *StockItemLabel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemLabel) validateLocationID(formats strfmt.Registry) error {
	if swag.IsZero(m.LocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("LocationId", "body", "uuid", m.LocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemLabel) validateStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockItemId", "body", "uuid", m.StockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stock item label based on context it is used
func (m *StockItemLabel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StockItemLabel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemLabel) UnmarshalBinary(b []byte) error {
	var res StockItemLabel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
