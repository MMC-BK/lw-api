// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Column column
//
// swagger:model Column
type Column struct {

	// column name
	// Enum: ["SKU","Title","VariationGroupName","RetailPrice","PurchasePrice","Tracked","Barcode","Available","MinimumLevel","InOrder","StockLevel","StockValue","Due","BinRack","Category","Image","Weight","DimHeight","DimWidth","DimDepth","CreatedDate","ModifiedDate","SerialNumberScanRequired","BatchNumberScanRequired","BatchType","JIT","ReorderAmount","ReorderDate","AverageConsumption","DefaultSupplier"]
	ColumnName string `json:"ColumnName,omitempty"`

	// display name
	// Read Only: true
	DisplayName string `json:"DisplayName,omitempty"`

	// export name
	// Read Only: true
	ExportName string `json:"ExportName,omitempty"`

	// field
	// Read Only: true
	// Enum: ["Int","Double","String","Boolean","Select","Date","Datetime2"]
	Field string `json:"Field,omitempty"`

	// group
	// Read Only: true
	// Enum: ["General","Stock","Location"]
	Group string `json:"Group,omitempty"`

	// is editable
	IsEditable bool `json:"IsEditable,omitempty"`

	// sort direction
	// Enum: ["None","Descending","Ascending"]
	SortDirection string `json:"SortDirection,omitempty"`

	// width
	Width float64 `json:"Width,omitempty"`
}

// Validate validates this column
func (m *Column) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumnName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortDirection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var columnTypeColumnNamePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SKU","Title","VariationGroupName","RetailPrice","PurchasePrice","Tracked","Barcode","Available","MinimumLevel","InOrder","StockLevel","StockValue","Due","BinRack","Category","Image","Weight","DimHeight","DimWidth","DimDepth","CreatedDate","ModifiedDate","SerialNumberScanRequired","BatchNumberScanRequired","BatchType","JIT","ReorderAmount","ReorderDate","AverageConsumption","DefaultSupplier"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		columnTypeColumnNamePropEnum = append(columnTypeColumnNamePropEnum, v)
	}
}

const (

	// ColumnColumnNameSKU captures enum value "SKU"
	ColumnColumnNameSKU string = "SKU"

	// ColumnColumnNameTitle captures enum value "Title"
	ColumnColumnNameTitle string = "Title"

	// ColumnColumnNameVariationGroupName captures enum value "VariationGroupName"
	ColumnColumnNameVariationGroupName string = "VariationGroupName"

	// ColumnColumnNameRetailPrice captures enum value "RetailPrice"
	ColumnColumnNameRetailPrice string = "RetailPrice"

	// ColumnColumnNamePurchasePrice captures enum value "PurchasePrice"
	ColumnColumnNamePurchasePrice string = "PurchasePrice"

	// ColumnColumnNameTracked captures enum value "Tracked"
	ColumnColumnNameTracked string = "Tracked"

	// ColumnColumnNameBarcode captures enum value "Barcode"
	ColumnColumnNameBarcode string = "Barcode"

	// ColumnColumnNameAvailable captures enum value "Available"
	ColumnColumnNameAvailable string = "Available"

	// ColumnColumnNameMinimumLevel captures enum value "MinimumLevel"
	ColumnColumnNameMinimumLevel string = "MinimumLevel"

	// ColumnColumnNameInOrder captures enum value "InOrder"
	ColumnColumnNameInOrder string = "InOrder"

	// ColumnColumnNameStockLevel captures enum value "StockLevel"
	ColumnColumnNameStockLevel string = "StockLevel"

	// ColumnColumnNameStockValue captures enum value "StockValue"
	ColumnColumnNameStockValue string = "StockValue"

	// ColumnColumnNameDue captures enum value "Due"
	ColumnColumnNameDue string = "Due"

	// ColumnColumnNameBinRack captures enum value "BinRack"
	ColumnColumnNameBinRack string = "BinRack"

	// ColumnColumnNameCategory captures enum value "Category"
	ColumnColumnNameCategory string = "Category"

	// ColumnColumnNameImage captures enum value "Image"
	ColumnColumnNameImage string = "Image"

	// ColumnColumnNameWeight captures enum value "Weight"
	ColumnColumnNameWeight string = "Weight"

	// ColumnColumnNameDimHeight captures enum value "DimHeight"
	ColumnColumnNameDimHeight string = "DimHeight"

	// ColumnColumnNameDimWidth captures enum value "DimWidth"
	ColumnColumnNameDimWidth string = "DimWidth"

	// ColumnColumnNameDimDepth captures enum value "DimDepth"
	ColumnColumnNameDimDepth string = "DimDepth"

	// ColumnColumnNameCreatedDate captures enum value "CreatedDate"
	ColumnColumnNameCreatedDate string = "CreatedDate"

	// ColumnColumnNameModifiedDate captures enum value "ModifiedDate"
	ColumnColumnNameModifiedDate string = "ModifiedDate"

	// ColumnColumnNameSerialNumberScanRequired captures enum value "SerialNumberScanRequired"
	ColumnColumnNameSerialNumberScanRequired string = "SerialNumberScanRequired"

	// ColumnColumnNameBatchNumberScanRequired captures enum value "BatchNumberScanRequired"
	ColumnColumnNameBatchNumberScanRequired string = "BatchNumberScanRequired"

	// ColumnColumnNameBatchType captures enum value "BatchType"
	ColumnColumnNameBatchType string = "BatchType"

	// ColumnColumnNameJIT captures enum value "JIT"
	ColumnColumnNameJIT string = "JIT"

	// ColumnColumnNameReorderAmount captures enum value "ReorderAmount"
	ColumnColumnNameReorderAmount string = "ReorderAmount"

	// ColumnColumnNameReorderDate captures enum value "ReorderDate"
	ColumnColumnNameReorderDate string = "ReorderDate"

	// ColumnColumnNameAverageConsumption captures enum value "AverageConsumption"
	ColumnColumnNameAverageConsumption string = "AverageConsumption"

	// ColumnColumnNameDefaultSupplier captures enum value "DefaultSupplier"
	ColumnColumnNameDefaultSupplier string = "DefaultSupplier"
)

// prop value enum
func (m *Column) validateColumnNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, columnTypeColumnNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Column) validateColumnName(formats strfmt.Registry) error {
	if swag.IsZero(m.ColumnName) { // not required
		return nil
	}

	// value enum
	if err := m.validateColumnNameEnum("ColumnName", "body", m.ColumnName); err != nil {
		return err
	}

	return nil
}

var columnTypeFieldPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Int","Double","String","Boolean","Select","Date","Datetime2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		columnTypeFieldPropEnum = append(columnTypeFieldPropEnum, v)
	}
}

const (

	// ColumnFieldInt captures enum value "Int"
	ColumnFieldInt string = "Int"

	// ColumnFieldDouble captures enum value "Double"
	ColumnFieldDouble string = "Double"

	// ColumnFieldString captures enum value "String"
	ColumnFieldString string = "String"

	// ColumnFieldBoolean captures enum value "Boolean"
	ColumnFieldBoolean string = "Boolean"

	// ColumnFieldSelect captures enum value "Select"
	ColumnFieldSelect string = "Select"

	// ColumnFieldDate captures enum value "Date"
	ColumnFieldDate string = "Date"

	// ColumnFieldDatetime2 captures enum value "Datetime2"
	ColumnFieldDatetime2 string = "Datetime2"
)

// prop value enum
func (m *Column) validateFieldEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, columnTypeFieldPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Column) validateField(formats strfmt.Registry) error {
	if swag.IsZero(m.Field) { // not required
		return nil
	}

	// value enum
	if err := m.validateFieldEnum("Field", "body", m.Field); err != nil {
		return err
	}

	return nil
}

var columnTypeGroupPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["General","Stock","Location"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		columnTypeGroupPropEnum = append(columnTypeGroupPropEnum, v)
	}
}

const (

	// ColumnGroupGeneral captures enum value "General"
	ColumnGroupGeneral string = "General"

	// ColumnGroupStock captures enum value "Stock"
	ColumnGroupStock string = "Stock"

	// ColumnGroupLocation captures enum value "Location"
	ColumnGroupLocation string = "Location"
)

// prop value enum
func (m *Column) validateGroupEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, columnTypeGroupPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Column) validateGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.Group) { // not required
		return nil
	}

	// value enum
	if err := m.validateGroupEnum("Group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

var columnTypeSortDirectionPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Descending","Ascending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		columnTypeSortDirectionPropEnum = append(columnTypeSortDirectionPropEnum, v)
	}
}

const (

	// ColumnSortDirectionNone captures enum value "None"
	ColumnSortDirectionNone string = "None"

	// ColumnSortDirectionDescending captures enum value "Descending"
	ColumnSortDirectionDescending string = "Descending"

	// ColumnSortDirectionAscending captures enum value "Ascending"
	ColumnSortDirectionAscending string = "Ascending"
)

// prop value enum
func (m *Column) validateSortDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, columnTypeSortDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Column) validateSortDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.SortDirection) { // not required
		return nil
	}

	// value enum
	if err := m.validateSortDirectionEnum("SortDirection", "body", m.SortDirection); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this column based on the context it is used
func (m *Column) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisplayName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExportName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateField(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Column) contextValidateDisplayName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "DisplayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *Column) contextValidateExportName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ExportName", "body", m.ExportName); err != nil {
		return err
	}

	return nil
}

func (m *Column) contextValidateField(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Field", "body", m.Field); err != nil {
		return err
	}

	return nil
}

func (m *Column) contextValidateGroup(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Column) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Column) UnmarshalBinary(b []byte) error {
	var res Column
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
