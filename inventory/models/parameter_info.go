// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ParameterInfo parameter info
//
// swagger:model ParameterInfo
type ParameterInfo struct {

	// attributes
	// Read Only: true
	// Enum: ["None","In","Out","Lcid","Retval","Optional","ReservedMask","HasDefault","HasFieldMarshal","Reserved3","Reserved4"]
	Attributes string `json:"Attributes,omitempty"`

	// custom attributes
	// Read Only: true
	CustomAttributes []*CustomAttributeData `json:"CustomAttributes"`

	// default value
	// Read Only: true
	DefaultValue any `json:"DefaultValue,omitempty"`

	// has default value
	// Read Only: true
	HasDefaultValue *bool `json:"HasDefaultValue,omitempty"`

	// is in
	// Read Only: true
	IsIn *bool `json:"IsIn,omitempty"`

	// is lcid
	// Read Only: true
	IsLcid *bool `json:"IsLcid,omitempty"`

	// is optional
	// Read Only: true
	IsOptional *bool `json:"IsOptional,omitempty"`

	// is out
	// Read Only: true
	IsOut *bool `json:"IsOut,omitempty"`

	// is retval
	// Read Only: true
	IsRetval *bool `json:"IsRetval,omitempty"`

	// member
	// Read Only: true
	Member *MemberInfo `json:"Member,omitempty"`

	// metadata token
	// Read Only: true
	MetadataToken int32 `json:"MetadataToken,omitempty"`

	// name
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// parameter type
	// Read Only: true
	ParameterType string `json:"ParameterType,omitempty"`

	// position
	// Read Only: true
	Position int32 `json:"Position,omitempty"`

	// raw default value
	// Read Only: true
	RawDefaultValue any `json:"RawDefaultValue,omitempty"`
}

// Validate validates this parameter info
func (m *ParameterInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var parameterInfoTypeAttributesPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","In","Out","Lcid","Retval","Optional","ReservedMask","HasDefault","HasFieldMarshal","Reserved3","Reserved4"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		parameterInfoTypeAttributesPropEnum = append(parameterInfoTypeAttributesPropEnum, v)
	}
}

const (

	// ParameterInfoAttributesNone captures enum value "None"
	ParameterInfoAttributesNone string = "None"

	// ParameterInfoAttributesIn captures enum value "In"
	ParameterInfoAttributesIn string = "In"

	// ParameterInfoAttributesOut captures enum value "Out"
	ParameterInfoAttributesOut string = "Out"

	// ParameterInfoAttributesLcid captures enum value "Lcid"
	ParameterInfoAttributesLcid string = "Lcid"

	// ParameterInfoAttributesRetval captures enum value "Retval"
	ParameterInfoAttributesRetval string = "Retval"

	// ParameterInfoAttributesOptional captures enum value "Optional"
	ParameterInfoAttributesOptional string = "Optional"

	// ParameterInfoAttributesReservedMask captures enum value "ReservedMask"
	ParameterInfoAttributesReservedMask string = "ReservedMask"

	// ParameterInfoAttributesHasDefault captures enum value "HasDefault"
	ParameterInfoAttributesHasDefault string = "HasDefault"

	// ParameterInfoAttributesHasFieldMarshal captures enum value "HasFieldMarshal"
	ParameterInfoAttributesHasFieldMarshal string = "HasFieldMarshal"

	// ParameterInfoAttributesReserved3 captures enum value "Reserved3"
	ParameterInfoAttributesReserved3 string = "Reserved3"

	// ParameterInfoAttributesReserved4 captures enum value "Reserved4"
	ParameterInfoAttributesReserved4 string = "Reserved4"
)

// prop value enum
func (m *ParameterInfo) validateAttributesEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, parameterInfoTypeAttributesPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ParameterInfo) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	// value enum
	if err := m.validateAttributesEnum("Attributes", "body", m.Attributes); err != nil {
		return err
	}

	return nil
}

func (m *ParameterInfo) validateCustomAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomAttributes); i++ {
		if swag.IsZero(m.CustomAttributes[i]) { // not required
			continue
		}

		if m.CustomAttributes[i] != nil {
			if err := m.CustomAttributes[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("CustomAttributes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("CustomAttributes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ParameterInfo) validateMember(formats strfmt.Registry) error {
	if swag.IsZero(m.Member) { // not required
		return nil
	}

	if m.Member != nil {
		if err := m.Member.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Member")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Member")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this parameter info based on the context it is used
func (m *ParameterInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHasDefaultValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsLcid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsOptional(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsOut(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsRetval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadataToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameterType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterInfo) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Attributes", "body", m.Attributes); err != nil {
		return err
	}

	return nil
}

func (m *ParameterInfo) contextValidateCustomAttributes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "CustomAttributes", "body", m.CustomAttributes); err != nil {
		return err
	}

	for i := 0; i < len(m.CustomAttributes); i++ {

		if m.CustomAttributes[i] != nil {

			if swag.IsZero(m.CustomAttributes[i]) { // not required
				return nil
			}

			if err := m.CustomAttributes[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("CustomAttributes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("CustomAttributes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ParameterInfo) contextValidateHasDefaultValue(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "HasDefaultValue", "body", m.HasDefaultValue); err != nil {
		return err
	}

	return nil
}

func (m *ParameterInfo) contextValidateIsIn(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsIn", "body", m.IsIn); err != nil {
		return err
	}

	return nil
}

func (m *ParameterInfo) contextValidateIsLcid(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsLcid", "body", m.IsLcid); err != nil {
		return err
	}

	return nil
}

func (m *ParameterInfo) contextValidateIsOptional(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsOptional", "body", m.IsOptional); err != nil {
		return err
	}

	return nil
}

func (m *ParameterInfo) contextValidateIsOut(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsOut", "body", m.IsOut); err != nil {
		return err
	}

	return nil
}

func (m *ParameterInfo) contextValidateIsRetval(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsRetval", "body", m.IsRetval); err != nil {
		return err
	}

	return nil
}

func (m *ParameterInfo) contextValidateMember(ctx context.Context, formats strfmt.Registry) error {

	if m.Member != nil {

		if swag.IsZero(m.Member) { // not required
			return nil
		}

		if err := m.Member.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Member")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Member")
			}

			return err
		}
	}

	return nil
}

func (m *ParameterInfo) contextValidateMetadataToken(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "MetadataToken", "body", m.MetadataToken); err != nil {
		return err
	}

	return nil
}

func (m *ParameterInfo) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ParameterInfo) contextValidateParameterType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ParameterType", "body", m.ParameterType); err != nil {
		return err
	}

	return nil
}

func (m *ParameterInfo) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Position", "body", m.Position); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParameterInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParameterInfo) UnmarshalBinary(b []byte) error {
	var res ParameterInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
