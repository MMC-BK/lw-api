// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemComposition stock item composition
//
// swagger:model StockItemComposition
type StockItemComposition struct {

	// dim depth
	DimDepth float64 `json:"DimDepth,omitempty"`

	// dim height
	DimHeight float64 `json:"DimHeight,omitempty"`

	// dim width
	DimWidth float64 `json:"DimWidth,omitempty"`

	// Tracking type of an item
	InventoryTrackingType int32 `json:"InventoryTrackingType,omitempty"`

	// Product title
	ItemTitle string `json:"ItemTitle,omitempty"`

	// Stock item ID of linked product
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	LinkedStockItemID strfmt.UUID `json:"LinkedStockItemId,omitempty"`

	// package group Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PackageGroupID strfmt.UUID `json:"PackageGroupId,omitempty"`

	// Item purchase price
	PurchasePrice float64 `json:"PurchasePrice,omitempty"`

	// Product quantity
	Quantity int32 `json:"Quantity,omitempty"`

	// Product SKU
	SKU string `json:"SKU,omitempty"`

	// Stock Item Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockItemID strfmt.UUID `json:"StockItemId,omitempty"`

	// Stock Item interger Id
	StockItemIntID int32 `json:"StockItemIntId,omitempty"`

	// tax rate
	TaxRate float64 `json:"TaxRate,omitempty"`

	// weight
	Weight float64 `json:"Weight,omitempty"`
}

// Validate validates this stock item composition
func (m *StockItemComposition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinkedStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemComposition) validateLinkedStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.LinkedStockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("LinkedStockItemId", "body", "uuid", m.LinkedStockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemComposition) validatePackageGroupID(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageGroupID) { // not required
		return nil
	}

	if err := validate.FormatOf("PackageGroupId", "body", "uuid", m.PackageGroupID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemComposition) validateStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockItemId", "body", "uuid", m.StockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stock item composition based on context it is used
func (m *StockItemComposition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StockItemComposition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemComposition) UnmarshalBinary(b []byte) error {
	var res StockItemComposition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
