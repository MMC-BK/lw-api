// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetInventoryItemBatchInformationRequest Used to get inventory item batch information
//
// swagger:model GetInventoryItemBatchInformationRequest
type GetInventoryItemBatchInformationRequest struct {

	// Only return warehouse locations that can have orders assigned to them for picking
	AssignableOnly bool `json:"AssignableOnly,omitempty"`

	// Defines whether we should only return available items
	AvailableOnly bool `json:"AvailableOnly,omitempty"`

	// The item id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockItemID strfmt.UUID `json:"StockItemId,omitempty"`

	// The location to get the batch information from
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockLocationID strfmt.UUID `json:"StockLocationId,omitempty"`
}

// Validate validates this get inventory item batch information request
func (m *GetInventoryItemBatchInformationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockLocationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetInventoryItemBatchInformationRequest) validateStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockItemId", "body", "uuid", m.StockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetInventoryItemBatchInformationRequest) validateStockLocationID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockLocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockLocationId", "body", "uuid", m.StockLocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get inventory item batch information request based on context it is used
func (m *GetInventoryItemBatchInformationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetInventoryItemBatchInformationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetInventoryItemBatchInformationRequest) UnmarshalBinary(b []byte) error {
	var res GetInventoryItemBatchInformationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
