// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductIdentifierInformation product identifier information
//
// swagger:model ProductIdentifierInformation
type ProductIdentifierInformation struct {

	// display name
	DisplayName string `json:"DisplayName,omitempty"`

	// scanned at dispatch
	ScannedAtDispatch bool `json:"ScannedAtDispatch,omitempty"`

	// sources
	Sources []string `json:"Sources"`

	// type
	// Enum: ["EAN","MPN","GTIN","UPC","ASIN","ISBN","Google","CustomID","PZN","GCID","ePID","AMZNTRANS","SERIAL","IMEI"]
	Type string `json:"Type,omitempty"`
}

// Validate validates this product identifier information
func (m *ProductIdentifierInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var productIdentifierInformationTypeTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EAN","MPN","GTIN","UPC","ASIN","ISBN","Google","CustomID","PZN","GCID","ePID","AMZNTRANS","SERIAL","IMEI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productIdentifierInformationTypeTypePropEnum = append(productIdentifierInformationTypeTypePropEnum, v)
	}
}

const (

	// ProductIdentifierInformationTypeEAN captures enum value "EAN"
	ProductIdentifierInformationTypeEAN string = "EAN"

	// ProductIdentifierInformationTypeMPN captures enum value "MPN"
	ProductIdentifierInformationTypeMPN string = "MPN"

	// ProductIdentifierInformationTypeGTIN captures enum value "GTIN"
	ProductIdentifierInformationTypeGTIN string = "GTIN"

	// ProductIdentifierInformationTypeUPC captures enum value "UPC"
	ProductIdentifierInformationTypeUPC string = "UPC"

	// ProductIdentifierInformationTypeASIN captures enum value "ASIN"
	ProductIdentifierInformationTypeASIN string = "ASIN"

	// ProductIdentifierInformationTypeISBN captures enum value "ISBN"
	ProductIdentifierInformationTypeISBN string = "ISBN"

	// ProductIdentifierInformationTypeGoogle captures enum value "Google"
	ProductIdentifierInformationTypeGoogle string = "Google"

	// ProductIdentifierInformationTypeCustomID captures enum value "CustomID"
	ProductIdentifierInformationTypeCustomID string = "CustomID"

	// ProductIdentifierInformationTypePZN captures enum value "PZN"
	ProductIdentifierInformationTypePZN string = "PZN"

	// ProductIdentifierInformationTypeGCID captures enum value "GCID"
	ProductIdentifierInformationTypeGCID string = "GCID"

	// ProductIdentifierInformationTypeEPID captures enum value "ePID"
	ProductIdentifierInformationTypeEPID string = "ePID"

	// ProductIdentifierInformationTypeAMZNTRANS captures enum value "AMZNTRANS"
	ProductIdentifierInformationTypeAMZNTRANS string = "AMZNTRANS"

	// ProductIdentifierInformationTypeSERIAL captures enum value "SERIAL"
	ProductIdentifierInformationTypeSERIAL string = "SERIAL"

	// ProductIdentifierInformationTypeIMEI captures enum value "IMEI"
	ProductIdentifierInformationTypeIMEI string = "IMEI"
)

// prop value enum
func (m *ProductIdentifierInformation) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productIdentifierInformationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProductIdentifierInformation) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this product identifier information based on context it is used
func (m *ProductIdentifierInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductIdentifierInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductIdentifierInformation) UnmarshalBinary(b []byte) error {
	var res ProductIdentifierInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
