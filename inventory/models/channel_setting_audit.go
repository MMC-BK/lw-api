// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChannelSettingAudit channel setting audit
//
// swagger:model Channel_Setting_Audit
type ChannelSettingAudit struct {

	// audit date time
	// Format: date-time
	AuditDateTime strfmt.DateTime `json:"AuditDateTime,omitempty"`

	// property name
	PropertyName string `json:"PropertyName,omitempty"`

	// property value is
	PropertyValueIs string `json:"PropertyValueIs,omitempty"`

	// user name
	UserName string `json:"UserName,omitempty"`

	// fk channel Id
	FkChannelID int32 `json:"fkChannelId,omitempty"`

	// pk audit Id
	PkAuditID int32 `json:"pkAuditId,omitempty"`
}

// Validate validates this channel setting audit
func (m *ChannelSettingAudit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelSettingAudit) validateAuditDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("AuditDateTime", "body", "date-time", m.AuditDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this channel setting audit based on context it is used
func (m *ChannelSettingAudit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChannelSettingAudit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelSettingAudit) UnmarshalBinary(b []byte) error {
	var res ChannelSettingAudit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
