// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BatchedAPIResponseDeleteInventoryItemImagesResponse batched API response delete inventory item images response
//
// swagger:model BatchedAPIResponse_DeleteInventoryItemImagesResponse
type BatchedAPIResponseDeleteInventoryItemImagesResponse struct {

	// result status
	// Read Only: true
	// Enum: ["NOTSET","SUCCESSFUL","PARTIALLY_SUCCESSFUL","FAILED"]
	ResultStatus string `json:"ResultStatus,omitempty"`

	// results
	Results []*APIResultResponseDeleteInventoryItemImagesResponse `json:"Results"`

	// total results
	// Read Only: true
	TotalResults int32 `json:"TotalResults,omitempty"`
}

// Validate validates this batched API response delete inventory item images response
func (m *BatchedAPIResponseDeleteInventoryItemImagesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResultStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var batchedApiResponseDeleteInventoryItemImagesResponseTypeResultStatusPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOTSET","SUCCESSFUL","PARTIALLY_SUCCESSFUL","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		batchedApiResponseDeleteInventoryItemImagesResponseTypeResultStatusPropEnum = append(batchedApiResponseDeleteInventoryItemImagesResponseTypeResultStatusPropEnum, v)
	}
}

const (

	// BatchedAPIResponseDeleteInventoryItemImagesResponseResultStatusNOTSET captures enum value "NOTSET"
	BatchedAPIResponseDeleteInventoryItemImagesResponseResultStatusNOTSET string = "NOTSET"

	// BatchedAPIResponseDeleteInventoryItemImagesResponseResultStatusSUCCESSFUL captures enum value "SUCCESSFUL"
	BatchedAPIResponseDeleteInventoryItemImagesResponseResultStatusSUCCESSFUL string = "SUCCESSFUL"

	// BatchedAPIResponseDeleteInventoryItemImagesResponseResultStatusPARTIALLYSUCCESSFUL captures enum value "PARTIALLY_SUCCESSFUL"
	BatchedAPIResponseDeleteInventoryItemImagesResponseResultStatusPARTIALLYSUCCESSFUL string = "PARTIALLY_SUCCESSFUL"

	// BatchedAPIResponseDeleteInventoryItemImagesResponseResultStatusFAILED captures enum value "FAILED"
	BatchedAPIResponseDeleteInventoryItemImagesResponseResultStatusFAILED string = "FAILED"
)

// prop value enum
func (m *BatchedAPIResponseDeleteInventoryItemImagesResponse) validateResultStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, batchedApiResponseDeleteInventoryItemImagesResponseTypeResultStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BatchedAPIResponseDeleteInventoryItemImagesResponse) validateResultStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ResultStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateResultStatusEnum("ResultStatus", "body", m.ResultStatus); err != nil {
		return err
	}

	return nil
}

func (m *BatchedAPIResponseDeleteInventoryItemImagesResponse) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Results" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Results" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this batched API response delete inventory item images response based on the context it is used
func (m *BatchedAPIResponseDeleteInventoryItemImagesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResultStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchedAPIResponseDeleteInventoryItemImagesResponse) contextValidateResultStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ResultStatus", "body", m.ResultStatus); err != nil {
		return err
	}

	return nil
}

func (m *BatchedAPIResponseDeleteInventoryItemImagesResponse) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Results); i++ {

		if m.Results[i] != nil {

			if swag.IsZero(m.Results[i]) { // not required
				return nil
			}

			if err := m.Results[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Results" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Results" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *BatchedAPIResponseDeleteInventoryItemImagesResponse) contextValidateTotalResults(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "TotalResults", "body", m.TotalResults); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BatchedAPIResponseDeleteInventoryItemImagesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BatchedAPIResponseDeleteInventoryItemImagesResponse) UnmarshalBinary(b []byte) error {
	var res BatchedAPIResponseDeleteInventoryItemImagesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
