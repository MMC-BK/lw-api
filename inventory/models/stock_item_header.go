// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemHeader Stock Item header information
//
// swagger:model StockItemHeader
type StockItemHeader struct {

	// Barcode number
	BarcodeNumber string `json:"BarcodeNumber,omitempty"`

	// User must scan batch number when procesing orders
	BatchNumberScanRequired bool `json:"BatchNumberScanRequired,omitempty"`

	// Default category id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	CategoryID strfmt.UUID `json:"CategoryId,omitempty"`

	// Default category name
	CategoryName string `json:"CategoryName,omitempty"`

	// Stock item creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"CreationDate,omitempty"`

	// Item depth
	Depth float64 `json:"Depth,omitempty"`

	// Item height
	Height float64 `json:"Height,omitempty"`

	// Stock item tracking type. 0 = none. 1 = Ordered by Sell by Date. 2 = Ordered by Priority Sequence
	InventoryTrackingType int32 `json:"InventoryTrackingType,omitempty"`

	// Is Variation Parent
	IsVariationParent bool `json:"IsVariationParent,omitempty"`

	// SKU
	ItemNumber string `json:"ItemNumber,omitempty"`

	// Item title
	ItemTitle string `json:"ItemTitle,omitempty"`

	// Item description
	MetaData string `json:"MetaData,omitempty"`

	// Default package group id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PackageGroupID strfmt.UUID `json:"PackageGroupId,omitempty"`

	// Default package group name
	PackageGroupName string `json:"PackageGroupName,omitempty"`

	// Default postal service id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PostalServiceID strfmt.UUID `json:"PostalServiceId,omitempty"`

	// Default postal service name
	PostalServiceName string `json:"PostalServiceName,omitempty"`

	// Default item purchase price
	PurchasePrice float64 `json:"PurchasePrice,omitempty"`

	// Default item retail price
	RetailPrice float64 `json:"RetailPrice,omitempty"`

	// User must scan item serial number when processing ordesr
	SerialNumberScanRequired bool `json:"SerialNumberScanRequired,omitempty"`

	// Stock Item Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockItemID strfmt.UUID `json:"StockItemId,omitempty"`

	// Stock Item interger Id
	StockItemIntID int32 `json:"StockItemIntId,omitempty"`

	// Default item tax rate. Set -1 to use country tax rate
	TaxRate float64 `json:"TaxRate,omitempty"`

	// Item weight
	Weight float64 `json:"Weight,omitempty"`

	// Item width
	Width float64 `json:"Width,omitempty"`

	// Returns true is the stock item is tracked by batch
	// Read Only: true
	IsBatchedStockType *bool `json:"isBatchedStockType,omitempty"`
}

// Validate validates this stock item header
func (m *StockItemHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemHeader) validateCategoryID(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoryID) { // not required
		return nil
	}

	if err := validate.FormatOf("CategoryId", "body", "uuid", m.CategoryID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemHeader) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("CreationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemHeader) validatePackageGroupID(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageGroupID) { // not required
		return nil
	}

	if err := validate.FormatOf("PackageGroupId", "body", "uuid", m.PackageGroupID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemHeader) validatePostalServiceID(formats strfmt.Registry) error {
	if swag.IsZero(m.PostalServiceID) { // not required
		return nil
	}

	if err := validate.FormatOf("PostalServiceId", "body", "uuid", m.PostalServiceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemHeader) validateStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockItemId", "body", "uuid", m.StockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this stock item header based on the context it is used
func (m *StockItemHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIsBatchedStockType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemHeader) contextValidateIsBatchedStockType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isBatchedStockType", "body", m.IsBatchedStockType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StockItemHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemHeader) UnmarshalBinary(b []byte) error {
	var res StockItemHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
