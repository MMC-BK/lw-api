// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemProductIdentifier stock item product identifier
//
// swagger:model StockItemProductIdentifier
type StockItemProductIdentifier struct {

	// modified date
	// Format: date-time
	ModifiedDate strfmt.DateTime `json:"ModifiedDate,omitempty"`

	// modified user name
	ModifiedUserName string `json:"ModifiedUserName,omitempty"`

	// pk Id
	PkID int64 `json:"PkId,omitempty"`

	// site
	Site string `json:"Site,omitempty"`

	// stock item Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockItemID strfmt.UUID `json:"StockItemId,omitempty"`

	// type
	// Enum: ["EAN","MPN","GTIN","UPC","ASIN","ISBN","Google","CustomID","PZN","GCID","ePID","AMZNTRANS","SERIAL","IMEI"]
	Type string `json:"Type,omitempty"`

	// value
	Value string `json:"Value,omitempty"`
}

// Validate validates this stock item product identifier
func (m *StockItemProductIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemProductIdentifier) validateModifiedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ModifiedDate", "body", "date-time", m.ModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemProductIdentifier) validateStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockItemId", "body", "uuid", m.StockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

var stockItemProductIdentifierTypeTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EAN","MPN","GTIN","UPC","ASIN","ISBN","Google","CustomID","PZN","GCID","ePID","AMZNTRANS","SERIAL","IMEI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stockItemProductIdentifierTypeTypePropEnum = append(stockItemProductIdentifierTypeTypePropEnum, v)
	}
}

const (

	// StockItemProductIdentifierTypeEAN captures enum value "EAN"
	StockItemProductIdentifierTypeEAN string = "EAN"

	// StockItemProductIdentifierTypeMPN captures enum value "MPN"
	StockItemProductIdentifierTypeMPN string = "MPN"

	// StockItemProductIdentifierTypeGTIN captures enum value "GTIN"
	StockItemProductIdentifierTypeGTIN string = "GTIN"

	// StockItemProductIdentifierTypeUPC captures enum value "UPC"
	StockItemProductIdentifierTypeUPC string = "UPC"

	// StockItemProductIdentifierTypeASIN captures enum value "ASIN"
	StockItemProductIdentifierTypeASIN string = "ASIN"

	// StockItemProductIdentifierTypeISBN captures enum value "ISBN"
	StockItemProductIdentifierTypeISBN string = "ISBN"

	// StockItemProductIdentifierTypeGoogle captures enum value "Google"
	StockItemProductIdentifierTypeGoogle string = "Google"

	// StockItemProductIdentifierTypeCustomID captures enum value "CustomID"
	StockItemProductIdentifierTypeCustomID string = "CustomID"

	// StockItemProductIdentifierTypePZN captures enum value "PZN"
	StockItemProductIdentifierTypePZN string = "PZN"

	// StockItemProductIdentifierTypeGCID captures enum value "GCID"
	StockItemProductIdentifierTypeGCID string = "GCID"

	// StockItemProductIdentifierTypeEPID captures enum value "ePID"
	StockItemProductIdentifierTypeEPID string = "ePID"

	// StockItemProductIdentifierTypeAMZNTRANS captures enum value "AMZNTRANS"
	StockItemProductIdentifierTypeAMZNTRANS string = "AMZNTRANS"

	// StockItemProductIdentifierTypeSERIAL captures enum value "SERIAL"
	StockItemProductIdentifierTypeSERIAL string = "SERIAL"

	// StockItemProductIdentifierTypeIMEI captures enum value "IMEI"
	StockItemProductIdentifierTypeIMEI string = "IMEI"
)

// prop value enum
func (m *StockItemProductIdentifier) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stockItemProductIdentifierTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StockItemProductIdentifier) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stock item product identifier based on context it is used
func (m *StockItemProductIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StockItemProductIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemProductIdentifier) UnmarshalBinary(b []byte) error {
	var res StockItemProductIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
