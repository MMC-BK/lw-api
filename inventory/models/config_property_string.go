// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigPropertyString config property string
//
// swagger:model ConfigProperty_String
type ConfigPropertyString struct {

	// is changed
	// Read Only: true
	IsChanged *bool `json:"IsChanged,omitempty"`

	// loaded
	// Read Only: true
	Loaded *bool `json:"Loaded,omitempty"`

	// property type
	// Read Only: true
	PropertyType string `json:"PropertyType,omitempty"`

	// property value
	PropertyValue string `json:"PropertyValue,omitempty"`

	// pk property Id
	// Read Only: true
	PkPropertyID int32 `json:"pkPropertyId,omitempty"`
}

// Validate validates this config property string
func (m *ConfigPropertyString) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this config property string based on the context it is used
func (m *ConfigPropertyString) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIsChanged(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoaded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePropertyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePkPropertyID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigPropertyString) contextValidateIsChanged(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsChanged", "body", m.IsChanged); err != nil {
		return err
	}

	return nil
}

func (m *ConfigPropertyString) contextValidateLoaded(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Loaded", "body", m.Loaded); err != nil {
		return err
	}

	return nil
}

func (m *ConfigPropertyString) contextValidatePropertyType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "PropertyType", "body", m.PropertyType); err != nil {
		return err
	}

	return nil
}

func (m *ConfigPropertyString) contextValidatePkPropertyID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "pkPropertyId", "body", m.PkPropertyID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigPropertyString) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigPropertyString) UnmarshalBinary(b []byte) error {
	var res ConfigPropertyString
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
