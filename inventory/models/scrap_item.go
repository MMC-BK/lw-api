// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScrapItem scrap item
//
// swagger:model ScrapItem
type ScrapItem struct {

	// category name
	CategoryName string `json:"CategoryName,omitempty"`

	// created date
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"CreatedDate,omitempty"`

	// Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	ID strfmt.UUID `json:"Id,omitempty"`

	// item number
	ItemNumber string `json:"ItemNumber,omitempty"`

	// item title
	ItemTitle string `json:"ItemTitle,omitempty"`

	// quantity
	Quantity int32 `json:"Quantity,omitempty"`

	// scrap reason
	ScrapReason string `json:"ScrapReason,omitempty"`

	// stock item Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockItemID strfmt.UUID `json:"StockItemId,omitempty"`

	// Stock location Id, nullable as historically this filed has not been set and therefore some entries in the database may not have location against the scrap item.
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockLocationID strfmt.UUID `json:"StockLocationId,omitempty"`

	// total cost
	TotalCost float64 `json:"TotalCost,omitempty"`

	// user name
	UserName string `json:"UserName,omitempty"`
}

// Validate validates this scrap item
func (m *ScrapItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockLocationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScrapItem) validateCreatedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScrapItem) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("Id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScrapItem) validateStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockItemId", "body", "uuid", m.StockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScrapItem) validateStockLocationID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockLocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockLocationId", "body", "uuid", m.StockLocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this scrap item based on context it is used
func (m *ScrapItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScrapItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScrapItem) UnmarshalBinary(b []byte) error {
	var res ScrapItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
