// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CountryRegion country region
//
// swagger:model CountryRegion
type CountryRegion struct {

	// If this region is home region
	IsHomeRegion bool `json:"IsHomeRegion,omitempty"`

	// Region code
	RegionCode string `json:"RegionCode,omitempty"`

	// Region name
	RegionName string `json:"RegionName,omitempty"`

	// replace with
	// Enum: ["None","Name","Code"]
	ReplaceWith string `json:"ReplaceWith,omitempty"`

	// Quantity of tags
	TagsCount int32 `json:"TagsCount,omitempty"`

	// Tax rate
	TaxRate float64 `json:"TaxRate,omitempty"`

	// Country ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkCountryID strfmt.UUID `json:"fkCountryId,omitempty"`

	// Region row ID
	PkRegionRowID int32 `json:"pkRegionRowId,omitempty"`
}

// Validate validates this country region
func (m *CountryRegion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReplaceWith(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkCountryID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var countryRegionTypeReplaceWithPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Name","Code"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		countryRegionTypeReplaceWithPropEnum = append(countryRegionTypeReplaceWithPropEnum, v)
	}
}

const (

	// CountryRegionReplaceWithNone captures enum value "None"
	CountryRegionReplaceWithNone string = "None"

	// CountryRegionReplaceWithName captures enum value "Name"
	CountryRegionReplaceWithName string = "Name"

	// CountryRegionReplaceWithCode captures enum value "Code"
	CountryRegionReplaceWithCode string = "Code"
)

// prop value enum
func (m *CountryRegion) validateReplaceWithEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, countryRegionTypeReplaceWithPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CountryRegion) validateReplaceWith(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplaceWith) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplaceWithEnum("ReplaceWith", "body", m.ReplaceWith); err != nil {
		return err
	}

	return nil
}

func (m *CountryRegion) validateFkCountryID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkCountryID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkCountryId", "body", "uuid", m.FkCountryID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this country region based on context it is used
func (m *CountryRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CountryRegion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CountryRegion) UnmarshalBinary(b []byte) error {
	var res CountryRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
