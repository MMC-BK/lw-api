// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemEbayCompatibility stock item ebay compatibility
//
// swagger:model StockItemEbayCompatibility
type StockItemEbayCompatibility struct {

	// Compatibility notes
	CompatibilityNotes string `json:"CompatibilityNotes,omitempty"`

	// Compatibility culture, one of US, UK, DE, AU, CA, FR, IT, ES
	Culture string `json:"Culture,omitempty"`

	// ebay compitibility type
	// Enum: ["KType","ePID"]
	EbayCompitibilityType string `json:"EbayCompitibilityType,omitempty"`

	// Years to exclude
	ExcludeYears string `json:"ExcludeYears,omitempty"`

	// Compatibility list ID (Optional)
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkCompatibilityListID strfmt.UUID `json:"FkCompatibilityListId,omitempty"`

	// StockItem unique identifier (Optional if SKU is supplied)
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkStockItemID strfmt.UUID `json:"FkStockItemId,omitempty"`

	// Years to include
	IncludeYears string `json:"IncludeYears,omitempty"`

	// Stock item SKU (Will be ignored fkStockItemId is supplied)
	SKU string `json:"SKU,omitempty"`

	// Value
	Value string `json:"Value,omitempty"`
}

// Validate validates this stock item ebay compatibility
func (m *StockItemEbayCompatibility) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEbayCompitibilityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkCompatibilityListID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stockItemEbayCompatibilityTypeEbayCompitibilityTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["KType","ePID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stockItemEbayCompatibilityTypeEbayCompitibilityTypePropEnum = append(stockItemEbayCompatibilityTypeEbayCompitibilityTypePropEnum, v)
	}
}

const (

	// StockItemEbayCompatibilityEbayCompitibilityTypeKType captures enum value "KType"
	StockItemEbayCompatibilityEbayCompitibilityTypeKType string = "KType"

	// StockItemEbayCompatibilityEbayCompitibilityTypeEPID captures enum value "ePID"
	StockItemEbayCompatibilityEbayCompitibilityTypeEPID string = "ePID"
)

// prop value enum
func (m *StockItemEbayCompatibility) validateEbayCompitibilityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stockItemEbayCompatibilityTypeEbayCompitibilityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StockItemEbayCompatibility) validateEbayCompitibilityType(formats strfmt.Registry) error {
	if swag.IsZero(m.EbayCompitibilityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEbayCompitibilityTypeEnum("EbayCompitibilityType", "body", m.EbayCompitibilityType); err != nil {
		return err
	}

	return nil
}

func (m *StockItemEbayCompatibility) validateFkCompatibilityListID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkCompatibilityListID) { // not required
		return nil
	}

	if err := validate.FormatOf("FkCompatibilityListId", "body", "uuid", m.FkCompatibilityListID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemEbayCompatibility) validateFkStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkStockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("FkStockItemId", "body", "uuid", m.FkStockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stock item ebay compatibility based on context it is used
func (m *StockItemEbayCompatibility) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StockItemEbayCompatibility) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemEbayCompatibility) UnmarshalBinary(b []byte) error {
	var res StockItemEbayCompatibility
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
