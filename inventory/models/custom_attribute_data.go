// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomAttributeData custom attribute data
//
// swagger:model CustomAttributeData
type CustomAttributeData struct {

	// attribute type
	// Read Only: true
	AttributeType string `json:"AttributeType,omitempty"`

	// constructor
	// Read Only: true
	Constructor *ConstructorInfo `json:"Constructor,omitempty"`

	// constructor arguments
	// Read Only: true
	ConstructorArguments []*CustomAttributeTypedArgument `json:"ConstructorArguments"`

	// named arguments
	// Read Only: true
	NamedArguments []*CustomAttributeNamedArgument `json:"NamedArguments"`
}

// Validate validates this custom attribute data
func (m *CustomAttributeData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstructor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstructorArguments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamedArguments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomAttributeData) validateConstructor(formats strfmt.Registry) error {
	if swag.IsZero(m.Constructor) { // not required
		return nil
	}

	if m.Constructor != nil {
		if err := m.Constructor.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Constructor")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Constructor")
			}

			return err
		}
	}

	return nil
}

func (m *CustomAttributeData) validateConstructorArguments(formats strfmt.Registry) error {
	if swag.IsZero(m.ConstructorArguments) { // not required
		return nil
	}

	for i := 0; i < len(m.ConstructorArguments); i++ {
		if swag.IsZero(m.ConstructorArguments[i]) { // not required
			continue
		}

		if m.ConstructorArguments[i] != nil {
			if err := m.ConstructorArguments[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ConstructorArguments" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ConstructorArguments" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *CustomAttributeData) validateNamedArguments(formats strfmt.Registry) error {
	if swag.IsZero(m.NamedArguments) { // not required
		return nil
	}

	for i := 0; i < len(m.NamedArguments); i++ {
		if swag.IsZero(m.NamedArguments[i]) { // not required
			continue
		}

		if m.NamedArguments[i] != nil {
			if err := m.NamedArguments[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("NamedArguments" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("NamedArguments" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this custom attribute data based on the context it is used
func (m *CustomAttributeData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConstructor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConstructorArguments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamedArguments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomAttributeData) contextValidateAttributeType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "AttributeType", "body", m.AttributeType); err != nil {
		return err
	}

	return nil
}

func (m *CustomAttributeData) contextValidateConstructor(ctx context.Context, formats strfmt.Registry) error {

	if m.Constructor != nil {

		if swag.IsZero(m.Constructor) { // not required
			return nil
		}

		if err := m.Constructor.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Constructor")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Constructor")
			}

			return err
		}
	}

	return nil
}

func (m *CustomAttributeData) contextValidateConstructorArguments(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ConstructorArguments", "body", m.ConstructorArguments); err != nil {
		return err
	}

	for i := 0; i < len(m.ConstructorArguments); i++ {

		if m.ConstructorArguments[i] != nil {

			if swag.IsZero(m.ConstructorArguments[i]) { // not required
				return nil
			}

			if err := m.ConstructorArguments[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ConstructorArguments" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ConstructorArguments" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *CustomAttributeData) contextValidateNamedArguments(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "NamedArguments", "body", m.NamedArguments); err != nil {
		return err
	}

	for i := 0; i < len(m.NamedArguments); i++ {

		if m.NamedArguments[i] != nil {

			if swag.IsZero(m.NamedArguments[i]) { // not required
				return nil
			}

			if err := m.NamedArguments[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("NamedArguments" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("NamedArguments" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomAttributeData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomAttributeData) UnmarshalBinary(b []byte) error {
	var res CustomAttributeData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
