// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemBatchAudit stock item batch audit
//
// swagger:model StockItemBatchAudit
type StockItemBatchAudit struct {

	// batch Id
	// Read Only: true
	BatchID int32 `json:"BatchId,omitempty"`

	// batch inventory Id
	// Read Only: true
	BatchInventoryID int32 `json:"BatchInventoryId,omitempty"`

	// batch number
	// Read Only: true
	BatchNumber string `json:"BatchNumber,omitempty"`

	// bin rack
	// Read Only: true
	BinRack string `json:"BinRack,omitempty"`

	// change date
	// Read Only: true
	// Format: date-time
	ChangeDate strfmt.DateTime `json:"ChangeDate,omitempty"`

	// change note
	// Read Only: true
	ChangeNote string `json:"ChangeNote,omitempty"`

	// location
	// Read Only: true
	Location string `json:"Location,omitempty"`

	// order Id
	// Read Only: true
	OrderID int32 `json:"OrderId,omitempty"`

	// quantity delta
	// Read Only: true
	QuantityDelta int32 `json:"QuantityDelta,omitempty"`

	// stock value delta
	// Read Only: true
	StockValueDelta float64 `json:"StockValueDelta,omitempty"`

	// username
	// Read Only: true
	Username string `json:"Username,omitempty"`

	// fk job Id
	// Read Only: true
	FkJobID int32 `json:"fkJobId,omitempty"`
}

// Validate validates this stock item batch audit
func (m *StockItemBatchAudit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChangeDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemBatchAudit) validateChangeDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ChangeDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ChangeDate", "body", "date-time", m.ChangeDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this stock item batch audit based on the context it is used
func (m *StockItemBatchAudit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatchID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBatchInventoryID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBatchNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBinRack(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChangeDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChangeNote(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuantityDelta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStockValueDelta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsername(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFkJobID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemBatchAudit) contextValidateBatchID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "BatchId", "body", m.BatchID); err != nil {
		return err
	}

	return nil
}

func (m *StockItemBatchAudit) contextValidateBatchInventoryID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "BatchInventoryId", "body", m.BatchInventoryID); err != nil {
		return err
	}

	return nil
}

func (m *StockItemBatchAudit) contextValidateBatchNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "BatchNumber", "body", m.BatchNumber); err != nil {
		return err
	}

	return nil
}

func (m *StockItemBatchAudit) contextValidateBinRack(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "BinRack", "body", m.BinRack); err != nil {
		return err
	}

	return nil
}

func (m *StockItemBatchAudit) contextValidateChangeDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ChangeDate", "body", m.ChangeDate); err != nil {
		return err
	}

	return nil
}

func (m *StockItemBatchAudit) contextValidateChangeNote(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ChangeNote", "body", m.ChangeNote); err != nil {
		return err
	}

	return nil
}

func (m *StockItemBatchAudit) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Location", "body", m.Location); err != nil {
		return err
	}

	return nil
}

func (m *StockItemBatchAudit) contextValidateOrderID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "OrderId", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *StockItemBatchAudit) contextValidateQuantityDelta(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "QuantityDelta", "body", m.QuantityDelta); err != nil {
		return err
	}

	return nil
}

func (m *StockItemBatchAudit) contextValidateStockValueDelta(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "StockValueDelta", "body", m.StockValueDelta); err != nil {
		return err
	}

	return nil
}

func (m *StockItemBatchAudit) contextValidateUsername(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

func (m *StockItemBatchAudit) contextValidateFkJobID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "fkJobId", "body", m.FkJobID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StockItemBatchAudit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemBatchAudit) UnmarshalBinary(b []byte) error {
	var res StockItemBatchAudit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
