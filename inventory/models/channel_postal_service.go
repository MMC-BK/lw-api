// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChannelPostalService channel postal service
//
// swagger:model ChannelPostalService
type ChannelPostalService struct {

	// friendly name
	FriendlyName string `json:"FriendlyName,omitempty"`

	// is changed
	// Read Only: true
	IsChanged *bool `json:"IsChanged,omitempty"`

	// site
	Site string `json:"Site,omitempty"`

	// tag
	Tag string `json:"Tag,omitempty"`

	// fk channel Id
	FkChannelID int32 `json:"fkChannelId,omitempty"`

	// pk row Id
	PkRowID int32 `json:"pkRowId,omitempty"`
}

// Validate validates this channel postal service
func (m *ChannelPostalService) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this channel postal service based on the context it is used
func (m *ChannelPostalService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIsChanged(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelPostalService) contextValidateIsChanged(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsChanged", "body", m.IsChanged); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChannelPostalService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelPostalService) UnmarshalBinary(b []byte) error {
	var res ChannelPostalService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
