// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InventoryDuplicateInventoryItemRequest inventory duplicate inventory item request
//
// swagger:model Inventory_DuplicateInventoryItemRequest
type InventoryDuplicateInventoryItemRequest struct {

	// Set to True to copy images from source stock item
	CopyImages bool `json:"copyImages,omitempty"`

	// New StockItem
	InventoryItem *StockItem `json:"inventoryItem,omitempty"`

	// Source StockItem
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	SourceItemID strfmt.UUID `json:"sourceItemId,omitempty"`
}

// Validate validates this inventory duplicate inventory item request
func (m *InventoryDuplicateInventoryItemRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInventoryItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryDuplicateInventoryItemRequest) validateInventoryItem(formats strfmt.Registry) error {
	if swag.IsZero(m.InventoryItem) { // not required
		return nil
	}

	if m.InventoryItem != nil {
		if err := m.InventoryItem.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("inventoryItem")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("inventoryItem")
			}

			return err
		}
	}

	return nil
}

func (m *InventoryDuplicateInventoryItemRequest) validateSourceItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("sourceItemId", "body", "uuid", m.SourceItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this inventory duplicate inventory item request based on the context it is used
func (m *InventoryDuplicateInventoryItemRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInventoryItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryDuplicateInventoryItemRequest) contextValidateInventoryItem(ctx context.Context, formats strfmt.Registry) error {

	if m.InventoryItem != nil {

		if swag.IsZero(m.InventoryItem) { // not required
			return nil
		}

		if err := m.InventoryItem.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("inventoryItem")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("inventoryItem")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryDuplicateInventoryItemRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryDuplicateInventoryItemRequest) UnmarshalBinary(b []byte) error {
	var res InventoryDuplicateInventoryItemRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
