// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemChannelSKUWithLocation stock item channel s k u with location
//
// swagger:model StockItemChannelSKUWithLocation
type StockItemChannelSKUWithLocation struct {

	// End listing when stock level
	EndWhenStock int32 `json:"EndWhenStock,omitempty"`

	// Ignored on a sync
	IgnoreSync bool `json:"IgnoreSync,omitempty"`

	// Last update date and time
	// Format: date-time
	LastUpdate strfmt.DateTime `json:"LastUpdate,omitempty"`

	// Currently listed quantity
	ListedQuantity int32 `json:"ListedQuantity,omitempty"`

	// Location ID
	LocationID int32 `json:"LocationId,omitempty"`

	// Location name
	LocationName string `json:"LocationName,omitempty"`

	// Maximum listed quantity
	MaxListedQuantity int32 `json:"MaxListedQuantity,omitempty"`

	// How many retries
	RetryCount int32 `json:"RetryCount,omitempty"`

	// Stock Item Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockItemID strfmt.UUID `json:"StockItemId,omitempty"`

	// Stock Item interger Id
	StockItemIntID int32 `json:"StockItemIntId,omitempty"`

	// Stock percantage
	StockPercentage float64 `json:"StockPercentage,omitempty"`

	// Quantity submitted to the channel
	SubmittedQuantity int32 `json:"SubmittedQuantity,omitempty"`

	// Current update status
	UpdateStatus string `json:"UpdateStatus,omitempty"`

	// Record row ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkRowID strfmt.UUID `json:"fkRowId,omitempty"`
}

// Validate validates this stock item channel s k u with location
func (m *StockItemChannelSKUWithLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkRowID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemChannelSKUWithLocation) validateLastUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdate) { // not required
		return nil
	}

	if err := validate.FormatOf("LastUpdate", "body", "date-time", m.LastUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemChannelSKUWithLocation) validateStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockItemId", "body", "uuid", m.StockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemChannelSKUWithLocation) validateFkRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkRowId", "body", "uuid", m.FkRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stock item channel s k u with location based on context it is used
func (m *StockItemChannelSKUWithLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StockItemChannelSKUWithLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemChannelSKUWithLocation) UnmarshalBinary(b []byte) error {
	var res StockItemChannelSKUWithLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
