// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChannelMappingUpdateInfo channel mapping update info
//
// swagger:model ChannelMappingUpdateInfo
type ChannelMappingUpdateInfo struct {

	// Channel reference id. Not updated if not provided.
	ChannelReferenceID string `json:"ChannelReferenceId,omitempty"`

	// End listing when stock level. Always updated to the value from the request.
	EndWhenStock int32 `json:"EndWhenStock,omitempty"`

	// The unique id to identify the channel mapping
	// Example: 00000000-0000-0000-0000-000000000000
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"Id"`

	// Ignore sync. Always updated to the value from the request.
	IgnoreSync bool `json:"IgnoreSync,omitempty"`

	// Maximum listed quantity. Always updated to the value from the request.
	MaxListedQuantity int32 `json:"MaxListedQuantity,omitempty"`

	// Stock percentage. Always updated to the value from the request.
	StockPercentage float64 `json:"StockPercentage,omitempty"`
}

// Validate validates this channel mapping update info
func (m *ChannelMappingUpdateInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelMappingUpdateInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("Id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("Id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this channel mapping update info based on context it is used
func (m *ChannelMappingUpdateInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChannelMappingUpdateInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelMappingUpdateInfo) UnmarshalBinary(b []byte) error {
	var res ChannelMappingUpdateInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
