// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Country country
//
// swagger:model Country
type Country struct {

	// Address format
	AddressFormat string `json:"AddressFormat,omitempty"`

	// Continent
	Continent string `json:"Continent,omitempty"`

	// Country code
	CountryCode string `json:"CountryCode,omitempty"`

	// Country ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	CountryID strfmt.UUID `json:"CountryId,omitempty"`

	// Country name
	CountryName string `json:"CountryName,omitempty"`

	// Currency
	Currency string `json:"Currency,omitempty"`

	// If customs required
	CustomsRequired bool `json:"CustomsRequired,omitempty"`

	// Country region
	Regions []*CountryRegion `json:"Regions"`

	// Count of regions
	RegionsCount int32 `json:"RegionsCount,omitempty"`

	// Tax rate (null - will use system default tax rate)
	TaxRate float64 `json:"TaxRate,omitempty"`
}

// Validate validates this country
func (m *Country) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Country) validateCountryID(formats strfmt.Registry) error {
	if swag.IsZero(m.CountryID) { // not required
		return nil
	}

	if err := validate.FormatOf("CountryId", "body", "uuid", m.CountryID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Country) validateRegions(formats strfmt.Registry) error {
	if swag.IsZero(m.Regions) { // not required
		return nil
	}

	for i := 0; i < len(m.Regions); i++ {
		if swag.IsZero(m.Regions[i]) { // not required
			continue
		}

		if m.Regions[i] != nil {
			if err := m.Regions[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Regions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Regions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this country based on the context it is used
func (m *Country) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Country) contextValidateRegions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Regions); i++ {

		if m.Regions[i] != nil {

			if swag.IsZero(m.Regions[i]) { // not required
				return nil
			}

			if err := m.Regions[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Regions" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Regions" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Country) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Country) UnmarshalBinary(b []byte) error {
	var res Country
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
