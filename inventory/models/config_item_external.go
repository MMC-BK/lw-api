// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigItemExternal config item external
//
// swagger:model ConfigItemExternal
type ConfigItemExternal struct {

	// config item Id
	ConfigItemID string `json:"ConfigItemId,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// group name
	GroupName string `json:"GroupName,omitempty"`

	// hides header attribute
	HidesHeaderAttribute bool `json:"HidesHeaderAttribute,omitempty"`

	// list values
	ListValues []*ConfigItemListItem `json:"ListValues"`

	// must be specified
	MustBeSpecified bool `json:"MustBeSpecified,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// read only
	ReadOnly bool `json:"ReadOnly,omitempty"`

	// reg ex error
	RegExError string `json:"RegExError,omitempty"`

	// reg ex validation
	RegExValidation string `json:"RegExValidation,omitempty"`

	// selected value
	SelectedValue string `json:"SelectedValue,omitempty"`

	// sort order
	SortOrder int32 `json:"SortOrder,omitempty"`

	// value type
	// Enum: ["STRING","INT","DOUBLE","BOOLEAN","PASSWORD","LIST","URL","BUTTON"]
	ValueType string `json:"ValueType,omitempty"`
}

// Validate validates this config item external
func (m *ConfigItemExternal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateListValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigItemExternal) validateListValues(formats strfmt.Registry) error {
	if swag.IsZero(m.ListValues) { // not required
		return nil
	}

	for i := 0; i < len(m.ListValues); i++ {
		if swag.IsZero(m.ListValues[i]) { // not required
			continue
		}

		if m.ListValues[i] != nil {
			if err := m.ListValues[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ListValues" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ListValues" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

var configItemExternalTypeValueTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STRING","INT","DOUBLE","BOOLEAN","PASSWORD","LIST","URL","BUTTON"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configItemExternalTypeValueTypePropEnum = append(configItemExternalTypeValueTypePropEnum, v)
	}
}

const (

	// ConfigItemExternalValueTypeSTRING captures enum value "STRING"
	ConfigItemExternalValueTypeSTRING string = "STRING"

	// ConfigItemExternalValueTypeINT captures enum value "INT"
	ConfigItemExternalValueTypeINT string = "INT"

	// ConfigItemExternalValueTypeDOUBLE captures enum value "DOUBLE"
	ConfigItemExternalValueTypeDOUBLE string = "DOUBLE"

	// ConfigItemExternalValueTypeBOOLEAN captures enum value "BOOLEAN"
	ConfigItemExternalValueTypeBOOLEAN string = "BOOLEAN"

	// ConfigItemExternalValueTypePASSWORD captures enum value "PASSWORD"
	ConfigItemExternalValueTypePASSWORD string = "PASSWORD"

	// ConfigItemExternalValueTypeLIST captures enum value "LIST"
	ConfigItemExternalValueTypeLIST string = "LIST"

	// ConfigItemExternalValueTypeURL captures enum value "URL"
	ConfigItemExternalValueTypeURL string = "URL"

	// ConfigItemExternalValueTypeBUTTON captures enum value "BUTTON"
	ConfigItemExternalValueTypeBUTTON string = "BUTTON"
)

// prop value enum
func (m *ConfigItemExternal) validateValueTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, configItemExternalTypeValueTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConfigItemExternal) validateValueType(formats strfmt.Registry) error {
	if swag.IsZero(m.ValueType) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueTypeEnum("ValueType", "body", m.ValueType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this config item external based on the context it is used
func (m *ConfigItemExternal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateListValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigItemExternal) contextValidateListValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ListValues); i++ {

		if m.ListValues[i] != nil {

			if swag.IsZero(m.ListValues[i]) { // not required
				return nil
			}

			if err := m.ListValues[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ListValues" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ListValues" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigItemExternal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigItemExternal) UnmarshalBinary(b []byte) error {
	var res ConfigItemExternal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
