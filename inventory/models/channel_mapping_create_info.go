// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChannelMappingCreateInfo channel mapping create info
//
// swagger:model ChannelMappingCreateInfo
type ChannelMappingCreateInfo struct {

	// Channel reference ID
	ChannelReferenceID string `json:"ChannelReferenceId,omitempty"`

	// The SKU as exists on the channel
	// Required: true
	ChannelSKU *string `json:"ChannelSKU"`

	// End listing when stock level
	EndWhenStock int32 `json:"EndWhenStock,omitempty"`

	// RowId of channel SKU, will be created if not in the request
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	ID strfmt.UUID `json:"Id,omitempty"`

	// Ignore sync, defaults to false
	IgnoreSync bool `json:"IgnoreSync,omitempty"`

	// Maximum listed quantity
	MaxListedQuantity int32 `json:"MaxListedQuantity,omitempty"`

	// ChannelName/Source (e.g. EBAY)
	// Required: true
	Source *string `json:"Source"`

	// The stock item id
	// Example: 00000000-0000-0000-0000-000000000000
	// Required: true
	// Format: uuid
	StockItemID *strfmt.UUID `json:"StockItemId"`

	// Stock percentage
	StockPercentage float64 `json:"StockPercentage,omitempty"`

	// Region code
	// Required: true
	SubSource *string `json:"SubSource"`
}

// Validate validates this channel mapping create info
func (m *ChannelMappingCreateInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelSKU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelMappingCreateInfo) validateChannelSKU(formats strfmt.Registry) error {

	if err := validate.Required("ChannelSKU", "body", m.ChannelSKU); err != nil {
		return err
	}

	return nil
}

func (m *ChannelMappingCreateInfo) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("Id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ChannelMappingCreateInfo) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("Source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *ChannelMappingCreateInfo) validateStockItemID(formats strfmt.Registry) error {

	if err := validate.Required("StockItemId", "body", m.StockItemID); err != nil {
		return err
	}

	if err := validate.FormatOf("StockItemId", "body", "uuid", m.StockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ChannelMappingCreateInfo) validateSubSource(formats strfmt.Registry) error {

	if err := validate.Required("SubSource", "body", m.SubSource); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this channel mapping create info based on context it is used
func (m *ChannelMappingCreateInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChannelMappingCreateInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelMappingCreateInfo) UnmarshalBinary(b []byte) error {
	var res ChannelMappingCreateInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
