// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetScannableProductIdentifiersByOrderIdsResponse get scannable product identifiers by order ids response
//
// swagger:model GetScannableProductIdentifiersByOrderIdsResponse
type GetScannableProductIdentifiersByOrderIdsResponse struct {

	// scannable product identifiers for stock items by order Id
	ScannableProductIdentifiersForStockItemsByOrderID map[string]map[string][]ProductIdentifierInformation `json:"ScannableProductIdentifiersForStockItemsByOrderId,omitempty"`
}

// Validate validates this get scannable product identifiers by order ids response
func (m *GetScannableProductIdentifiersByOrderIdsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScannableProductIdentifiersForStockItemsByOrderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetScannableProductIdentifiersByOrderIdsResponse) validateScannableProductIdentifiersForStockItemsByOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.ScannableProductIdentifiersForStockItemsByOrderID) { // not required
		return nil
	}

	for k := range m.ScannableProductIdentifiersForStockItemsByOrderID {

		for kk := range m.ScannableProductIdentifiersForStockItemsByOrderID[k] {

			if err := validate.Required("ScannableProductIdentifiersForStockItemsByOrderId"+"."+k+"."+kk, "body", m.ScannableProductIdentifiersForStockItemsByOrderID[k][kk]); err != nil {
				return err
			}

			for i := 0; i < len(m.ScannableProductIdentifiersForStockItemsByOrderID[k][kk]); i++ {

				if err := m.ScannableProductIdentifiersForStockItemsByOrderID[k][kk][i].Validate(formats); err != nil {
					ve := new(errors.Validation)
					if stderrors.As(err, &ve) {
						return ve.ValidateName("ScannableProductIdentifiersForStockItemsByOrderId" + "." + k + "." + kk + "." + strconv.Itoa(i))
					}
					ce := new(errors.CompositeError)
					if stderrors.As(err, &ce) {
						return ce.ValidateName("ScannableProductIdentifiersForStockItemsByOrderId" + "." + k + "." + kk + "." + strconv.Itoa(i))
					}

					return err
				}

			}

		}

	}

	return nil
}

// ContextValidate validate this get scannable product identifiers by order ids response based on the context it is used
func (m *GetScannableProductIdentifiersByOrderIdsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScannableProductIdentifiersForStockItemsByOrderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetScannableProductIdentifiersByOrderIdsResponse) contextValidateScannableProductIdentifiersForStockItemsByOrderID(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.ScannableProductIdentifiersForStockItemsByOrderID {

		for kk := range m.ScannableProductIdentifiersForStockItemsByOrderID[k] {

			for i := 0; i < len(m.ScannableProductIdentifiersForStockItemsByOrderID[k][kk]); i++ {

				if swag.IsZero(m.ScannableProductIdentifiersForStockItemsByOrderID[k][kk][i]) { // not required
					return nil
				}

				if err := m.ScannableProductIdentifiersForStockItemsByOrderID[k][kk][i].ContextValidate(ctx, formats); err != nil {
					ve := new(errors.Validation)
					if stderrors.As(err, &ve) {
						return ve.ValidateName("ScannableProductIdentifiersForStockItemsByOrderId" + "." + k + "." + kk + "." + strconv.Itoa(i))
					}
					ce := new(errors.CompositeError)
					if stderrors.As(err, &ce) {
						return ce.ValidateName("ScannableProductIdentifiersForStockItemsByOrderId" + "." + k + "." + kk + "." + strconv.Itoa(i))
					}

					return err
				}

			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetScannableProductIdentifiersByOrderIdsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetScannableProductIdentifiersByOrderIdsResponse) UnmarshalBinary(b []byte) error {
	var res GetScannableProductIdentifiersByOrderIdsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
