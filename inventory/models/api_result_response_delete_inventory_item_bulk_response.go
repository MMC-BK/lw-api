// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIResultResponseDeleteInventoryItemBulkResponse API result response delete inventory item bulk response
//
// swagger:model APIResultResponse_DeleteInventoryItemBulkResponse
type APIResultResponseDeleteInventoryItemBulkResponse struct {

	// message
	Message string `json:"Message,omitempty"`

	// result
	Result *DeleteInventoryItemBulkResponse `json:"Result,omitempty"`

	// result status
	// Enum: ["NOTSET","SUCCESSFUL","PARTIALLY_SUCCESSFUL","FAILED"]
	ResultStatus string `json:"ResultStatus,omitempty"`
}

// Validate validates this API result response delete inventory item bulk response
func (m *APIResultResponseDeleteInventoryItemBulkResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIResultResponseDeleteInventoryItemBulkResponse) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Result")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Result")
			}

			return err
		}
	}

	return nil
}

var apiResultResponseDeleteInventoryItemBulkResponseTypeResultStatusPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOTSET","SUCCESSFUL","PARTIALLY_SUCCESSFUL","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiResultResponseDeleteInventoryItemBulkResponseTypeResultStatusPropEnum = append(apiResultResponseDeleteInventoryItemBulkResponseTypeResultStatusPropEnum, v)
	}
}

const (

	// APIResultResponseDeleteInventoryItemBulkResponseResultStatusNOTSET captures enum value "NOTSET"
	APIResultResponseDeleteInventoryItemBulkResponseResultStatusNOTSET string = "NOTSET"

	// APIResultResponseDeleteInventoryItemBulkResponseResultStatusSUCCESSFUL captures enum value "SUCCESSFUL"
	APIResultResponseDeleteInventoryItemBulkResponseResultStatusSUCCESSFUL string = "SUCCESSFUL"

	// APIResultResponseDeleteInventoryItemBulkResponseResultStatusPARTIALLYSUCCESSFUL captures enum value "PARTIALLY_SUCCESSFUL"
	APIResultResponseDeleteInventoryItemBulkResponseResultStatusPARTIALLYSUCCESSFUL string = "PARTIALLY_SUCCESSFUL"

	// APIResultResponseDeleteInventoryItemBulkResponseResultStatusFAILED captures enum value "FAILED"
	APIResultResponseDeleteInventoryItemBulkResponseResultStatusFAILED string = "FAILED"
)

// prop value enum
func (m *APIResultResponseDeleteInventoryItemBulkResponse) validateResultStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiResultResponseDeleteInventoryItemBulkResponseTypeResultStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIResultResponseDeleteInventoryItemBulkResponse) validateResultStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ResultStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateResultStatusEnum("ResultStatus", "body", m.ResultStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this API result response delete inventory item bulk response based on the context it is used
func (m *APIResultResponseDeleteInventoryItemBulkResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIResultResponseDeleteInventoryItemBulkResponse) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if m.Result != nil {

		if swag.IsZero(m.Result) { // not required
			return nil
		}

		if err := m.Result.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Result")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Result")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIResultResponseDeleteInventoryItemBulkResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIResultResponseDeleteInventoryItemBulkResponse) UnmarshalBinary(b []byte) error {
	var res APIResultResponseDeleteInventoryItemBulkResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
