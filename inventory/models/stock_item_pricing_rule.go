// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemPricingRule stock item pricing rule
//
// swagger:model StockItemPricingRule
type StockItemPricingRule struct {

	// Lower level
	LowerBound int32 `json:"LowerBound,omitempty"`

	// Type
	Type string `json:"Type,omitempty"`

	// Value/Price level
	Value float64 `json:"Value,omitempty"`

	// Stock pricing ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkStockPricingID strfmt.UUID `json:"fkStockPricingId,omitempty"`

	// Record row ID (optional)
	PkRowID int32 `json:"pkRowId,omitempty"`
}

// Validate validates this stock item pricing rule
func (m *StockItemPricingRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFkStockPricingID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemPricingRule) validateFkStockPricingID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkStockPricingID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkStockPricingId", "body", "uuid", m.FkStockPricingID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stock item pricing rule based on context it is used
func (m *StockItemPricingRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StockItemPricingRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemPricingRule) UnmarshalBinary(b []byte) error {
	var res StockItemPricingRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
