// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MethodInfo method info
//
// swagger:model MethodInfo
type MethodInfo struct {

	// attributes
	// Read Only: true
	// Enum: ["MemberAccessMask","PrivateScope","Private","FamANDAssem","Assembly","Family","FamORAssem","Public","Static","Final","Virtual","HideBySig","CheckAccessOnOverride","VtableLayoutMask","ReuseSlot","NewSlot","Abstract","SpecialName","PinvokeImpl","UnmanagedExport","RTSpecialName","ReservedMask","HasSecurity","RequireSecObject"]
	Attributes string `json:"Attributes,omitempty"`

	// calling convention
	// Read Only: true
	// Enum: ["Standard","VarArgs","Any","HasThis","ExplicitThis"]
	CallingConvention string `json:"CallingConvention,omitempty"`

	// contains generic parameters
	// Read Only: true
	ContainsGenericParameters *bool `json:"ContainsGenericParameters,omitempty"`

	// custom attributes
	// Read Only: true
	CustomAttributes []*CustomAttributeData `json:"CustomAttributes"`

	// declaring type
	// Read Only: true
	DeclaringType string `json:"DeclaringType,omitempty"`

	// is abstract
	// Read Only: true
	IsAbstract *bool `json:"IsAbstract,omitempty"`

	// is assembly
	// Read Only: true
	IsAssembly *bool `json:"IsAssembly,omitempty"`

	// is constructor
	// Read Only: true
	IsConstructor *bool `json:"IsConstructor,omitempty"`

	// is family
	// Read Only: true
	IsFamily *bool `json:"IsFamily,omitempty"`

	// is family and assembly
	// Read Only: true
	IsFamilyAndAssembly *bool `json:"IsFamilyAndAssembly,omitempty"`

	// is family or assembly
	// Read Only: true
	IsFamilyOrAssembly *bool `json:"IsFamilyOrAssembly,omitempty"`

	// is final
	// Read Only: true
	IsFinal *bool `json:"IsFinal,omitempty"`

	// is generic method
	// Read Only: true
	IsGenericMethod *bool `json:"IsGenericMethod,omitempty"`

	// is generic method definition
	// Read Only: true
	IsGenericMethodDefinition *bool `json:"IsGenericMethodDefinition,omitempty"`

	// is hide by sig
	// Read Only: true
	IsHideBySig *bool `json:"IsHideBySig,omitempty"`

	// is private
	// Read Only: true
	IsPrivate *bool `json:"IsPrivate,omitempty"`

	// is public
	// Read Only: true
	IsPublic *bool `json:"IsPublic,omitempty"`

	// is security critical
	// Read Only: true
	IsSecurityCritical *bool `json:"IsSecurityCritical,omitempty"`

	// is security safe critical
	// Read Only: true
	IsSecuritySafeCritical *bool `json:"IsSecuritySafeCritical,omitempty"`

	// is security transparent
	// Read Only: true
	IsSecurityTransparent *bool `json:"IsSecurityTransparent,omitempty"`

	// is special name
	// Read Only: true
	IsSpecialName *bool `json:"IsSpecialName,omitempty"`

	// is static
	// Read Only: true
	IsStatic *bool `json:"IsStatic,omitempty"`

	// is virtual
	// Read Only: true
	IsVirtual *bool `json:"IsVirtual,omitempty"`

	// member type
	// Read Only: true
	// Enum: ["Constructor","Event","Field","Method","Property","TypeInfo","Custom","NestedType","All"]
	MemberType string `json:"MemberType,omitempty"`

	// metadata token
	// Read Only: true
	MetadataToken int32 `json:"MetadataToken,omitempty"`

	// method handle
	// Read Only: true
	MethodHandle any `json:"MethodHandle,omitempty"`

	// method implementation flags
	// Read Only: true
	// Enum: ["CodeTypeMask","IL","Native","OPTIL","Runtime","ManagedMask","Unmanaged","Managed","ForwardRef","PreserveSig","InternalCall","Synchronized","NoInlining","AggressiveInlining","NoOptimization","SecurityMitigations","MaxMethodImplVal"]
	MethodImplementationFlags string `json:"MethodImplementationFlags,omitempty"`

	// module
	// Read Only: true
	Module any `json:"Module,omitempty"`

	// name
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// reflected type
	// Read Only: true
	ReflectedType string `json:"ReflectedType,omitempty"`

	// return parameter
	// Read Only: true
	ReturnParameter *ParameterInfo `json:"ReturnParameter,omitempty"`

	// return type
	// Read Only: true
	ReturnType string `json:"ReturnType,omitempty"`

	// return type custom attributes
	// Read Only: true
	ReturnTypeCustomAttributes ICustomAttributeProvider `json:"ReturnTypeCustomAttributes,omitempty"`
}

// Validate validates this method info
func (m *MethodInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallingConvention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethodImplementationFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnParameter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var methodInfoTypeAttributesPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MemberAccessMask","PrivateScope","Private","FamANDAssem","Assembly","Family","FamORAssem","Public","Static","Final","Virtual","HideBySig","CheckAccessOnOverride","VtableLayoutMask","ReuseSlot","NewSlot","Abstract","SpecialName","PinvokeImpl","UnmanagedExport","RTSpecialName","ReservedMask","HasSecurity","RequireSecObject"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		methodInfoTypeAttributesPropEnum = append(methodInfoTypeAttributesPropEnum, v)
	}
}

const (

	// MethodInfoAttributesMemberAccessMask captures enum value "MemberAccessMask"
	MethodInfoAttributesMemberAccessMask string = "MemberAccessMask"

	// MethodInfoAttributesPrivateScope captures enum value "PrivateScope"
	MethodInfoAttributesPrivateScope string = "PrivateScope"

	// MethodInfoAttributesPrivate captures enum value "Private"
	MethodInfoAttributesPrivate string = "Private"

	// MethodInfoAttributesFamANDAssem captures enum value "FamANDAssem"
	MethodInfoAttributesFamANDAssem string = "FamANDAssem"

	// MethodInfoAttributesAssembly captures enum value "Assembly"
	MethodInfoAttributesAssembly string = "Assembly"

	// MethodInfoAttributesFamily captures enum value "Family"
	MethodInfoAttributesFamily string = "Family"

	// MethodInfoAttributesFamORAssem captures enum value "FamORAssem"
	MethodInfoAttributesFamORAssem string = "FamORAssem"

	// MethodInfoAttributesPublic captures enum value "Public"
	MethodInfoAttributesPublic string = "Public"

	// MethodInfoAttributesStatic captures enum value "Static"
	MethodInfoAttributesStatic string = "Static"

	// MethodInfoAttributesFinal captures enum value "Final"
	MethodInfoAttributesFinal string = "Final"

	// MethodInfoAttributesVirtual captures enum value "Virtual"
	MethodInfoAttributesVirtual string = "Virtual"

	// MethodInfoAttributesHideBySig captures enum value "HideBySig"
	MethodInfoAttributesHideBySig string = "HideBySig"

	// MethodInfoAttributesCheckAccessOnOverride captures enum value "CheckAccessOnOverride"
	MethodInfoAttributesCheckAccessOnOverride string = "CheckAccessOnOverride"

	// MethodInfoAttributesVtableLayoutMask captures enum value "VtableLayoutMask"
	MethodInfoAttributesVtableLayoutMask string = "VtableLayoutMask"

	// MethodInfoAttributesReuseSlot captures enum value "ReuseSlot"
	MethodInfoAttributesReuseSlot string = "ReuseSlot"

	// MethodInfoAttributesNewSlot captures enum value "NewSlot"
	MethodInfoAttributesNewSlot string = "NewSlot"

	// MethodInfoAttributesAbstract captures enum value "Abstract"
	MethodInfoAttributesAbstract string = "Abstract"

	// MethodInfoAttributesSpecialName captures enum value "SpecialName"
	MethodInfoAttributesSpecialName string = "SpecialName"

	// MethodInfoAttributesPinvokeImpl captures enum value "PinvokeImpl"
	MethodInfoAttributesPinvokeImpl string = "PinvokeImpl"

	// MethodInfoAttributesUnmanagedExport captures enum value "UnmanagedExport"
	MethodInfoAttributesUnmanagedExport string = "UnmanagedExport"

	// MethodInfoAttributesRTSpecialName captures enum value "RTSpecialName"
	MethodInfoAttributesRTSpecialName string = "RTSpecialName"

	// MethodInfoAttributesReservedMask captures enum value "ReservedMask"
	MethodInfoAttributesReservedMask string = "ReservedMask"

	// MethodInfoAttributesHasSecurity captures enum value "HasSecurity"
	MethodInfoAttributesHasSecurity string = "HasSecurity"

	// MethodInfoAttributesRequireSecObject captures enum value "RequireSecObject"
	MethodInfoAttributesRequireSecObject string = "RequireSecObject"
)

// prop value enum
func (m *MethodInfo) validateAttributesEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, methodInfoTypeAttributesPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MethodInfo) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	// value enum
	if err := m.validateAttributesEnum("Attributes", "body", m.Attributes); err != nil {
		return err
	}

	return nil
}

var methodInfoTypeCallingConventionPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Standard","VarArgs","Any","HasThis","ExplicitThis"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		methodInfoTypeCallingConventionPropEnum = append(methodInfoTypeCallingConventionPropEnum, v)
	}
}

const (

	// MethodInfoCallingConventionStandard captures enum value "Standard"
	MethodInfoCallingConventionStandard string = "Standard"

	// MethodInfoCallingConventionVarArgs captures enum value "VarArgs"
	MethodInfoCallingConventionVarArgs string = "VarArgs"

	// MethodInfoCallingConventionAny captures enum value "Any"
	MethodInfoCallingConventionAny string = "Any"

	// MethodInfoCallingConventionHasThis captures enum value "HasThis"
	MethodInfoCallingConventionHasThis string = "HasThis"

	// MethodInfoCallingConventionExplicitThis captures enum value "ExplicitThis"
	MethodInfoCallingConventionExplicitThis string = "ExplicitThis"
)

// prop value enum
func (m *MethodInfo) validateCallingConventionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, methodInfoTypeCallingConventionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MethodInfo) validateCallingConvention(formats strfmt.Registry) error {
	if swag.IsZero(m.CallingConvention) { // not required
		return nil
	}

	// value enum
	if err := m.validateCallingConventionEnum("CallingConvention", "body", m.CallingConvention); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) validateCustomAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomAttributes); i++ {
		if swag.IsZero(m.CustomAttributes[i]) { // not required
			continue
		}

		if m.CustomAttributes[i] != nil {
			if err := m.CustomAttributes[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("CustomAttributes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("CustomAttributes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

var methodInfoTypeMemberTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Constructor","Event","Field","Method","Property","TypeInfo","Custom","NestedType","All"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		methodInfoTypeMemberTypePropEnum = append(methodInfoTypeMemberTypePropEnum, v)
	}
}

const (

	// MethodInfoMemberTypeConstructor captures enum value "Constructor"
	MethodInfoMemberTypeConstructor string = "Constructor"

	// MethodInfoMemberTypeEvent captures enum value "Event"
	MethodInfoMemberTypeEvent string = "Event"

	// MethodInfoMemberTypeField captures enum value "Field"
	MethodInfoMemberTypeField string = "Field"

	// MethodInfoMemberTypeMethod captures enum value "Method"
	MethodInfoMemberTypeMethod string = "Method"

	// MethodInfoMemberTypeProperty captures enum value "Property"
	MethodInfoMemberTypeProperty string = "Property"

	// MethodInfoMemberTypeTypeInfo captures enum value "TypeInfo"
	MethodInfoMemberTypeTypeInfo string = "TypeInfo"

	// MethodInfoMemberTypeCustom captures enum value "Custom"
	MethodInfoMemberTypeCustom string = "Custom"

	// MethodInfoMemberTypeNestedType captures enum value "NestedType"
	MethodInfoMemberTypeNestedType string = "NestedType"

	// MethodInfoMemberTypeAll captures enum value "All"
	MethodInfoMemberTypeAll string = "All"
)

// prop value enum
func (m *MethodInfo) validateMemberTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, methodInfoTypeMemberTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MethodInfo) validateMemberType(formats strfmt.Registry) error {
	if swag.IsZero(m.MemberType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMemberTypeEnum("MemberType", "body", m.MemberType); err != nil {
		return err
	}

	return nil
}

var methodInfoTypeMethodImplementationFlagsPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CodeTypeMask","IL","Native","OPTIL","Runtime","ManagedMask","Unmanaged","Managed","ForwardRef","PreserveSig","InternalCall","Synchronized","NoInlining","AggressiveInlining","NoOptimization","SecurityMitigations","MaxMethodImplVal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		methodInfoTypeMethodImplementationFlagsPropEnum = append(methodInfoTypeMethodImplementationFlagsPropEnum, v)
	}
}

const (

	// MethodInfoMethodImplementationFlagsCodeTypeMask captures enum value "CodeTypeMask"
	MethodInfoMethodImplementationFlagsCodeTypeMask string = "CodeTypeMask"

	// MethodInfoMethodImplementationFlagsIL captures enum value "IL"
	MethodInfoMethodImplementationFlagsIL string = "IL"

	// MethodInfoMethodImplementationFlagsNative captures enum value "Native"
	MethodInfoMethodImplementationFlagsNative string = "Native"

	// MethodInfoMethodImplementationFlagsOPTIL captures enum value "OPTIL"
	MethodInfoMethodImplementationFlagsOPTIL string = "OPTIL"

	// MethodInfoMethodImplementationFlagsRuntime captures enum value "Runtime"
	MethodInfoMethodImplementationFlagsRuntime string = "Runtime"

	// MethodInfoMethodImplementationFlagsManagedMask captures enum value "ManagedMask"
	MethodInfoMethodImplementationFlagsManagedMask string = "ManagedMask"

	// MethodInfoMethodImplementationFlagsUnmanaged captures enum value "Unmanaged"
	MethodInfoMethodImplementationFlagsUnmanaged string = "Unmanaged"

	// MethodInfoMethodImplementationFlagsManaged captures enum value "Managed"
	MethodInfoMethodImplementationFlagsManaged string = "Managed"

	// MethodInfoMethodImplementationFlagsForwardRef captures enum value "ForwardRef"
	MethodInfoMethodImplementationFlagsForwardRef string = "ForwardRef"

	// MethodInfoMethodImplementationFlagsPreserveSig captures enum value "PreserveSig"
	MethodInfoMethodImplementationFlagsPreserveSig string = "PreserveSig"

	// MethodInfoMethodImplementationFlagsInternalCall captures enum value "InternalCall"
	MethodInfoMethodImplementationFlagsInternalCall string = "InternalCall"

	// MethodInfoMethodImplementationFlagsSynchronized captures enum value "Synchronized"
	MethodInfoMethodImplementationFlagsSynchronized string = "Synchronized"

	// MethodInfoMethodImplementationFlagsNoInlining captures enum value "NoInlining"
	MethodInfoMethodImplementationFlagsNoInlining string = "NoInlining"

	// MethodInfoMethodImplementationFlagsAggressiveInlining captures enum value "AggressiveInlining"
	MethodInfoMethodImplementationFlagsAggressiveInlining string = "AggressiveInlining"

	// MethodInfoMethodImplementationFlagsNoOptimization captures enum value "NoOptimization"
	MethodInfoMethodImplementationFlagsNoOptimization string = "NoOptimization"

	// MethodInfoMethodImplementationFlagsSecurityMitigations captures enum value "SecurityMitigations"
	MethodInfoMethodImplementationFlagsSecurityMitigations string = "SecurityMitigations"

	// MethodInfoMethodImplementationFlagsMaxMethodImplVal captures enum value "MaxMethodImplVal"
	MethodInfoMethodImplementationFlagsMaxMethodImplVal string = "MaxMethodImplVal"
)

// prop value enum
func (m *MethodInfo) validateMethodImplementationFlagsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, methodInfoTypeMethodImplementationFlagsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MethodInfo) validateMethodImplementationFlags(formats strfmt.Registry) error {
	if swag.IsZero(m.MethodImplementationFlags) { // not required
		return nil
	}

	// value enum
	if err := m.validateMethodImplementationFlagsEnum("MethodImplementationFlags", "body", m.MethodImplementationFlags); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) validateReturnParameter(formats strfmt.Registry) error {
	if swag.IsZero(m.ReturnParameter) { // not required
		return nil
	}

	if m.ReturnParameter != nil {
		if err := m.ReturnParameter.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("ReturnParameter")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("ReturnParameter")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this method info based on the context it is used
func (m *MethodInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCallingConvention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContainsGenericParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeclaringType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsAbstract(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsAssembly(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsConstructor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsFamily(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsFamilyAndAssembly(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsFamilyOrAssembly(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsFinal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsGenericMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsGenericMethodDefinition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsHideBySig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsPrivate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsPublic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsSecurityCritical(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsSecuritySafeCritical(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsSecurityTransparent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsSpecialName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsStatic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsVirtual(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemberType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadataToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMethodImplementationFlags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReflectedType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReturnParameter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReturnType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MethodInfo) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Attributes", "body", m.Attributes); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateCallingConvention(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "CallingConvention", "body", m.CallingConvention); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateContainsGenericParameters(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ContainsGenericParameters", "body", m.ContainsGenericParameters); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateCustomAttributes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "CustomAttributes", "body", m.CustomAttributes); err != nil {
		return err
	}

	for i := 0; i < len(m.CustomAttributes); i++ {

		if m.CustomAttributes[i] != nil {

			if swag.IsZero(m.CustomAttributes[i]) { // not required
				return nil
			}

			if err := m.CustomAttributes[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("CustomAttributes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("CustomAttributes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *MethodInfo) contextValidateDeclaringType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "DeclaringType", "body", m.DeclaringType); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsAbstract(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsAbstract", "body", m.IsAbstract); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsAssembly(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsAssembly", "body", m.IsAssembly); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsConstructor(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsConstructor", "body", m.IsConstructor); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsFamily(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsFamily", "body", m.IsFamily); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsFamilyAndAssembly(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsFamilyAndAssembly", "body", m.IsFamilyAndAssembly); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsFamilyOrAssembly(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsFamilyOrAssembly", "body", m.IsFamilyOrAssembly); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsFinal(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsFinal", "body", m.IsFinal); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsGenericMethod(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsGenericMethod", "body", m.IsGenericMethod); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsGenericMethodDefinition(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsGenericMethodDefinition", "body", m.IsGenericMethodDefinition); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsHideBySig(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsHideBySig", "body", m.IsHideBySig); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsPrivate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsPrivate", "body", m.IsPrivate); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsPublic(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsPublic", "body", m.IsPublic); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsSecurityCritical(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsSecurityCritical", "body", m.IsSecurityCritical); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsSecuritySafeCritical(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsSecuritySafeCritical", "body", m.IsSecuritySafeCritical); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsSecurityTransparent(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsSecurityTransparent", "body", m.IsSecurityTransparent); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsSpecialName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsSpecialName", "body", m.IsSpecialName); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsStatic(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsStatic", "body", m.IsStatic); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateIsVirtual(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsVirtual", "body", m.IsVirtual); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateMemberType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "MemberType", "body", m.MemberType); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateMetadataToken(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "MetadataToken", "body", m.MetadataToken); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateMethodImplementationFlags(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "MethodImplementationFlags", "body", m.MethodImplementationFlags); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateReflectedType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ReflectedType", "body", m.ReflectedType); err != nil {
		return err
	}

	return nil
}

func (m *MethodInfo) contextValidateReturnParameter(ctx context.Context, formats strfmt.Registry) error {

	if m.ReturnParameter != nil {

		if swag.IsZero(m.ReturnParameter) { // not required
			return nil
		}

		if err := m.ReturnParameter.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("ReturnParameter")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("ReturnParameter")
			}

			return err
		}
	}

	return nil
}

func (m *MethodInfo) contextValidateReturnType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ReturnType", "body", m.ReturnType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MethodInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MethodInfo) UnmarshalBinary(b []byte) error {
	var res MethodInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
