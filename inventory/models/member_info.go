// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MemberInfo member info
//
// swagger:model MemberInfo
type MemberInfo struct {

	// custom attributes
	// Read Only: true
	CustomAttributes []*CustomAttributeData `json:"CustomAttributes"`

	// declaring type
	// Read Only: true
	DeclaringType string `json:"DeclaringType,omitempty"`

	// member type
	// Read Only: true
	// Enum: ["Constructor","Event","Field","Method","Property","TypeInfo","Custom","NestedType","All"]
	MemberType string `json:"MemberType,omitempty"`

	// metadata token
	// Read Only: true
	MetadataToken int32 `json:"MetadataToken,omitempty"`

	// module
	// Read Only: true
	Module any `json:"Module,omitempty"`

	// name
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// reflected type
	// Read Only: true
	ReflectedType string `json:"ReflectedType,omitempty"`
}

// Validate validates this member info
func (m *MemberInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemberInfo) validateCustomAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomAttributes); i++ {
		if swag.IsZero(m.CustomAttributes[i]) { // not required
			continue
		}

		if m.CustomAttributes[i] != nil {
			if err := m.CustomAttributes[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("CustomAttributes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("CustomAttributes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

var memberInfoTypeMemberTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Constructor","Event","Field","Method","Property","TypeInfo","Custom","NestedType","All"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		memberInfoTypeMemberTypePropEnum = append(memberInfoTypeMemberTypePropEnum, v)
	}
}

const (

	// MemberInfoMemberTypeConstructor captures enum value "Constructor"
	MemberInfoMemberTypeConstructor string = "Constructor"

	// MemberInfoMemberTypeEvent captures enum value "Event"
	MemberInfoMemberTypeEvent string = "Event"

	// MemberInfoMemberTypeField captures enum value "Field"
	MemberInfoMemberTypeField string = "Field"

	// MemberInfoMemberTypeMethod captures enum value "Method"
	MemberInfoMemberTypeMethod string = "Method"

	// MemberInfoMemberTypeProperty captures enum value "Property"
	MemberInfoMemberTypeProperty string = "Property"

	// MemberInfoMemberTypeTypeInfo captures enum value "TypeInfo"
	MemberInfoMemberTypeTypeInfo string = "TypeInfo"

	// MemberInfoMemberTypeCustom captures enum value "Custom"
	MemberInfoMemberTypeCustom string = "Custom"

	// MemberInfoMemberTypeNestedType captures enum value "NestedType"
	MemberInfoMemberTypeNestedType string = "NestedType"

	// MemberInfoMemberTypeAll captures enum value "All"
	MemberInfoMemberTypeAll string = "All"
)

// prop value enum
func (m *MemberInfo) validateMemberTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, memberInfoTypeMemberTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MemberInfo) validateMemberType(formats strfmt.Registry) error {
	if swag.IsZero(m.MemberType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMemberTypeEnum("MemberType", "body", m.MemberType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this member info based on the context it is used
func (m *MemberInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeclaringType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemberType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadataToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReflectedType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemberInfo) contextValidateCustomAttributes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "CustomAttributes", "body", m.CustomAttributes); err != nil {
		return err
	}

	for i := 0; i < len(m.CustomAttributes); i++ {

		if m.CustomAttributes[i] != nil {

			if swag.IsZero(m.CustomAttributes[i]) { // not required
				return nil
			}

			if err := m.CustomAttributes[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("CustomAttributes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("CustomAttributes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *MemberInfo) contextValidateDeclaringType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "DeclaringType", "body", m.DeclaringType); err != nil {
		return err
	}

	return nil
}

func (m *MemberInfo) contextValidateMemberType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "MemberType", "body", m.MemberType); err != nil {
		return err
	}

	return nil
}

func (m *MemberInfo) contextValidateMetadataToken(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "MetadataToken", "body", m.MetadataToken); err != nil {
		return err
	}

	return nil
}

func (m *MemberInfo) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *MemberInfo) contextValidateReflectedType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ReflectedType", "body", m.ReflectedType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MemberInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemberInfo) UnmarshalBinary(b []byte) error {
	var res MemberInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
