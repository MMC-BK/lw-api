// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BatchDatesUpdateItem batch dates update item
//
// swagger:model BatchDatesUpdateItem
type BatchDatesUpdateItem struct {

	// batch number
	BatchNumber string `json:"BatchNumber,omitempty"`

	// expiry
	// Format: date-time
	Expiry strfmt.DateTime `json:"Expiry,omitempty"`

	// row index
	RowIndex int32 `json:"RowIndex,omitempty"`

	// s k u
	SKU string `json:"SKU,omitempty"`

	// sell by
	// Format: date-time
	SellBy strfmt.DateTime `json:"SellBy,omitempty"`
}

// Validate validates this batch dates update item
func (m *BatchDatesUpdateItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchDatesUpdateItem) validateExpiry(formats strfmt.Registry) error {
	if swag.IsZero(m.Expiry) { // not required
		return nil
	}

	if err := validate.FormatOf("Expiry", "body", "date-time", m.Expiry.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BatchDatesUpdateItem) validateSellBy(formats strfmt.Registry) error {
	if swag.IsZero(m.SellBy) { // not required
		return nil
	}

	if err := validate.FormatOf("SellBy", "body", "date-time", m.SellBy.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this batch dates update item based on context it is used
func (m *BatchDatesUpdateItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BatchDatesUpdateItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BatchDatesUpdateItem) UnmarshalBinary(b []byte) error {
	var res BatchDatesUpdateItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
