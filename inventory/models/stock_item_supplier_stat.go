// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemSupplierStat stock item supplier stat
//
// swagger:model StockItemSupplierStat
type StockItemSupplierStat struct {

	// Average lead time
	AverageLeadTime float64 `json:"AverageLeadTime,omitempty"`

	// Average price
	AveragePrice float64 `json:"AveragePrice,omitempty"`

	// Supplier code
	Code string `json:"Code,omitempty"`

	// If supplier information is default
	IsDefault bool `json:"IsDefault,omitempty"`

	// Supplier lead time
	LeadTime int32 `json:"LeadTime,omitempty"`

	// Maximum price
	MaxPrice float64 `json:"MaxPrice,omitempty"`

	// Minimum price
	MinPrice float64 `json:"MinPrice,omitempty"`

	// Supplier purchase price
	PurchasePrice float64 `json:"PurchasePrice,omitempty"`

	// Stock Item Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockItemID strfmt.UUID `json:"StockItemId,omitempty"`

	// Stock Item interger Id
	StockItemIntID int32 `json:"StockItemIntId,omitempty"`

	// Supplier name
	Supplier string `json:"Supplier,omitempty"`

	// Supplier barcode
	SupplierBarcode string `json:"SupplierBarcode,omitempty"`

	// Supplier's default currency
	SupplierCurrency string `json:"SupplierCurrency,omitempty"`

	// Supplier ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	SupplierID strfmt.UUID `json:"SupplierID,omitempty"`

	// Minimum order quantity from this supplier
	SupplierMinOrderQty int32 `json:"SupplierMinOrderQty,omitempty"`

	// Supplier pack size
	SupplierPackSize int32 `json:"SupplierPackSize,omitempty"`
}

// Validate validates this stock item supplier stat
func (m *StockItemSupplierStat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupplierID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemSupplierStat) validateStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockItemId", "body", "uuid", m.StockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemSupplierStat) validateSupplierID(formats strfmt.Registry) error {
	if swag.IsZero(m.SupplierID) { // not required
		return nil
	}

	if err := validate.FormatOf("SupplierID", "body", "uuid", m.SupplierID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stock item supplier stat based on context it is used
func (m *StockItemSupplierStat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StockItemSupplierStat) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemSupplierStat) UnmarshalBinary(b []byte) error {
	var res StockItemSupplierStat
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
