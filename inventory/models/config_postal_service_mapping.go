// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigPostalServiceMapping config postal service mapping
//
// swagger:model ConfigPostalServiceMapping
type ConfigPostalServiceMapping struct {

	// channel services
	// Read Only: true
	ChannelServices []*ChannelPostalService `json:"ChannelServices"`

	// is changed
	// Read Only: true
	IsChanged *bool `json:"IsChanged,omitempty"`

	// mapping
	// Read Only: true
	Mapping []*ConfigPostalServiceMappingItem `json:"Mapping"`
}

// Validate validates this config postal service mapping
func (m *ConfigPostalServiceMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMapping(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigPostalServiceMapping) validateChannelServices(formats strfmt.Registry) error {
	if swag.IsZero(m.ChannelServices) { // not required
		return nil
	}

	for i := 0; i < len(m.ChannelServices); i++ {
		if swag.IsZero(m.ChannelServices[i]) { // not required
			continue
		}

		if m.ChannelServices[i] != nil {
			if err := m.ChannelServices[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ChannelServices" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ChannelServices" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ConfigPostalServiceMapping) validateMapping(formats strfmt.Registry) error {
	if swag.IsZero(m.Mapping) { // not required
		return nil
	}

	for i := 0; i < len(m.Mapping); i++ {
		if swag.IsZero(m.Mapping[i]) { // not required
			continue
		}

		if m.Mapping[i] != nil {
			if err := m.Mapping[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Mapping" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Mapping" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this config postal service mapping based on the context it is used
func (m *ConfigPostalServiceMapping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChannelServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsChanged(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMapping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigPostalServiceMapping) contextValidateChannelServices(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ChannelServices", "body", m.ChannelServices); err != nil {
		return err
	}

	for i := 0; i < len(m.ChannelServices); i++ {

		if m.ChannelServices[i] != nil {

			if swag.IsZero(m.ChannelServices[i]) { // not required
				return nil
			}

			if err := m.ChannelServices[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ChannelServices" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ChannelServices" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ConfigPostalServiceMapping) contextValidateIsChanged(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsChanged", "body", m.IsChanged); err != nil {
		return err
	}

	return nil
}

func (m *ConfigPostalServiceMapping) contextValidateMapping(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Mapping", "body", m.Mapping); err != nil {
		return err
	}

	for i := 0; i < len(m.Mapping); i++ {

		if m.Mapping[i] != nil {

			if swag.IsZero(m.Mapping[i]) { // not required
				return nil
			}

			if err := m.Mapping[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Mapping" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Mapping" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigPostalServiceMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigPostalServiceMapping) UnmarshalBinary(b []byte) error {
	var res ConfigPostalServiceMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
