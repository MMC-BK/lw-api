// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddImageToInventoryItemResponse add image to inventory item response
//
// swagger:model AddImageToInventoryItemResponse
type AddImageToInventoryItemResponse struct {

	// ImageId of newly added image
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	ImageID strfmt.UUID `json:"ImageId,omitempty"`

	// Image Thumbnail URL
	ImageThumbnailURL string `json:"ImageThumbnailUrl,omitempty"`

	// Image new URL
	ImageURL string `json:"ImageUrl,omitempty"`

	// pkStockItemId of an item
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockItemID strfmt.UUID `json:"StockItemId,omitempty"`
}

// Validate validates this add image to inventory item response
func (m *AddImageToInventoryItemResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddImageToInventoryItemResponse) validateImageID(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageID) { // not required
		return nil
	}

	if err := validate.FormatOf("ImageId", "body", "uuid", m.ImageID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AddImageToInventoryItemResponse) validateStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockItemId", "body", "uuid", m.StockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add image to inventory item response based on context it is used
func (m *AddImageToInventoryItemResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddImageToInventoryItemResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddImageToInventoryItemResponse) UnmarshalBinary(b []byte) error {
	var res AddImageToInventoryItemResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
