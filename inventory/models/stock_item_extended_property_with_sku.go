// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemExtendedPropertyWithSku stock item extended property with sku
//
// swagger:model StockItemExtendedPropertyWithSku
type StockItemExtendedPropertyWithSku struct {

	// The ItemNumber (SKU) of the item
	// This is used to calculate the StockItemId if it has been omitted
	ItemNumber string `json:"ItemNumber,omitempty"`

	// Property type
	PropertyType string `json:"PropertyType,omitempty"`

	// Property value
	PropertyValue string `json:"PropertyValue,omitempty"`

	// Property name
	ProperyName string `json:"ProperyName,omitempty"`

	// Stock Item ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkStockItemID strfmt.UUID `json:"fkStockItemId,omitempty"`

	// Record row ID (generate random)
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkRowID strfmt.UUID `json:"pkRowId,omitempty"`
}

// Validate validates this stock item extended property with sku
func (m *StockItemExtendedPropertyWithSku) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFkStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkRowID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemExtendedPropertyWithSku) validateFkStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkStockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkStockItemId", "body", "uuid", m.FkStockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemExtendedPropertyWithSku) validatePkRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkRowId", "body", "uuid", m.PkRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stock item extended property with sku based on context it is used
func (m *StockItemExtendedPropertyWithSku) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StockItemExtendedPropertyWithSku) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemExtendedPropertyWithSku) UnmarshalBinary(b []byte) error {
	var res StockItemExtendedPropertyWithSku
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
