// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigChannelLocation config channel location
//
// swagger:model ConfigChannelLocation
type ConfigChannelLocation struct {

	// additional fields
	AdditionalFields map[string]any `json:"AdditionalFields,omitempty"`

	// deleted
	Deleted bool `json:"Deleted,omitempty"`

	// external reference
	ExternalReference string `json:"ExternalReference,omitempty"`

	// identifier
	Identifier string `json:"Identifier,omitempty"`

	// inventory sync locations
	InventorySyncLocations []strfmt.UUID `json:"InventorySyncLocations"`

	// is fulfilment
	IsFulfilment bool `json:"IsFulfilment,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// order download location
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	OrderDownloadLocation strfmt.UUID `json:"OrderDownloadLocation,omitempty"`

	// types
	// Enum: ["Unspecified","Delivery","Collection","SmartConnect"]
	Types string `json:"Types,omitempty"`

	// uses order download location
	UsesOrderDownloadLocation bool `json:"UsesOrderDownloadLocation,omitempty"`

	// pk channel location Id
	PkChannelLocationID int32 `json:"pkChannelLocationId,omitempty"`
}

// Validate validates this config channel location
func (m *ConfigChannelLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInventorySyncLocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderDownloadLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigChannelLocation) validateInventorySyncLocations(formats strfmt.Registry) error {
	if swag.IsZero(m.InventorySyncLocations) { // not required
		return nil
	}

	for i := 0; i < len(m.InventorySyncLocations); i++ {

		if err := validate.FormatOf("InventorySyncLocations"+"."+strconv.Itoa(i), "body", "uuid", m.InventorySyncLocations[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *ConfigChannelLocation) validateOrderDownloadLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderDownloadLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderDownloadLocation", "body", "uuid", m.OrderDownloadLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

var configChannelLocationTypeTypesPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unspecified","Delivery","Collection","SmartConnect"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configChannelLocationTypeTypesPropEnum = append(configChannelLocationTypeTypesPropEnum, v)
	}
}

const (

	// ConfigChannelLocationTypesUnspecified captures enum value "Unspecified"
	ConfigChannelLocationTypesUnspecified string = "Unspecified"

	// ConfigChannelLocationTypesDelivery captures enum value "Delivery"
	ConfigChannelLocationTypesDelivery string = "Delivery"

	// ConfigChannelLocationTypesCollection captures enum value "Collection"
	ConfigChannelLocationTypesCollection string = "Collection"

	// ConfigChannelLocationTypesSmartConnect captures enum value "SmartConnect"
	ConfigChannelLocationTypesSmartConnect string = "SmartConnect"
)

// prop value enum
func (m *ConfigChannelLocation) validateTypesEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, configChannelLocationTypeTypesPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConfigChannelLocation) validateTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.Types) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypesEnum("Types", "body", m.Types); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this config channel location based on context it is used
func (m *ConfigChannelLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfigChannelLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigChannelLocation) UnmarshalBinary(b []byte) error {
	var res ConfigChannelLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
