// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemPrice stock item price
//
// swagger:model StockItemPrice
type StockItemPrice struct {

	// Channel price
	Price float64 `json:"Price,omitempty"`

	// Pricing rule
	Rules []*StockItemPricingRule `json:"Rules"`

	// ChannelName/Source (e.g. EBAY)
	Source string `json:"Source,omitempty"`

	// Stock Item Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockItemID strfmt.UUID `json:"StockItemId,omitempty"`

	// Stock Item interger Id
	StockItemIntID int32 `json:"StockItemIntId,omitempty"`

	// SubSource (e.g. EBAY1)
	SubSource string `json:"SubSource,omitempty"`

	// Product price tag
	Tag string `json:"Tag,omitempty"`

	// update status
	// Enum: ["NoChange","Pending","SentNotConfirmed","Success","Error"]
	UpdateStatus string `json:"UpdateStatus,omitempty"`

	// Record row ID (generate random)
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkRowID strfmt.UUID `json:"pkRowId,omitempty"`
}

// Validate validates this stock item price
func (m *StockItemPrice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkRowID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemPrice) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Rules" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Rules" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *StockItemPrice) validateStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockItemId", "body", "uuid", m.StockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

var stockItemPriceTypeUpdateStatusPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NoChange","Pending","SentNotConfirmed","Success","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stockItemPriceTypeUpdateStatusPropEnum = append(stockItemPriceTypeUpdateStatusPropEnum, v)
	}
}

const (

	// StockItemPriceUpdateStatusNoChange captures enum value "NoChange"
	StockItemPriceUpdateStatusNoChange string = "NoChange"

	// StockItemPriceUpdateStatusPending captures enum value "Pending"
	StockItemPriceUpdateStatusPending string = "Pending"

	// StockItemPriceUpdateStatusSentNotConfirmed captures enum value "SentNotConfirmed"
	StockItemPriceUpdateStatusSentNotConfirmed string = "SentNotConfirmed"

	// StockItemPriceUpdateStatusSuccess captures enum value "Success"
	StockItemPriceUpdateStatusSuccess string = "Success"

	// StockItemPriceUpdateStatusError captures enum value "Error"
	StockItemPriceUpdateStatusError string = "Error"
)

// prop value enum
func (m *StockItemPrice) validateUpdateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stockItemPriceTypeUpdateStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StockItemPrice) validateUpdateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpdateStatusEnum("UpdateStatus", "body", m.UpdateStatus); err != nil {
		return err
	}

	return nil
}

func (m *StockItemPrice) validatePkRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkRowId", "body", "uuid", m.PkRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this stock item price based on the context it is used
func (m *StockItemPrice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemPrice) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rules); i++ {

		if m.Rules[i] != nil {

			if swag.IsZero(m.Rules[i]) { // not required
				return nil
			}

			if err := m.Rules[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Rules" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Rules" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StockItemPrice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemPrice) UnmarshalBinary(b []byte) error {
	var res StockItemPrice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
