// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthorizeByApplicationRequest authorize by application request
//
// swagger:model AuthorizeByApplicationRequest
type AuthorizeByApplicationRequest struct {

	// application Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	ApplicationID strfmt.UUID `json:"ApplicationId,omitempty"`

	// application secret
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	ApplicationSecret strfmt.UUID `json:"ApplicationSecret,omitempty"`

	// token
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	Token strfmt.UUID `json:"Token,omitempty"`
}

// Validate validates this authorize by application request
func (m *AuthorizeByApplicationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizeByApplicationRequest) validateApplicationID(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationID) { // not required
		return nil
	}

	if err := validate.FormatOf("ApplicationId", "body", "uuid", m.ApplicationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizeByApplicationRequest) validateApplicationSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationSecret) { // not required
		return nil
	}

	if err := validate.FormatOf("ApplicationSecret", "body", "uuid", m.ApplicationSecret.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizeByApplicationRequest) validateToken(formats strfmt.Registry) error {
	if swag.IsZero(m.Token) { // not required
		return nil
	}

	if err := validate.FormatOf("Token", "body", "uuid", m.Token.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this authorize by application request based on context it is used
func (m *AuthorizeByApplicationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuthorizeByApplicationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorizeByApplicationRequest) UnmarshalBinary(b []byte) error {
	var res AuthorizeByApplicationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
