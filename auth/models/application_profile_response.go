// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationProfileResponse Represents Linnworks.net application subscription profile
//
// swagger:model ApplicationProfileResponse
type ApplicationProfileResponse struct {

	// Date when the profile was signed up for, or resubscribed
	// Format: date-time
	ActivationDate strfmt.DateTime `json:"ActivationDate,omitempty"`

	// Indicates whether the payment profile is active for the application, if this is set to false it means the customer canceled the profile but the profile is still active due last payment made in the last month.
	IsProfileActive bool `json:"IsProfileActive,omitempty"`

	// Last Payment date
	// Format: date-time
	LastPaymentDate strfmt.DateTime `json:"LastPaymentDate,omitempty"`

	// Next payment date
	// Format: date-time
	NextPaymentDate strfmt.DateTime `json:"NextPaymentDate,omitempty"`

	// Plan Name as defined in your application Configuration
	PlanName string `json:"PlanName,omitempty"`

	// Plan Tag as defined in your Application Configuration
	PlanTag string `json:"PlanTag,omitempty"`

	// When profile is due to expire
	// Format: date-time
	ProfileExpires strfmt.DateTime `json:"ProfileExpires,omitempty"`
}

// Validate validates this application profile response
func (m *ApplicationProfileResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastPaymentDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextPaymentDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileExpires(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationProfileResponse) validateActivationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActivationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ActivationDate", "body", "date-time", m.ActivationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationProfileResponse) validateLastPaymentDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastPaymentDate) { // not required
		return nil
	}

	if err := validate.FormatOf("LastPaymentDate", "body", "date-time", m.LastPaymentDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationProfileResponse) validateNextPaymentDate(formats strfmt.Registry) error {
	if swag.IsZero(m.NextPaymentDate) { // not required
		return nil
	}

	if err := validate.FormatOf("NextPaymentDate", "body", "date-time", m.NextPaymentDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationProfileResponse) validateProfileExpires(formats strfmt.Registry) error {
	if swag.IsZero(m.ProfileExpires) { // not required
		return nil
	}

	if err := validate.FormatOf("ProfileExpires", "body", "date-time", m.ProfileExpires.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this application profile response based on context it is used
func (m *ApplicationProfileResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationProfileResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationProfileResponse) UnmarshalBinary(b []byte) error {
	var res ApplicationProfileResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
