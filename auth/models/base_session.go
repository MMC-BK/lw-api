// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BaseSession base session
//
// swagger:model BaseSession
type BaseSession struct {

	// access token
	AccessToken string `json:"AccessToken,omitempty"`

	// app name
	AppName string `json:"AppName,omitempty"`

	// database name
	DatabaseName string `json:"DatabaseName,omitempty"`

	// database password
	DatabasePassword string `json:"DatabasePassword,omitempty"`

	// database server
	DatabaseServer string `json:"DatabaseServer,omitempty"`

	// database user
	DatabaseUser string `json:"DatabaseUser,omitempty"`

	// device
	Device string `json:"Device,omitempty"`

	// device type
	DeviceType string `json:"DeviceType,omitempty"`

	// email
	Email string `json:"Email,omitempty"`

	// entity Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	EntityID strfmt.UUID `json:"EntityId,omitempty"`

	// group name
	GroupName string `json:"GroupName,omitempty"`

	// Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	ID strfmt.UUID `json:"Id,omitempty"`

	// locality
	// Enum: ["EU","US","AS"]
	Locality string `json:"Locality,omitempty"`

	// md5 hash
	Md5Hash string `json:"Md5Hash,omitempty"`

	// private database server
	PrivateDatabaseServer string `json:"PrivateDatabaseServer,omitempty"`

	// properties
	Properties map[string]string `json:"Properties,omitempty"`

	// push server
	PushServer string `json:"PushServer,omitempty"`

	// server
	Server string `json:"Server,omitempty"`

	// status
	Status *StatusDetails `json:"Status,omitempty"`

	// super admin
	SuperAdmin bool `json:"SuperAdmin,omitempty"`

	// TTL
	TTL int32 `json:"TTL,omitempty"`

	// token
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	Token strfmt.UUID `json:"Token,omitempty"`

	// user Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	UserID strfmt.UUID `json:"UserId,omitempty"`

	// user name
	UserName string `json:"UserName,omitempty"`

	// user type
	UserType string `json:"UserType,omitempty"`

	// sid registration
	// Example: 00000000-0000-0000-0000-000000000000
	// Read Only: true
	// Format: uuid
	SidRegistration strfmt.UUID `json:"sid_registration,omitempty"`
}

// Validate validates this base session
func (m *BaseSession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSidRegistration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseSession) validateEntityID(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityID) { // not required
		return nil
	}

	if err := validate.FormatOf("EntityId", "body", "uuid", m.EntityID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BaseSession) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("Id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var baseSessionTypeLocalityPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EU","US","AS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseSessionTypeLocalityPropEnum = append(baseSessionTypeLocalityPropEnum, v)
	}
}

const (

	// BaseSessionLocalityEU captures enum value "EU"
	BaseSessionLocalityEU string = "EU"

	// BaseSessionLocalityUS captures enum value "US"
	BaseSessionLocalityUS string = "US"

	// BaseSessionLocalityAS captures enum value "AS"
	BaseSessionLocalityAS string = "AS"
)

// prop value enum
func (m *BaseSession) validateLocalityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, baseSessionTypeLocalityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BaseSession) validateLocality(formats strfmt.Registry) error {
	if swag.IsZero(m.Locality) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocalityEnum("Locality", "body", m.Locality); err != nil {
		return err
	}

	return nil
}

func (m *BaseSession) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Status")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Status")
			}

			return err
		}
	}

	return nil
}

func (m *BaseSession) validateToken(formats strfmt.Registry) error {
	if swag.IsZero(m.Token) { // not required
		return nil
	}

	if err := validate.FormatOf("Token", "body", "uuid", m.Token.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BaseSession) validateUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if err := validate.FormatOf("UserId", "body", "uuid", m.UserID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BaseSession) validateSidRegistration(formats strfmt.Registry) error {
	if swag.IsZero(m.SidRegistration) { // not required
		return nil
	}

	if err := validate.FormatOf("sid_registration", "body", "uuid", m.SidRegistration.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this base session based on the context it is used
func (m *BaseSession) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSidRegistration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseSession) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Status")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Status")
			}

			return err
		}
	}

	return nil
}

func (m *BaseSession) contextValidateSidRegistration(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sid_registration", "body", m.SidRegistration); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseSession) UnmarshalBinary(b []byte) error {
	var res BaseSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
