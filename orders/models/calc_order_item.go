// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CalcOrderItem Class represents order item for package calculation purposes only
//
// swagger:model CalcOrderItem
type CalcOrderItem struct {

	// boxes
	Boxes []*StockItemBoxConfiguration `json:"Boxes"`

	// item depth
	DimDepth float64 `json:"DimDepth,omitempty"`

	// Item height
	DimHeight float64 `json:"DimHeight,omitempty"`

	// Item width
	DimWidth float64 `json:"DimWidth,omitempty"`

	// is composite child
	// Read Only: true
	IsCompositeChild *bool `json:"IsCompositeChild,omitempty"`

	// Item weight
	ItemWeight float64 `json:"ItemWeight,omitempty"`

	// Prefered Packaging group
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PackageGroup strfmt.UUID `json:"PackageGroup,omitempty"`

	// SKU
	SKU string `json:"SKU,omitempty"`

	// stock item int Id
	StockItemIntID int32 `json:"StockItemIntId,omitempty"`

	// Indicates whether the item is a child of a composite, if EmptyGuid or Null not a child
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkCompositeParentRowID strfmt.UUID `json:"fkCompositeParentRowId,omitempty"`

	// Unique row identifier of the order item
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkOrderItemID strfmt.UUID `json:"fkOrderItemId,omitempty"`

	// Unique stock item identifier
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkStockItemID strfmt.UUID `json:"fkStockItemId,omitempty"`

	// Quantity of items
	NQty int32 `json:"nQty,omitempty"`
}

// Validate validates this calc order item
func (m *CalcOrderItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoxes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkCompositeParentRowID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkOrderItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CalcOrderItem) validateBoxes(formats strfmt.Registry) error {
	if swag.IsZero(m.Boxes) { // not required
		return nil
	}

	for i := 0; i < len(m.Boxes); i++ {
		if swag.IsZero(m.Boxes[i]) { // not required
			continue
		}

		if m.Boxes[i] != nil {
			if err := m.Boxes[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Boxes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Boxes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *CalcOrderItem) validatePackageGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageGroup) { // not required
		return nil
	}

	if err := validate.FormatOf("PackageGroup", "body", "uuid", m.PackageGroup.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CalcOrderItem) validateFkCompositeParentRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkCompositeParentRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkCompositeParentRowId", "body", "uuid", m.FkCompositeParentRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CalcOrderItem) validateFkOrderItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkOrderItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkOrderItemId", "body", "uuid", m.FkOrderItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CalcOrderItem) validateFkStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkStockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkStockItemId", "body", "uuid", m.FkStockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this calc order item based on the context it is used
func (m *CalcOrderItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBoxes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsCompositeChild(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CalcOrderItem) contextValidateBoxes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Boxes); i++ {

		if m.Boxes[i] != nil {

			if swag.IsZero(m.Boxes[i]) { // not required
				return nil
			}

			if err := m.Boxes[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Boxes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Boxes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *CalcOrderItem) contextValidateIsCompositeChild(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsCompositeChild", "body", m.IsCompositeChild); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CalcOrderItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CalcOrderItem) UnmarshalBinary(b []byte) error {
	var res CalcOrderItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
