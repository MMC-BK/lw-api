// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackageType package type
//
// swagger:model PackageType
type PackageType struct {

	// depth
	Depth float64 `json:"Depth,omitempty"`

	// from gramms
	FromGramms float64 `json:"FromGramms,omitempty"`

	// height
	Height float64 `json:"Height,omitempty"`

	// package group Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PackageGroupID strfmt.UUID `json:"PackageGroupId,omitempty"`

	// package title
	PackageTitle string `json:"PackageTitle,omitempty"`

	// package type Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PackageTypeID strfmt.UUID `json:"PackageTypeId,omitempty"`

	// packaging capacity
	PackagingCapacity float64 `json:"PackagingCapacity,omitempty"`

	// packaging weight
	PackagingWeight float64 `json:"PackagingWeight,omitempty"`

	// rowguid
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	Rowguid strfmt.UUID `json:"Rowguid,omitempty"`

	// to gramms
	ToGramms float64 `json:"ToGramms,omitempty"`

	// width
	Width float64 `json:"Width,omitempty"`
}

// Validate validates this package type
func (m *PackageType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRowguid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageType) validatePackageGroupID(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageGroupID) { // not required
		return nil
	}

	if err := validate.FormatOf("PackageGroupId", "body", "uuid", m.PackageGroupID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageType) validatePackageTypeID(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageTypeID) { // not required
		return nil
	}

	if err := validate.FormatOf("PackageTypeId", "body", "uuid", m.PackageTypeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageType) validateRowguid(formats strfmt.Registry) error {
	if swag.IsZero(m.Rowguid) { // not required
		return nil
	}

	if err := validate.FormatOf("Rowguid", "body", "uuid", m.Rowguid.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this package type based on context it is used
func (m *PackageType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PackageType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageType) UnmarshalBinary(b []byte) error {
	var res PackageType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
