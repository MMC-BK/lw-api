// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderItemOnOrder order item on order
//
// swagger:model OrderItemOnOrder
type OrderItemOnOrder struct {

	// date of delivery
	// Format: date-time
	DateOfDelivery strfmt.DateTime `json:"DateOfDelivery,omitempty"`

	// external invoice number
	ExternalInvoiceNumber string `json:"ExternalInvoiceNumber,omitempty"`

	// quoted delivery date
	// Format: date-time
	QuotedDeliveryDate strfmt.DateTime `json:"QuotedDeliveryDate,omitempty"`

	// rowid
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	Rowid strfmt.UUID `json:"Rowid,omitempty"`

	// supplier name
	SupplierName string `json:"SupplierName,omitempty"`

	// fk location Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkLocationID strfmt.UUID `json:"fkLocationId,omitempty"`

	// fk supplier Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkSupplierID strfmt.UUID `json:"fkSupplierId,omitempty"`

	// pk purchase Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkPurchaseID strfmt.UUID `json:"pkPurchaseId,omitempty"`

	// Primary key of the bound
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkPurchaseItemID strfmt.UUID `json:"pkPurchaseItemId,omitempty"`
}

// Validate validates this order item on order
func (m *OrderItemOnOrder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateOfDelivery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRowid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkSupplierID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkPurchaseID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkPurchaseItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemOnOrder) validateDateOfDelivery(formats strfmt.Registry) error {
	if swag.IsZero(m.DateOfDelivery) { // not required
		return nil
	}

	if err := validate.FormatOf("DateOfDelivery", "body", "date-time", m.DateOfDelivery.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemOnOrder) validateQuotedDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.QuotedDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("QuotedDeliveryDate", "body", "date-time", m.QuotedDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemOnOrder) validateRowid(formats strfmt.Registry) error {
	if swag.IsZero(m.Rowid) { // not required
		return nil
	}

	if err := validate.FormatOf("Rowid", "body", "uuid", m.Rowid.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemOnOrder) validateFkLocationID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkLocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkLocationId", "body", "uuid", m.FkLocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemOnOrder) validateFkSupplierID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkSupplierID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkSupplierId", "body", "uuid", m.FkSupplierID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemOnOrder) validatePkPurchaseID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkPurchaseID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkPurchaseId", "body", "uuid", m.PkPurchaseID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemOnOrder) validatePkPurchaseItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkPurchaseItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkPurchaseItemId", "body", "uuid", m.PkPurchaseItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this order item on order based on context it is used
func (m *OrderItemOnOrder) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrderItemOnOrder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItemOnOrder) UnmarshalBinary(b []byte) error {
	var res OrderItemOnOrder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
