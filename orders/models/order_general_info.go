// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderGeneralInfo Order General Info class
//
// swagger:model OrderGeneralInfo
type OrderGeneralInfo struct {

	// Despatch by Date
	// Format: date-time
	DespatchByDate strfmt.DateTime `json:"DespatchByDate,omitempty"`

	// This is an additional reference number from the sales channel, typically used by eBay
	ExternalReferenceNum string `json:"ExternalReferenceNum,omitempty"`

	// has scheduled delivery
	// Read Only: true
	HasScheduledDelivery *bool `json:"HasScheduledDelivery,omitempty"`

	// This shows whether the order has been marked as on hold, for processed orders if the order has been cancelled OnHold = 1
	HoldOrCancel bool `json:"HoldOrCancel,omitempty"`

	// Order identifiers. [Prime | Scheduled]
	Identifiers []*Identifier `json:"Identifiers"`

	// Is there invoice print error
	InvoicePrintError string `json:"InvoicePrintError,omitempty"`

	// Is invoice printed
	InvoicePrinted bool `json:"InvoicePrinted,omitempty"`

	// Is the order parked?
	IsParked bool `json:"IsParked,omitempty"`

	// If rules engine rule ran on an order
	IsRuleRun bool `json:"IsRuleRun,omitempty"`

	// Is there a label error
	LabelError string `json:"LabelError,omitempty"`

	// Is label printed
	LabelPrinted bool `json:"LabelPrinted,omitempty"`

	// Order location ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	Location strfmt.UUID `json:"Location,omitempty"`

	// Order marker (0 = NOT TAG,1 = Tag 1,2 = Tag 2,3 = Tag 3,4 = Tag 4,5 = Tag 5,6 = Tag 6,7 = Parked)
	Marker int32 `json:"Marker,omitempty"`

	// Quantity of order notes
	Notes int32 `json:"Notes,omitempty"`

	// Quantity of order items
	NumItems int32 `json:"NumItems,omitempty"`

	// Number of days after which an order is processed its pii will be redacted/obfuscate
	PIIRedactionDays int32 `json:"PIIRedactionDays,omitempty"`

	// If order partly shipped
	PartShipped bool `json:"PartShipped,omitempty"`

	// Is there pick list print error
	PickListPrintError string `json:"PickListPrintError,omitempty"`

	// Is pick list printed
	PickListPrinted bool `json:"PickListPrinted,omitempty"`

	// All related Pickwave Ids
	PickwaveIds []int32 `json:"PickwaveIds"`

	// The date and time at which the order was placed on the sales channel
	// Format: date-time
	ReceivedDate strfmt.DateTime `json:"ReceivedDate,omitempty"`

	// Order reference number (Channel defined)
	ReferenceNum string `json:"ReferenceNum,omitempty"`

	// Scheduled delivery dates. Take priority over despatch by date
	ScheduledDelivery *ScheduledDelivery `json:"ScheduledDelivery,omitempty"`

	// An additional reference number for the orderr (Used by some channels)
	SecondaryReference string `json:"SecondaryReference,omitempty"`

	// SiteCode used to differentiate between different sites from a single channel (eg. Amazon UK, Amazon US, Amazon FR...)
	SiteCode string `json:"SiteCode,omitempty"`

	// Order ChannelName/Source (e.g. EBAY)
	Source string `json:"Source,omitempty"`

	// Order Status (0 = UNPAID, 1 = PAID,2 = RETURN,3 = PENDING,4 = RESEND)
	Status int32 `json:"Status,omitempty"`

	// stock allocation type
	// Enum: ["NotAllocated","Insuffient","Partial","Full","OverAllocated"]
	StockAllocationType string `json:"StockAllocationType,omitempty"`

	// Order Subsource (e.g. EBAY1)
	SubSource string `json:"SubSource,omitempty"`
}

// Validate validates this order general info
func (m *OrderGeneralInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDespatchByDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledDelivery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockAllocationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderGeneralInfo) validateDespatchByDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DespatchByDate) { // not required
		return nil
	}

	if err := validate.FormatOf("DespatchByDate", "body", "date-time", m.DespatchByDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderGeneralInfo) validateIdentifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.Identifiers) { // not required
		return nil
	}

	for i := 0; i < len(m.Identifiers); i++ {
		if swag.IsZero(m.Identifiers[i]) { // not required
			continue
		}

		if m.Identifiers[i] != nil {
			if err := m.Identifiers[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Identifiers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Identifiers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderGeneralInfo) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if err := validate.FormatOf("Location", "body", "uuid", m.Location.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderGeneralInfo) validateReceivedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ReceivedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ReceivedDate", "body", "date-time", m.ReceivedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderGeneralInfo) validateScheduledDelivery(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledDelivery) { // not required
		return nil
	}

	if m.ScheduledDelivery != nil {
		if err := m.ScheduledDelivery.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("ScheduledDelivery")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("ScheduledDelivery")
			}

			return err
		}
	}

	return nil
}

var orderGeneralInfoTypeStockAllocationTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotAllocated","Insuffient","Partial","Full","OverAllocated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderGeneralInfoTypeStockAllocationTypePropEnum = append(orderGeneralInfoTypeStockAllocationTypePropEnum, v)
	}
}

const (

	// OrderGeneralInfoStockAllocationTypeNotAllocated captures enum value "NotAllocated"
	OrderGeneralInfoStockAllocationTypeNotAllocated string = "NotAllocated"

	// OrderGeneralInfoStockAllocationTypeInsuffient captures enum value "Insuffient"
	OrderGeneralInfoStockAllocationTypeInsuffient string = "Insuffient"

	// OrderGeneralInfoStockAllocationTypePartial captures enum value "Partial"
	OrderGeneralInfoStockAllocationTypePartial string = "Partial"

	// OrderGeneralInfoStockAllocationTypeFull captures enum value "Full"
	OrderGeneralInfoStockAllocationTypeFull string = "Full"

	// OrderGeneralInfoStockAllocationTypeOverAllocated captures enum value "OverAllocated"
	OrderGeneralInfoStockAllocationTypeOverAllocated string = "OverAllocated"
)

// prop value enum
func (m *OrderGeneralInfo) validateStockAllocationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderGeneralInfoTypeStockAllocationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrderGeneralInfo) validateStockAllocationType(formats strfmt.Registry) error {
	if swag.IsZero(m.StockAllocationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateStockAllocationTypeEnum("StockAllocationType", "body", m.StockAllocationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order general info based on the context it is used
func (m *OrderGeneralInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHasScheduledDelivery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduledDelivery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderGeneralInfo) contextValidateHasScheduledDelivery(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "HasScheduledDelivery", "body", m.HasScheduledDelivery); err != nil {
		return err
	}

	return nil
}

func (m *OrderGeneralInfo) contextValidateIdentifiers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Identifiers); i++ {

		if m.Identifiers[i] != nil {

			if swag.IsZero(m.Identifiers[i]) { // not required
				return nil
			}

			if err := m.Identifiers[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Identifiers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Identifiers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderGeneralInfo) contextValidateScheduledDelivery(ctx context.Context, formats strfmt.Registry) error {

	if m.ScheduledDelivery != nil {

		if swag.IsZero(m.ScheduledDelivery) { // not required
			return nil
		}

		if err := m.ScheduledDelivery.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("ScheduledDelivery")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("ScheduledDelivery")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderGeneralInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderGeneralInfo) UnmarshalBinary(b []byte) error {
	var res OrderGeneralInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
