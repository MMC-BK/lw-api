// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderFulfillmentState order fulfillment state
//
// swagger:model OrderFulfillmentState
type OrderFulfillmentState struct {

	// fulfillment state
	// Enum: ["Unknown","Insufficient_Stock","Insufficient_To_Fulfill_All","Sufficient_Stock"]
	FulfillmentState string `json:"FulfillmentState,omitempty"`

	// purchase order state
	// Enum: ["Insufficient_PO","Sufficient_PO"]
	PurchaseOrderState string `json:"PurchaseOrderState,omitempty"`
}

// Validate validates this order fulfillment state
func (m *OrderFulfillmentState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFulfillmentState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchaseOrderState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var orderFulfillmentStateTypeFulfillmentStatePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Insufficient_Stock","Insufficient_To_Fulfill_All","Sufficient_Stock"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderFulfillmentStateTypeFulfillmentStatePropEnum = append(orderFulfillmentStateTypeFulfillmentStatePropEnum, v)
	}
}

const (

	// OrderFulfillmentStateFulfillmentStateUnknown captures enum value "Unknown"
	OrderFulfillmentStateFulfillmentStateUnknown string = "Unknown"

	// OrderFulfillmentStateFulfillmentStateInsufficientStock captures enum value "Insufficient_Stock"
	OrderFulfillmentStateFulfillmentStateInsufficientStock string = "Insufficient_Stock"

	// OrderFulfillmentStateFulfillmentStateInsufficientToFulfillAll captures enum value "Insufficient_To_Fulfill_All"
	OrderFulfillmentStateFulfillmentStateInsufficientToFulfillAll string = "Insufficient_To_Fulfill_All"

	// OrderFulfillmentStateFulfillmentStateSufficientStock captures enum value "Sufficient_Stock"
	OrderFulfillmentStateFulfillmentStateSufficientStock string = "Sufficient_Stock"
)

// prop value enum
func (m *OrderFulfillmentState) validateFulfillmentStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderFulfillmentStateTypeFulfillmentStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrderFulfillmentState) validateFulfillmentState(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfillmentState) { // not required
		return nil
	}

	// value enum
	if err := m.validateFulfillmentStateEnum("FulfillmentState", "body", m.FulfillmentState); err != nil {
		return err
	}

	return nil
}

var orderFulfillmentStateTypePurchaseOrderStatePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Insufficient_PO","Sufficient_PO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderFulfillmentStateTypePurchaseOrderStatePropEnum = append(orderFulfillmentStateTypePurchaseOrderStatePropEnum, v)
	}
}

const (

	// OrderFulfillmentStatePurchaseOrderStateInsufficientPO captures enum value "Insufficient_PO"
	OrderFulfillmentStatePurchaseOrderStateInsufficientPO string = "Insufficient_PO"

	// OrderFulfillmentStatePurchaseOrderStateSufficientPO captures enum value "Sufficient_PO"
	OrderFulfillmentStatePurchaseOrderStateSufficientPO string = "Sufficient_PO"
)

// prop value enum
func (m *OrderFulfillmentState) validatePurchaseOrderStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderFulfillmentStateTypePurchaseOrderStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrderFulfillmentState) validatePurchaseOrderState(formats strfmt.Registry) error {
	if swag.IsZero(m.PurchaseOrderState) { // not required
		return nil
	}

	// value enum
	if err := m.validatePurchaseOrderStateEnum("PurchaseOrderState", "body", m.PurchaseOrderState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this order fulfillment state based on context it is used
func (m *OrderFulfillmentState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrderFulfillmentState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderFulfillmentState) UnmarshalBinary(b []byte) error {
	var res OrderFulfillmentState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
