// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrdersAddOrderItemRequest orders add order item request
//
// swagger:model Orders_AddOrderItemRequest
type OrdersAddOrderItemRequest struct {

	// Channel SKU of the item
	ChannelSKU string `json:"channelSKU,omitempty"`

	// The datetime that the item was added to the order
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// Current fulfilment center
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FulfilmentCenter strfmt.UUID `json:"fulfilmentCenter,omitempty"`

	// Item id to be added
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	ItemID strfmt.UUID `json:"itemId,omitempty"`

	// Item pricing data
	LinePricing *LinePricingRequest `json:"linePricing,omitempty"`

	// Order id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	OrderID strfmt.UUID `json:"orderId,omitempty"`

	// Item quantity
	Quantity int32 `json:"quantity,omitempty"`
}

// Validate validates this orders add order item request
func (m *OrdersAddOrderItemRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfilmentCenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinePricing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrdersAddOrderItemRequest) validateCreatedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrdersAddOrderItemRequest) validateFulfilmentCenter(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfilmentCenter) { // not required
		return nil
	}

	if err := validate.FormatOf("fulfilmentCenter", "body", "uuid", m.FulfilmentCenter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrdersAddOrderItemRequest) validateItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("itemId", "body", "uuid", m.ItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrdersAddOrderItemRequest) validateLinePricing(formats strfmt.Registry) error {
	if swag.IsZero(m.LinePricing) { // not required
		return nil
	}

	if m.LinePricing != nil {
		if err := m.LinePricing.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("linePricing")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("linePricing")
			}

			return err
		}
	}

	return nil
}

func (m *OrdersAddOrderItemRequest) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("orderId", "body", "uuid", m.OrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this orders add order item request based on the context it is used
func (m *OrdersAddOrderItemRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinePricing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrdersAddOrderItemRequest) contextValidateLinePricing(ctx context.Context, formats strfmt.Registry) error {

	if m.LinePricing != nil {

		if swag.IsZero(m.LinePricing) { // not required
			return nil
		}

		if err := m.LinePricing.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("linePricing")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("linePricing")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrdersAddOrderItemRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrdersAddOrderItemRequest) UnmarshalBinary(b []byte) error {
	var res OrdersAddOrderItemRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
