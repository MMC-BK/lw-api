// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackageResult package result
//
// swagger:model PackageResult
type PackageResult struct {

	// depth
	Depth float64 `json:"Depth,omitempty"`

	// faces
	Faces []*Face `json:"Faces"`

	// height
	Height float64 `json:"Height,omitempty"`

	// is manual package
	IsManualPackage bool `json:"IsManualPackage,omitempty"`

	// item weight
	ItemWeight float64 `json:"ItemWeight,omitempty"`

	// items
	Items []*PackedItem `json:"Items"`

	// layer count
	LayerCount int32 `json:"LayerCount,omitempty"`

	// layer face
	LayerFace map[string]Face `json:"LayerFace,omitempty"`

	// packaging Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PackagingID strfmt.UUID `json:"PackagingId,omitempty"`

	// packaging weight
	PackagingWeight float64 `json:"PackagingWeight,omitempty"`

	// width
	Width float64 `json:"Width,omitempty"`
}

// Validate validates this package result
func (m *PackageResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLayerFace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackagingID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageResult) validateFaces(formats strfmt.Registry) error {
	if swag.IsZero(m.Faces) { // not required
		return nil
	}

	for i := 0; i < len(m.Faces); i++ {
		if swag.IsZero(m.Faces[i]) { // not required
			continue
		}

		if m.Faces[i] != nil {
			if err := m.Faces[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Faces" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Faces" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *PackageResult) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Items" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Items" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *PackageResult) validateLayerFace(formats strfmt.Registry) error {
	if swag.IsZero(m.LayerFace) { // not required
		return nil
	}

	for k := range m.LayerFace {

		if err := validate.Required("LayerFace"+"."+k, "body", m.LayerFace[k]); err != nil {
			return err
		}
		if val, ok := m.LayerFace[k]; ok {
			if err := val.Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("LayerFace" + "." + k)
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("LayerFace" + "." + k)
				}

				return err
			}
		}

	}

	return nil
}

func (m *PackageResult) validatePackagingID(formats strfmt.Registry) error {
	if swag.IsZero(m.PackagingID) { // not required
		return nil
	}

	if err := validate.FormatOf("PackagingId", "body", "uuid", m.PackagingID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this package result based on the context it is used
func (m *PackageResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLayerFace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageResult) contextValidateFaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Faces); i++ {

		if m.Faces[i] != nil {

			if swag.IsZero(m.Faces[i]) { // not required
				return nil
			}

			if err := m.Faces[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Faces" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Faces" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *PackageResult) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {

			if swag.IsZero(m.Items[i]) { // not required
				return nil
			}

			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Items" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Items" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *PackageResult) contextValidateLayerFace(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.LayerFace {

		if val, ok := m.LayerFace[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageResult) UnmarshalBinary(b []byte) error {
	var res PackageResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
