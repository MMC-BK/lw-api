// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderPackagingSplitItem order packaging split item
//
// swagger:model OrderPackagingSplitItem
type OrderPackagingSplitItem struct {

	// The batches that make up this row
	AssignedBatches []*OrderItemShippingBatchWithRow `json:"AssignedBatches"`

	// box Id
	// Read Only: true
	BoxID int32 `json:"BoxId,omitempty"`

	// Is the order item batched
	// Read Only: true
	IsBatched *bool `json:"IsBatched,omitempty"`

	// quantity
	Quantity int32 `json:"Quantity,omitempty"`

	// row Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	RowID strfmt.UUID `json:"RowId,omitempty"`

	// s k u
	SKU string `json:"SKU,omitempty"`

	// title
	Title string `json:"Title,omitempty"`

	// tracking number
	TrackingNumber string `json:"TrackingNumber,omitempty"`

	// weight
	Weight float64 `json:"Weight,omitempty"`
}

// Validate validates this order packaging split item
func (m *OrderPackagingSplitItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignedBatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRowID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderPackagingSplitItem) validateAssignedBatches(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignedBatches) { // not required
		return nil
	}

	for i := 0; i < len(m.AssignedBatches); i++ {
		if swag.IsZero(m.AssignedBatches[i]) { // not required
			continue
		}

		if m.AssignedBatches[i] != nil {
			if err := m.AssignedBatches[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("AssignedBatches" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("AssignedBatches" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderPackagingSplitItem) validateRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.RowID) { // not required
		return nil
	}

	if err := validate.FormatOf("RowId", "body", "uuid", m.RowID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order packaging split item based on the context it is used
func (m *OrderPackagingSplitItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssignedBatches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBoxID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsBatched(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderPackagingSplitItem) contextValidateAssignedBatches(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssignedBatches); i++ {

		if m.AssignedBatches[i] != nil {

			if swag.IsZero(m.AssignedBatches[i]) { // not required
				return nil
			}

			if err := m.AssignedBatches[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("AssignedBatches" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("AssignedBatches" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderPackagingSplitItem) contextValidateBoxID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "BoxId", "body", m.BoxID); err != nil {
		return err
	}

	return nil
}

func (m *OrderPackagingSplitItem) contextValidateIsBatched(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsBatched", "body", m.IsBatched); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderPackagingSplitItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderPackagingSplitItem) UnmarshalBinary(b []byte) error {
	var res OrderPackagingSplitItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
