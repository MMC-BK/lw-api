// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackageGroup package group
//
// swagger:model PackageGroup
type PackageGroup struct {

	// Package category name
	PackageCategory string `json:"PackageCategory,omitempty"`

	// Package category ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PackageCategoryID strfmt.UUID `json:"PackageCategoryID,omitempty"`

	// List of packaging types
	PackageTypes []*PackageType `json:"PackageTypes"`

	// Record row ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	Rowguid strfmt.UUID `json:"rowguid,omitempty"`
}

// Validate validates this package group
func (m *PackageGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageCategoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRowguid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageGroup) validatePackageCategoryID(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageCategoryID) { // not required
		return nil
	}

	if err := validate.FormatOf("PackageCategoryID", "body", "uuid", m.PackageCategoryID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackageGroup) validatePackageTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.PackageTypes); i++ {
		if swag.IsZero(m.PackageTypes[i]) { // not required
			continue
		}

		if m.PackageTypes[i] != nil {
			if err := m.PackageTypes[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("PackageTypes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("PackageTypes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *PackageGroup) validateRowguid(formats strfmt.Registry) error {
	if swag.IsZero(m.Rowguid) { // not required
		return nil
	}

	if err := validate.FormatOf("rowguid", "body", "uuid", m.Rowguid.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this package group based on the context it is used
func (m *PackageGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackageTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageGroup) contextValidatePackageTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PackageTypes); i++ {

		if m.PackageTypes[i] != nil {

			if swag.IsZero(m.PackageTypes[i]) { // not required
				return nil
			}

			if err := m.PackageTypes[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("PackageTypes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("PackageTypes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageGroup) UnmarshalBinary(b []byte) error {
	var res PackageGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
