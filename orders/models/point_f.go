// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PointF point f
//
// swagger:model PointF
type PointF struct {

	// is empty
	// Read Only: true
	IsEmpty *bool `json:"IsEmpty,omitempty"`

	// x
	X float32 `json:"X,omitempty"`

	// y
	Y float32 `json:"Y,omitempty"`
}

// Validate validates this point f
func (m *PointF) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this point f based on the context it is used
func (m *PointF) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIsEmpty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PointF) contextValidateIsEmpty(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsEmpty", "body", m.IsEmpty); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PointF) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PointF) UnmarshalBinary(b []byte) error {
	var res PointF
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
