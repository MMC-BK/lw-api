// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Face face
//
// swagger:model Face
type Face struct {

	// bottom left
	BottomLeft *PointF `json:"BottomLeft,omitempty"`

	// bottom right
	BottomRight *PointF `json:"BottomRight,omitempty"`

	// top left
	TopLeft *PointF `json:"TopLeft,omitempty"`

	// top right
	TopRight *PointF `json:"TopRight,omitempty"`
}

// Validate validates this face
func (m *Face) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBottomLeft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBottomRight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopLeft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopRight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Face) validateBottomLeft(formats strfmt.Registry) error {
	if swag.IsZero(m.BottomLeft) { // not required
		return nil
	}

	if m.BottomLeft != nil {
		if err := m.BottomLeft.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("BottomLeft")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("BottomLeft")
			}

			return err
		}
	}

	return nil
}

func (m *Face) validateBottomRight(formats strfmt.Registry) error {
	if swag.IsZero(m.BottomRight) { // not required
		return nil
	}

	if m.BottomRight != nil {
		if err := m.BottomRight.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("BottomRight")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("BottomRight")
			}

			return err
		}
	}

	return nil
}

func (m *Face) validateTopLeft(formats strfmt.Registry) error {
	if swag.IsZero(m.TopLeft) { // not required
		return nil
	}

	if m.TopLeft != nil {
		if err := m.TopLeft.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("TopLeft")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("TopLeft")
			}

			return err
		}
	}

	return nil
}

func (m *Face) validateTopRight(formats strfmt.Registry) error {
	if swag.IsZero(m.TopRight) { // not required
		return nil
	}

	if m.TopRight != nil {
		if err := m.TopRight.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("TopRight")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("TopRight")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this face based on the context it is used
func (m *Face) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBottomLeft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBottomRight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTopLeft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTopRight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Face) contextValidateBottomLeft(ctx context.Context, formats strfmt.Registry) error {

	if m.BottomLeft != nil {

		if swag.IsZero(m.BottomLeft) { // not required
			return nil
		}

		if err := m.BottomLeft.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("BottomLeft")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("BottomLeft")
			}

			return err
		}
	}

	return nil
}

func (m *Face) contextValidateBottomRight(ctx context.Context, formats strfmt.Registry) error {

	if m.BottomRight != nil {

		if swag.IsZero(m.BottomRight) { // not required
			return nil
		}

		if err := m.BottomRight.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("BottomRight")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("BottomRight")
			}

			return err
		}
	}

	return nil
}

func (m *Face) contextValidateTopLeft(ctx context.Context, formats strfmt.Registry) error {

	if m.TopLeft != nil {

		if swag.IsZero(m.TopLeft) { // not required
			return nil
		}

		if err := m.TopLeft.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("TopLeft")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("TopLeft")
			}

			return err
		}
	}

	return nil
}

func (m *Face) contextValidateTopRight(ctx context.Context, formats strfmt.Registry) error {

	if m.TopRight != nil {

		if swag.IsZero(m.TopRight) { // not required
			return nil
		}

		if err := m.TopRight.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("TopRight")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("TopRight")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Face) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Face) UnmarshalBinary(b []byte) error {
	var res Face
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
