// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssignStockToOrderRequest assign stock to order request
//
// swagger:model AssignStockToOrderRequest
type AssignStockToOrderRequest struct {

	// The way in which batches should be assigned
	// Enum: ["ALL","AUTO_ONLY","UNASSIGNED_ONLY"]
	BatchAssignmentMode string `json:"BatchAssignmentMode,omitempty"`

	// order Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	OrderID strfmt.UUID `json:"OrderId,omitempty"`

	// order item rows
	OrderItemRows []strfmt.UUID `json:"OrderItemRows"`
}

// Validate validates this assign stock to order request
func (m *AssignStockToOrderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchAssignmentMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderItemRows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var assignStockToOrderRequestTypeBatchAssignmentModePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALL","AUTO_ONLY","UNASSIGNED_ONLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assignStockToOrderRequestTypeBatchAssignmentModePropEnum = append(assignStockToOrderRequestTypeBatchAssignmentModePropEnum, v)
	}
}

const (

	// AssignStockToOrderRequestBatchAssignmentModeALL captures enum value "ALL"
	AssignStockToOrderRequestBatchAssignmentModeALL string = "ALL"

	// AssignStockToOrderRequestBatchAssignmentModeAUTOONLY captures enum value "AUTO_ONLY"
	AssignStockToOrderRequestBatchAssignmentModeAUTOONLY string = "AUTO_ONLY"

	// AssignStockToOrderRequestBatchAssignmentModeUNASSIGNEDONLY captures enum value "UNASSIGNED_ONLY"
	AssignStockToOrderRequestBatchAssignmentModeUNASSIGNEDONLY string = "UNASSIGNED_ONLY"
)

// prop value enum
func (m *AssignStockToOrderRequest) validateBatchAssignmentModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assignStockToOrderRequestTypeBatchAssignmentModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssignStockToOrderRequest) validateBatchAssignmentMode(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchAssignmentMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateBatchAssignmentModeEnum("BatchAssignmentMode", "body", m.BatchAssignmentMode); err != nil {
		return err
	}

	return nil
}

func (m *AssignStockToOrderRequest) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderId", "body", "uuid", m.OrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AssignStockToOrderRequest) validateOrderItemRows(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderItemRows) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderItemRows); i++ {

		if err := validate.FormatOf("OrderItemRows"+"."+strconv.Itoa(i), "body", "uuid", m.OrderItemRows[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this assign stock to order request based on context it is used
func (m *AssignStockToOrderRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssignStockToOrderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssignStockToOrderRequest) UnmarshalBinary(b []byte) error {
	var res AssignStockToOrderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
