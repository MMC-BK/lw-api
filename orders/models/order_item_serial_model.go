// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderItemSerialModel order item serial model
//
// swagger:model OrderItemSerialModel
type OrderItemSerialModel struct {

	// correlation serials
	CorrelationSerials [][]*SerialModel `json:"CorrelationSerials"`

	// order item row Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	OrderItemRowID strfmt.UUID `json:"OrderItemRowId,omitempty"`
}

// Validate validates this order item serial model
func (m *OrderItemSerialModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCorrelationSerials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderItemRowID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemSerialModel) validateCorrelationSerials(formats strfmt.Registry) error {
	if swag.IsZero(m.CorrelationSerials) { // not required
		return nil
	}

	for i := 0; i < len(m.CorrelationSerials); i++ {

		for ii := 0; ii < len(m.CorrelationSerials[i]); ii++ {
			if swag.IsZero(m.CorrelationSerials[i][ii]) { // not required
				continue
			}

			if m.CorrelationSerials[i][ii] != nil {
				if err := m.CorrelationSerials[i][ii].Validate(formats); err != nil {
					ve := new(errors.Validation)
					if stderrors.As(err, &ve) {
						return ve.ValidateName("CorrelationSerials" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					}
					ce := new(errors.CompositeError)
					if stderrors.As(err, &ce) {
						return ce.ValidateName("CorrelationSerials" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					}

					return err
				}
			}

		}

	}

	return nil
}

func (m *OrderItemSerialModel) validateOrderItemRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderItemRowID) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderItemRowId", "body", "uuid", m.OrderItemRowID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order item serial model based on the context it is used
func (m *OrderItemSerialModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCorrelationSerials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemSerialModel) contextValidateCorrelationSerials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CorrelationSerials); i++ {

		for ii := 0; ii < len(m.CorrelationSerials[i]); ii++ {

			if m.CorrelationSerials[i][ii] != nil {

				if swag.IsZero(m.CorrelationSerials[i][ii]) { // not required
					return nil
				}

				if err := m.CorrelationSerials[i][ii].ContextValidate(ctx, formats); err != nil {
					ve := new(errors.Validation)
					if stderrors.As(err, &ve) {
						return ve.ValidateName("CorrelationSerials" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					}
					ce := new(errors.CompositeError)
					if stderrors.As(err, &ce) {
						return ce.ValidateName("CorrelationSerials" + "." + strconv.Itoa(i) + "." + strconv.Itoa(ii))
					}

					return err
				}
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItemSerialModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItemSerialModel) UnmarshalBinary(b []byte) error {
	var res OrderItemSerialModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
