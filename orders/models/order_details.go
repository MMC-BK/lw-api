// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderDetails order details
//
// swagger:model OrderDetails
type OrderDetails struct {

	// Order Customer information (Name, email etc)
	CustomerInfo *OrderCustomerInfo `json:"CustomerInfo,omitempty"`

	// Extended properties of an order
	ExtendedProperties []*ExtendedProperty `json:"ExtendedProperties"`

	// Folder names assigned to an order
	FolderName []string `json:"FolderName"`

	// Location ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FulfilmentLocationID strfmt.UUID `json:"FulfilmentLocationId,omitempty"`

	// General information about order
	GeneralInfo *OrderGeneralInfo `json:"GeneralInfo,omitempty"`

	// List of order items
	Items []*OrderItem `json:"Items"`

	// List of order notes
	Notes []*OrderNote `json:"Notes"`

	// Linnworks order number
	NumOrderID int32 `json:"NumOrderId,omitempty"`

	// Order ID (pkOrderId)
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	OrderID strfmt.UUID `json:"OrderId,omitempty"`

	// Date and time when the order was marked as paid
	// Format: date-time
	PaidDateTime strfmt.DateTime `json:"PaidDateTime,omitempty"`

	// If order is processed
	Processed bool `json:"Processed,omitempty"`

	// Date and time when order was processed
	// Format: date-time
	ProcessedDateTime strfmt.DateTime `json:"ProcessedDateTime,omitempty"`

	// Order shipping information
	ShippingInfo *OrderShippingInfo `json:"ShippingInfo,omitempty"`

	// Buyer's tax number.
	TaxID string `json:"TaxId,omitempty"`

	// Order totals information
	TotalsInfo *OrderTotalsInfo `json:"TotalsInfo,omitempty"`
}

// Validate validates this order details
func (m *OrderDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomerInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtendedProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfilmentLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneralInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaidDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessedDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalsInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderDetails) validateCustomerInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerInfo) { // not required
		return nil
	}

	if m.CustomerInfo != nil {
		if err := m.CustomerInfo.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("CustomerInfo")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("CustomerInfo")
			}

			return err
		}
	}

	return nil
}

func (m *OrderDetails) validateExtendedProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtendedProperties) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtendedProperties); i++ {
		if swag.IsZero(m.ExtendedProperties[i]) { // not required
			continue
		}

		if m.ExtendedProperties[i] != nil {
			if err := m.ExtendedProperties[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ExtendedProperties" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ExtendedProperties" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderDetails) validateFulfilmentLocationID(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfilmentLocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("FulfilmentLocationId", "body", "uuid", m.FulfilmentLocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderDetails) validateGeneralInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.GeneralInfo) { // not required
		return nil
	}

	if m.GeneralInfo != nil {
		if err := m.GeneralInfo.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("GeneralInfo")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("GeneralInfo")
			}

			return err
		}
	}

	return nil
}

func (m *OrderDetails) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Items" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Items" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderDetails) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {
		if swag.IsZero(m.Notes[i]) { // not required
			continue
		}

		if m.Notes[i] != nil {
			if err := m.Notes[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Notes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Notes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderDetails) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderId", "body", "uuid", m.OrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderDetails) validatePaidDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.PaidDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("PaidDateTime", "body", "date-time", m.PaidDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderDetails) validateProcessedDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessedDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("ProcessedDateTime", "body", "date-time", m.ProcessedDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderDetails) validateShippingInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippingInfo) { // not required
		return nil
	}

	if m.ShippingInfo != nil {
		if err := m.ShippingInfo.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("ShippingInfo")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("ShippingInfo")
			}

			return err
		}
	}

	return nil
}

func (m *OrderDetails) validateTotalsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalsInfo) { // not required
		return nil
	}

	if m.TotalsInfo != nil {
		if err := m.TotalsInfo.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("TotalsInfo")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("TotalsInfo")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this order details based on the context it is used
func (m *OrderDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomerInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtendedProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeneralInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderDetails) contextValidateCustomerInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomerInfo != nil {

		if swag.IsZero(m.CustomerInfo) { // not required
			return nil
		}

		if err := m.CustomerInfo.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("CustomerInfo")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("CustomerInfo")
			}

			return err
		}
	}

	return nil
}

func (m *OrderDetails) contextValidateExtendedProperties(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExtendedProperties); i++ {

		if m.ExtendedProperties[i] != nil {

			if swag.IsZero(m.ExtendedProperties[i]) { // not required
				return nil
			}

			if err := m.ExtendedProperties[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ExtendedProperties" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ExtendedProperties" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderDetails) contextValidateGeneralInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.GeneralInfo != nil {

		if swag.IsZero(m.GeneralInfo) { // not required
			return nil
		}

		if err := m.GeneralInfo.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("GeneralInfo")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("GeneralInfo")
			}

			return err
		}
	}

	return nil
}

func (m *OrderDetails) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {

			if swag.IsZero(m.Items[i]) { // not required
				return nil
			}

			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Items" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Items" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderDetails) contextValidateNotes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Notes); i++ {

		if m.Notes[i] != nil {

			if swag.IsZero(m.Notes[i]) { // not required
				return nil
			}

			if err := m.Notes[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Notes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Notes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderDetails) contextValidateShippingInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingInfo != nil {

		if swag.IsZero(m.ShippingInfo) { // not required
			return nil
		}

		if err := m.ShippingInfo.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("ShippingInfo")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("ShippingInfo")
			}

			return err
		}
	}

	return nil
}

func (m *OrderDetails) contextValidateTotalsInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalsInfo != nil {

		if swag.IsZero(m.TotalsInfo) { // not required
			return nil
		}

		if err := m.TotalsInfo.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("TotalsInfo")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("TotalsInfo")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderDetails) UnmarshalBinary(b []byte) error {
	var res OrderDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
