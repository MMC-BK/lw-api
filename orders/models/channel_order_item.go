// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChannelOrderItem Channel order item
//
// swagger:model ChannelOrderItem
type ChannelOrderItem struct {

	// The item reference id on the channel
	ChannelReferenceID string `json:"ChannelReferenceId,omitempty"`

	// SKU of the item ordered on the channel
	ChannelSKU string `json:"ChannelSKU,omitempty"`

	// Indicates the item is a service and not a physical item
	IsService bool `json:"IsService,omitempty"`

	// Unique line number
	ItemNumber string `json:"ItemNumber,omitempty"`

	// Title of the item ordered, or service name
	ItemTitle string `json:"ItemTitle,omitempty"`

	// Discount percentage on the line as a whole number eg. 10
	LineDiscount float64 `json:"LineDiscount,omitempty"`

	// The refund amount applied on the line, excluding shipping charges
	LineRefund float64 `json:"LineRefund,omitempty"`

	// Options on the item ordered
	Options []*ChannelOrderItemOption `json:"Options"`

	// Postal service cost after discount
	PostalServiceCost float64 `json:"PostalServiceCost,omitempty"`

	// Individual price of the item
	PricePerUnit float64 `json:"PricePerUnit,omitempty"`

	// Quantity customer ordered
	Qty int32 `json:"Qty,omitempty"`

	// The quantity of items refunded (can be decimalised)
	RefundQuantity float64 `json:"RefundQuantity,omitempty"`

	// The shipping refund for this line (if known)
	ShippingRefund float64 `json:"ShippingRefund,omitempty"`

	// tax cost inclusive
	TaxCostInclusive bool `json:"TaxCostInclusive,omitempty"`

	// Tax Rate as a whole number eg. 20
	TaxRate float64 `json:"TaxRate,omitempty"`

	// taxes
	Taxes []*ChannelOrderItemTax `json:"Taxes"`

	// The total refund amount applied on the line-level, including any shipping charges
	TotalRefund float64 `json:"TotalRefund,omitempty"`

	// Validate if the tax should be overwritten on the order item.
	UseChannelTax bool `json:"UseChannelTax,omitempty"`
}

// Validate validates this channel order item
func (m *ChannelOrderItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelOrderItem) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {
		if swag.IsZero(m.Options[i]) { // not required
			continue
		}

		if m.Options[i] != nil {
			if err := m.Options[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Options" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Options" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ChannelOrderItem) validateTaxes(formats strfmt.Registry) error {
	if swag.IsZero(m.Taxes) { // not required
		return nil
	}

	for i := 0; i < len(m.Taxes); i++ {
		if swag.IsZero(m.Taxes[i]) { // not required
			continue
		}

		if m.Taxes[i] != nil {
			if err := m.Taxes[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Taxes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Taxes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this channel order item based on the context it is used
func (m *ChannelOrderItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelOrderItem) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Options); i++ {

		if m.Options[i] != nil {

			if swag.IsZero(m.Options[i]) { // not required
				return nil
			}

			if err := m.Options[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Options" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Options" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ChannelOrderItem) contextValidateTaxes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Taxes); i++ {

		if m.Taxes[i] != nil {

			if swag.IsZero(m.Taxes[i]) { // not required
				return nil
			}

			if err := m.Taxes[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Taxes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Taxes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChannelOrderItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelOrderItem) UnmarshalBinary(b []byte) error {
	var res ChannelOrderItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
