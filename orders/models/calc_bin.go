// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CalcBin Class represents split packaging bin
//
// swagger:model CalcBin
type CalcBin struct {

	// Label cost if available
	Cost float64 `json:"Cost,omitempty"`

	// Bin depth. If null, recalculation was not performed
	Depth float64 `json:"Depth,omitempty"`

	// Bin height. If null, recalculation was not performed
	Height float64 `json:"Height,omitempty"`

	// Bin ItemWeight. If null, recalculation was not performed
	ItemWeight float64 `json:"ItemWeight,omitempty"`

	// List of order item ids in the bin and their quantities
	Items []*CalcBinItem `json:"Items"`

	// Bin Label Id
	LabelID string `json:"LabelId,omitempty"`

	// Indicates that the bin weights and dimensions have been manually adjusted by the user
	ManualAdjust bool `json:"ManualAdjust,omitempty"`

	// Bin packaging weight. If null, recalculation was not performed
	PackagingWeight float64 `json:"PackagingWeight,omitempty"`

	// Label Print date
	// Format: date-time
	PrintDate strfmt.DateTime `json:"PrintDate,omitempty"`

	// Bin Tracking number
	TrackingNumber string `json:"TrackingNumber,omitempty"`

	// Bin total weight. If null, recalculation was not performed
	Weight float64 `json:"Weight,omitempty"`

	// Bin width. If null, recalculation was not performed
	Width float64 `json:"Width,omitempty"`

	// Bin allocated packaging type
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkPackagingTypeID strfmt.UUID `json:"fkPackagingTypeId,omitempty"`

	// Bin Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkBinID strfmt.UUID `json:"pkBinId,omitempty"`
}

// Validate validates this calc bin
func (m *CalcBin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrintDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkPackagingTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkBinID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CalcBin) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Items" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Items" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *CalcBin) validatePrintDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PrintDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PrintDate", "body", "date-time", m.PrintDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CalcBin) validateFkPackagingTypeID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkPackagingTypeID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkPackagingTypeId", "body", "uuid", m.FkPackagingTypeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CalcBin) validatePkBinID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkBinID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkBinId", "body", "uuid", m.PkBinID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this calc bin based on the context it is used
func (m *CalcBin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CalcBin) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {

			if swag.IsZero(m.Items[i]) { // not required
				return nil
			}

			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Items" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Items" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CalcBin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CalcBin) UnmarshalBinary(b []byte) error {
	var res CalcBin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
