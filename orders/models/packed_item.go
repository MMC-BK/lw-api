// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackedItem packed item
//
// swagger:model PackedItem
type PackedItem struct {

	// depth
	Depth float64 `json:"Depth,omitempty"`

	// faces
	Faces []*Face `json:"Faces"`

	// height
	Height float64 `json:"Height,omitempty"`

	// ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"ID,omitempty"`

	// layer
	Layer int32 `json:"Layer,omitempty"`

	// pk stock item Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkStockItemID strfmt.UUID `json:"PkStockItemId,omitempty"`

	// s k u
	SKU string `json:"SKU,omitempty"`

	// weight
	Weight float64 `json:"Weight,omitempty"`

	// width
	Width float64 `json:"Width,omitempty"`

	// x
	X float64 `json:"X,omitempty"`

	// y
	Y float64 `json:"Y,omitempty"`

	// z
	Z float64 `json:"Z,omitempty"`
}

// Validate validates this packed item
func (m *PackedItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackedItem) validateFaces(formats strfmt.Registry) error {
	if swag.IsZero(m.Faces) { // not required
		return nil
	}

	for i := 0; i < len(m.Faces); i++ {
		if swag.IsZero(m.Faces[i]) { // not required
			continue
		}

		if m.Faces[i] != nil {
			if err := m.Faces[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Faces" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Faces" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *PackedItem) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("ID", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackedItem) validatePkStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkStockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("PkStockItemId", "body", "uuid", m.PkStockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this packed item based on the context it is used
func (m *PackedItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackedItem) contextValidateFaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Faces); i++ {

		if m.Faces[i] != nil {

			if swag.IsZero(m.Faces[i]) { // not required
				return nil
			}

			if err := m.Faces[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Faces" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Faces" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *PackedItem) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ID", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackedItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackedItem) UnmarshalBinary(b []byte) error {
	var res PackedItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
