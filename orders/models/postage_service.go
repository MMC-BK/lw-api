// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostageService postage service
//
// swagger:model PostageService
type PostageService struct {

	// integrated service ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	IntegratedServiceID strfmt.UUID `json:"IntegratedServiceID,omitempty"`

	// Postal service name
	PostalServiceName string `json:"PostalServiceName,omitempty"`

	// If tracking number is required for this service
	TrackingNumberRequired bool `json:"TrackingNumberRequired,omitempty"`

	// vendor
	Vendor string `json:"Vendor,omitempty"`

	// Postal service ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkPostalServiceID strfmt.UUID `json:"pkPostalServiceId,omitempty"`
}

// Validate validates this postage service
func (m *PostageService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIntegratedServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkPostalServiceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostageService) validateIntegratedServiceID(formats strfmt.Registry) error {
	if swag.IsZero(m.IntegratedServiceID) { // not required
		return nil
	}

	if err := validate.FormatOf("IntegratedServiceID", "body", "uuid", m.IntegratedServiceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PostageService) validatePkPostalServiceID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkPostalServiceID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkPostalServiceId", "body", "uuid", m.PkPostalServiceID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this postage service based on context it is used
func (m *PostageService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostageService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostageService) UnmarshalBinary(b []byte) error {
	var res PostageService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
