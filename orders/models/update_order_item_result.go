// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateOrderItemResult update order item result
//
// swagger:model UpdateOrderItemResult
type UpdateOrderItemResult struct {

	// Order items information
	Item *OrderItem `json:"Item,omitempty"`

	// Order item weight
	ItemWeight float64 `json:"ItemWeight,omitempty"`

	// Order total weight
	TotalWeight float64 `json:"TotalWeight,omitempty"`

	// Order figures
	TotalsInfo *OrderTotalsInfo `json:"TotalsInfo,omitempty"`
}

// Validate validates this update order item result
func (m *UpdateOrderItemResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalsInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateOrderItemResult) validateItem(formats strfmt.Registry) error {
	if swag.IsZero(m.Item) { // not required
		return nil
	}

	if m.Item != nil {
		if err := m.Item.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Item")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Item")
			}

			return err
		}
	}

	return nil
}

func (m *UpdateOrderItemResult) validateTotalsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalsInfo) { // not required
		return nil
	}

	if m.TotalsInfo != nil {
		if err := m.TotalsInfo.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("TotalsInfo")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("TotalsInfo")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this update order item result based on the context it is used
func (m *UpdateOrderItemResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateOrderItemResult) contextValidateItem(ctx context.Context, formats strfmt.Registry) error {

	if m.Item != nil {

		if swag.IsZero(m.Item) { // not required
			return nil
		}

		if err := m.Item.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("Item")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("Item")
			}

			return err
		}
	}

	return nil
}

func (m *UpdateOrderItemResult) contextValidateTotalsInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalsInfo != nil {

		if swag.IsZero(m.TotalsInfo) { // not required
			return nil
		}

		if err := m.TotalsInfo.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("TotalsInfo")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("TotalsInfo")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateOrderItemResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateOrderItemResult) UnmarshalBinary(b []byte) error {
	var res UpdateOrderItemResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
