// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderItemBinRack OrderItem BinRack
//
// swagger:model OrderItemBinRack
type OrderItemBinRack struct {

	// If the item is batched, identifies the batch number
	BatchID int32 `json:"BatchId,omitempty"`

	// BinRack
	BinRack string `json:"BinRack,omitempty"`

	// LocationId of the BinRack
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	Location strfmt.UUID `json:"Location,omitempty"`

	// If the item is batched, identifies the unique order item batch row
	OrderItemBatchID int32 `json:"OrderItemBatchId,omitempty"`

	// Quantity for BinRack per Location
	Quantity int32 `json:"Quantity,omitempty"`
}

// Validate validates this order item bin rack
func (m *OrderItemBinRack) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemBinRack) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if err := validate.FormatOf("Location", "body", "uuid", m.Location.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this order item bin rack based on context it is used
func (m *OrderItemBinRack) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrderItemBinRack) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItemBinRack) UnmarshalBinary(b []byte) error {
	var res OrderItemBinRack
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
