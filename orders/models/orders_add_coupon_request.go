// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrdersAddCouponRequest orders add coupon request
//
// swagger:model Orders_AddCouponRequest
type OrdersAddCouponRequest struct {

	// Coupon barcode
	Barcode string `json:"barcode,omitempty"`

	// Coupon data
	CouponData *CouponValidationResult `json:"couponData,omitempty"`

	// Current fulfilment center
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FulfilmentCenter strfmt.UUID `json:"fulfilmentCenter,omitempty"`

	// Order id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	OrderID strfmt.UUID `json:"orderId,omitempty"`
}

// Validate validates this orders add coupon request
func (m *OrdersAddCouponRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCouponData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfilmentCenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrdersAddCouponRequest) validateCouponData(formats strfmt.Registry) error {
	if swag.IsZero(m.CouponData) { // not required
		return nil
	}

	if m.CouponData != nil {
		if err := m.CouponData.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("couponData")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("couponData")
			}

			return err
		}
	}

	return nil
}

func (m *OrdersAddCouponRequest) validateFulfilmentCenter(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfilmentCenter) { // not required
		return nil
	}

	if err := validate.FormatOf("fulfilmentCenter", "body", "uuid", m.FulfilmentCenter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrdersAddCouponRequest) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("orderId", "body", "uuid", m.OrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this orders add coupon request based on the context it is used
func (m *OrdersAddCouponRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCouponData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrdersAddCouponRequest) contextValidateCouponData(ctx context.Context, formats strfmt.Registry) error {

	if m.CouponData != nil {

		if swag.IsZero(m.CouponData) { // not required
			return nil
		}

		if err := m.CouponData.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("couponData")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("couponData")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrdersAddCouponRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrdersAddCouponRequest) UnmarshalBinary(b []byte) error {
	var res OrdersAddCouponRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
