// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KeyValuePairListOrderSummaryString key value pair list order summary string
//
// swagger:model KeyValuePair_List_OrderSummary_String
type KeyValuePairListOrderSummaryString struct {

	// key
	// Read Only: true
	Key []*OrderSummary `json:"Key"`

	// value
	// Read Only: true
	Value string `json:"Value,omitempty"`
}

// Validate validates this key value pair list order summary string
func (m *KeyValuePairListOrderSummaryString) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyValuePairListOrderSummaryString) validateKey(formats strfmt.Registry) error {
	if swag.IsZero(m.Key) { // not required
		return nil
	}

	for i := 0; i < len(m.Key); i++ {
		if swag.IsZero(m.Key[i]) { // not required
			continue
		}

		if m.Key[i] != nil {
			if err := m.Key[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Key" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Key" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this key value pair list order summary string based on the context it is used
func (m *KeyValuePairListOrderSummaryString) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyValuePairListOrderSummaryString) contextValidateKey(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Key", "body", m.Key); err != nil {
		return err
	}

	for i := 0; i < len(m.Key); i++ {

		if m.Key[i] != nil {

			if swag.IsZero(m.Key[i]) { // not required
				return nil
			}

			if err := m.Key[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Key" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Key" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *KeyValuePairListOrderSummaryString) contextValidateValue(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KeyValuePairListOrderSummaryString) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyValuePairListOrderSummaryString) UnmarshalBinary(b []byte) error {
	var res KeyValuePairListOrderSummaryString
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
