// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrdersGetOpenOrdersRequest orders get open orders request
//
// swagger:model Orders_GetOpenOrdersRequest
type OrdersGetOpenOrdersRequest struct {

	// Additional filter
	AdditionalFilter string `json:"additionalFilter,omitempty"`

	// Entries per page
	EntriesPerPage int32 `json:"entriesPerPage,omitempty"`

	// Filters to apply
	Filters *FieldsFilter `json:"filters,omitempty"`

	// Location to get the orders for
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FulfilmentCenter strfmt.UUID `json:"fulfilmentCenter,omitempty"`

	// Page number
	PageNumber int32 `json:"pageNumber,omitempty"`

	// Sorting to apply
	Sorting []*FieldSorting `json:"sorting"`
}

// Validate validates this orders get open orders request
func (m *OrdersGetOpenOrdersRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfilmentCenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSorting(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrdersGetOpenOrdersRequest) validateFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.Filters) { // not required
		return nil
	}

	if m.Filters != nil {
		if err := m.Filters.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("filters")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("filters")
			}

			return err
		}
	}

	return nil
}

func (m *OrdersGetOpenOrdersRequest) validateFulfilmentCenter(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfilmentCenter) { // not required
		return nil
	}

	if err := validate.FormatOf("fulfilmentCenter", "body", "uuid", m.FulfilmentCenter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrdersGetOpenOrdersRequest) validateSorting(formats strfmt.Registry) error {
	if swag.IsZero(m.Sorting) { // not required
		return nil
	}

	for i := 0; i < len(m.Sorting); i++ {
		if swag.IsZero(m.Sorting[i]) { // not required
			continue
		}

		if m.Sorting[i] != nil {
			if err := m.Sorting[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("sorting" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("sorting" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this orders get open orders request based on the context it is used
func (m *OrdersGetOpenOrdersRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSorting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrdersGetOpenOrdersRequest) contextValidateFilters(ctx context.Context, formats strfmt.Registry) error {

	if m.Filters != nil {

		if swag.IsZero(m.Filters) { // not required
			return nil
		}

		if err := m.Filters.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("filters")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("filters")
			}

			return err
		}
	}

	return nil
}

func (m *OrdersGetOpenOrdersRequest) contextValidateSorting(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sorting); i++ {

		if m.Sorting[i] != nil {

			if swag.IsZero(m.Sorting[i]) { // not required
				return nil
			}

			if err := m.Sorting[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("sorting" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("sorting" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrdersGetOpenOrdersRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrdersGetOpenOrdersRequest) UnmarshalBinary(b []byte) error {
	var res OrdersGetOpenOrdersRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
