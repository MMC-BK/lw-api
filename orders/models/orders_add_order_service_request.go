// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrdersAddOrderServiceRequest orders add order service request
//
// swagger:model Orders_AddOrderServiceRequest
type OrdersAddOrderServiceRequest struct {

	// Holds the datetime that the service was added to the order
	// Format: date-time
	AddedDate strfmt.DateTime `json:"AddedDate,omitempty"`

	// Price Per Unit of each service item
	Cost float64 `json:"Cost,omitempty"`

	// Discount percentage applied to the service item. Optional, defaults to 0.
	DiscountPercentage float64 `json:"DiscountPercentage,omitempty"`

	// Current fulfilment center
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FulfilmentCenter strfmt.UUID `json:"FulfilmentCenter,omitempty"`

	// Order id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	OrderID strfmt.UUID `json:"OrderId,omitempty"`

	// Quantity of the service item. Optional, defaults to 1.
	Quantity int32 `json:"Quantity,omitempty"`

	// Service
	Service string `json:"Service,omitempty"`

	// Tax rate. Optional, defaults to 0.
	TaxRate float64 `json:"TaxRate,omitempty"`
}

// Validate validates this orders add order service request
func (m *OrdersAddOrderServiceRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfilmentCenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrdersAddOrderServiceRequest) validateAddedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.AddedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("AddedDate", "body", "date-time", m.AddedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrdersAddOrderServiceRequest) validateFulfilmentCenter(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfilmentCenter) { // not required
		return nil
	}

	if err := validate.FormatOf("FulfilmentCenter", "body", "uuid", m.FulfilmentCenter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrdersAddOrderServiceRequest) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderId", "body", "uuid", m.OrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this orders add order service request based on context it is used
func (m *OrdersAddOrderServiceRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrdersAddOrderServiceRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrdersAddOrderServiceRequest) UnmarshalBinary(b []byte) error {
	var res OrdersAddOrderServiceRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
