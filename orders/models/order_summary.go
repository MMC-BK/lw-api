// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderSummary order summary
//
// swagger:model OrderSummary
type OrderSummary struct {

	// Customer name
	CustomerName string `json:"CustomerName,omitempty"`

	// Order location ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FulfillmentLocationID strfmt.UUID `json:"FulfillmentLocationId,omitempty"`

	// Linnworks order number
	NumOrderID int32 `json:"NumOrderId,omitempty"`

	// Quantity of products on an Order
	NumProducts int32 `json:"NumProducts,omitempty"`

	// Order ID (pkOrderId)
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	OrderID strfmt.UUID `json:"OrderId,omitempty"`

	// Date when order was processed
	// Format: date-time
	ProcessDate strfmt.DateTime `json:"ProcessDate,omitempty"`

	// Date when order was received on a channel
	// Format: date-time
	ReceivedDate strfmt.DateTime `json:"ReceivedDate,omitempty"`

	// Channel name / source (e.g. EBAY)
	Source string `json:"Source,omitempty"`
}

// Validate validates this order summary
func (m *OrderSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFulfillmentLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderSummary) validateFulfillmentLocationID(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfillmentLocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("FulfillmentLocationId", "body", "uuid", m.FulfillmentLocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderSummary) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderId", "body", "uuid", m.OrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderSummary) validateProcessDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ProcessDate", "body", "date-time", m.ProcessDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderSummary) validateReceivedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ReceivedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ReceivedDate", "body", "date-time", m.ReceivedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this order summary based on context it is used
func (m *OrderSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrderSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderSummary) UnmarshalBinary(b []byte) error {
	var res OrderSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
