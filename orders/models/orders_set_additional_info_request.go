// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrdersSetAdditionalInfoRequest orders set additional info request
//
// swagger:model Orders_SetAdditionalInfoRequest
type OrdersSetAdditionalInfoRequest struct {

	// Additional info to set
	AdditionalInfo []*OrderItemOption `json:"additionalInfo"`

	// Order id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	OrderID strfmt.UUID `json:"orderId,omitempty"`

	// Item row id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	RowID strfmt.UUID `json:"rowId,omitempty"`
}

// Validate validates this orders set additional info request
func (m *OrdersSetAdditionalInfoRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRowID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrdersSetAdditionalInfoRequest) validateAdditionalInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalInfo); i++ {
		if swag.IsZero(m.AdditionalInfo[i]) { // not required
			continue
		}

		if m.AdditionalInfo[i] != nil {
			if err := m.AdditionalInfo[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("additionalInfo" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("additionalInfo" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrdersSetAdditionalInfoRequest) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("orderId", "body", "uuid", m.OrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrdersSetAdditionalInfoRequest) validateRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.RowID) { // not required
		return nil
	}

	if err := validate.FormatOf("rowId", "body", "uuid", m.RowID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this orders set additional info request based on the context it is used
func (m *OrdersSetAdditionalInfoRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrdersSetAdditionalInfoRequest) contextValidateAdditionalInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdditionalInfo); i++ {

		if m.AdditionalInfo[i] != nil {

			if swag.IsZero(m.AdditionalInfo[i]) { // not required
				return nil
			}

			if err := m.AdditionalInfo[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("additionalInfo" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("additionalInfo" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrdersSetAdditionalInfoRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrdersSetAdditionalInfoRequest) UnmarshalBinary(b []byte) error {
	var res OrdersSetAdditionalInfoRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
