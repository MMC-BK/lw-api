// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrdersSplitOrderRequest orders split order request
//
// swagger:model Orders_SplitOrderRequest
type OrdersSplitOrderRequest struct {

	// Optional, if provided the fulfillment status for the newly created orders will be set to this
	// Enum: ["Unassigned","Assigned","Submitted","Accepted"]
	FulfillmentStatus string `json:"fulfillmentStatus,omitempty"`

	// Current fulfilment center
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FulfilmentLocationID strfmt.UUID `json:"fulfilmentLocationId,omitempty"`

	// New orders
	NewOrders []*OrderSplit `json:"newOrders"`

	// Order id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	OrderID strfmt.UUID `json:"orderId,omitempty"`

	// Whether or not to recalculate the order packaging
	RecalcPackaging bool `json:"recalcPackaging,omitempty"`

	// Split type
	Type string `json:"type,omitempty"`
}

// Validate validates this orders split order request
func (m *OrdersSplitOrderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFulfillmentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfilmentLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewOrders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ordersSplitOrderRequestTypeFulfillmentStatusPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unassigned","Assigned","Submitted","Accepted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ordersSplitOrderRequestTypeFulfillmentStatusPropEnum = append(ordersSplitOrderRequestTypeFulfillmentStatusPropEnum, v)
	}
}

const (

	// OrdersSplitOrderRequestFulfillmentStatusUnassigned captures enum value "Unassigned"
	OrdersSplitOrderRequestFulfillmentStatusUnassigned string = "Unassigned"

	// OrdersSplitOrderRequestFulfillmentStatusAssigned captures enum value "Assigned"
	OrdersSplitOrderRequestFulfillmentStatusAssigned string = "Assigned"

	// OrdersSplitOrderRequestFulfillmentStatusSubmitted captures enum value "Submitted"
	OrdersSplitOrderRequestFulfillmentStatusSubmitted string = "Submitted"

	// OrdersSplitOrderRequestFulfillmentStatusAccepted captures enum value "Accepted"
	OrdersSplitOrderRequestFulfillmentStatusAccepted string = "Accepted"
)

// prop value enum
func (m *OrdersSplitOrderRequest) validateFulfillmentStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ordersSplitOrderRequestTypeFulfillmentStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrdersSplitOrderRequest) validateFulfillmentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfillmentStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateFulfillmentStatusEnum("fulfillmentStatus", "body", m.FulfillmentStatus); err != nil {
		return err
	}

	return nil
}

func (m *OrdersSplitOrderRequest) validateFulfilmentLocationID(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfilmentLocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("fulfilmentLocationId", "body", "uuid", m.FulfilmentLocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrdersSplitOrderRequest) validateNewOrders(formats strfmt.Registry) error {
	if swag.IsZero(m.NewOrders) { // not required
		return nil
	}

	for i := 0; i < len(m.NewOrders); i++ {
		if swag.IsZero(m.NewOrders[i]) { // not required
			continue
		}

		if m.NewOrders[i] != nil {
			if err := m.NewOrders[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("newOrders" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("newOrders" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrdersSplitOrderRequest) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("orderId", "body", "uuid", m.OrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this orders split order request based on the context it is used
func (m *OrdersSplitOrderRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNewOrders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrdersSplitOrderRequest) contextValidateNewOrders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NewOrders); i++ {

		if m.NewOrders[i] != nil {

			if swag.IsZero(m.NewOrders[i]) { // not required
				return nil
			}

			if err := m.NewOrders[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("newOrders" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("newOrders" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrdersSplitOrderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrdersSplitOrderRequest) UnmarshalBinary(b []byte) error {
	var res OrdersSplitOrderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
