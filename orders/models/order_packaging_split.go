// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderPackagingSplit order packaging split
//
// swagger:model OrderPackagingSplit
type OrderPackagingSplit struct {

	// Depth
	Depth float64 `json:"Depth,omitempty"`

	// Height
	Height float64 `json:"Height,omitempty"`

	// List of items
	Items []*OrderPackagingSplitItem `json:"Items"`

	// Order packaging weight
	PackagingWeight float64 `json:"PackagingWeight,omitempty"`

	// Total weight
	TotalWeight float64 `json:"TotalWeight,omitempty"`

	// Tracking number
	// Read Only: true
	TrackingNumbers string `json:"TrackingNumbers,omitempty"`

	// Width
	Width float64 `json:"Width,omitempty"`

	// Order packaging type
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkPackagingTypeID strfmt.UUID `json:"fkPackagingTypeId,omitempty"`

	// Bin ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkBinID strfmt.UUID `json:"pkBinId,omitempty"`

	// Postal service ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkPostalServiceID strfmt.UUID `json:"pkPostalServiceId,omitempty"`
}

// Validate validates this order packaging split
func (m *OrderPackagingSplit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkPackagingTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkBinID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkPostalServiceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderPackagingSplit) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Items" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Items" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderPackagingSplit) validateFkPackagingTypeID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkPackagingTypeID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkPackagingTypeId", "body", "uuid", m.FkPackagingTypeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderPackagingSplit) validatePkBinID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkBinID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkBinId", "body", "uuid", m.PkBinID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderPackagingSplit) validatePkPostalServiceID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkPostalServiceID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkPostalServiceId", "body", "uuid", m.PkPostalServiceID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order packaging split based on the context it is used
func (m *OrderPackagingSplit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrackingNumbers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderPackagingSplit) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {

			if swag.IsZero(m.Items[i]) { // not required
				return nil
			}

			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Items" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Items" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderPackagingSplit) contextValidateTrackingNumbers(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "TrackingNumbers", "body", m.TrackingNumbers); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderPackagingSplit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderPackagingSplit) UnmarshalBinary(b []byte) error {
	var res OrderPackagingSplit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
