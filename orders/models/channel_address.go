// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChannelAddress channel address
//
// swagger:model ChannelAddress
type ChannelAddress struct {

	// 1st line of address
	Address1 string `json:"Address1,omitempty"`

	// 2nd line of address
	Address2 string `json:"Address2,omitempty"`

	// 3rd line of address
	Address3 string `json:"Address3,omitempty"`

	// Customer's company name
	Company string `json:"Company,omitempty"`

	// Country
	Country string `json:"Country,omitempty"`

	// Customer's email address
	EmailAddress string `json:"EmailAddress,omitempty"`

	// Customer name
	FullName string `json:"FullName,omitempty"`

	// match country code
	MatchCountryCode string `json:"MatchCountryCode,omitempty"`

	// match country name
	MatchCountryName string `json:"MatchCountryName,omitempty"`

	// Customer's phone number
	PhoneNumber string `json:"PhoneNumber,omitempty"`

	// Postcode
	PostCode string `json:"PostCode,omitempty"`

	// Region, County, Area
	Region string `json:"Region,omitempty"`

	// Town
	Town string `json:"Town,omitempty"`

	// Check if the address is empty.
	// Read Only: true
	IsEmpty *bool `json:"isEmpty,omitempty"`
}

// Validate validates this channel address
func (m *ChannelAddress) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this channel address based on the context it is used
func (m *ChannelAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIsEmpty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelAddress) contextValidateIsEmpty(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isEmpty", "body", m.IsEmpty); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChannelAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelAddress) UnmarshalBinary(b []byte) error {
	var res ChannelAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
