// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderItem Order item object
//
// swagger:model OrderItem
type OrderItem struct {

	// added date
	// Format: date-time
	AddedDate strfmt.DateTime `json:"AddedDate,omitempty"`

	// List of order item options
	AdditionalInfo []*OrderItemOption `json:"AdditionalInfo"`

	// Currently available stock level (Level-InOrderBook)
	AvailableStock int32 `json:"AvailableStock,omitempty"`

	// Product barcode
	BarcodeNumber string `json:"BarcodeNumber,omitempty"`

	// ItemName
	BatchNumberScanRequired bool `json:"BatchNumberScanRequired,omitempty"`

	// Binrack location
	BinRack string `json:"BinRack,omitempty"`

	// List of BinRacks used for OrderItem
	BinRacks []*OrderItemBinRack `json:"BinRacks"`

	// boxes
	Boxes []*StockItemBoxConfiguration `json:"Boxes"`

	// Product category
	CategoryName string `json:"CategoryName,omitempty"`

	// Channel product SKU
	ChannelSKU string `json:"ChannelSKU,omitempty"`

	// Channel product title
	ChannelTitle string `json:"ChannelTitle,omitempty"`

	// Composite availability
	CompositeAvailablity int32 `json:"CompositeAvailablity,omitempty"`

	// List of order items
	CompositeSubItems []*OrderItem `json:"CompositeSubItems"`

	// Total item cost (exc tax)
	Cost float64 `json:"Cost,omitempty"`

	// Total item cost (inc tax)
	CostIncTax float64 `json:"CostIncTax,omitempty"`

	// Despatch stock unit cost
	DespatchStockUnitCost float64 `json:"DespatchStockUnitCost,omitempty"`

	// Percentage (0%, 10%, 20%, etc...)
	Discount float64 `json:"Discount,omitempty"`

	// discount value
	// Read Only: true
	DiscountValue float64 `json:"DiscountValue,omitempty"`

	// If item got an image
	// Read Only: true
	HasImage *bool `json:"HasImage,omitempty"`

	// Image ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	ImageID strfmt.UUID `json:"ImageId,omitempty"`

	// Quantity currently in open orders
	InOrderBook int32 `json:"InOrderBook,omitempty"`

	// Identifies whether the item has a sell by date or other defined order in which inventory is to be sold
	InventoryTrackingType int32 `json:"InventoryTrackingType,omitempty"`

	// if item is a service
	IsService bool `json:"IsService,omitempty"`

	// is unlinked
	// Read Only: true
	IsUnlinked *bool `json:"IsUnlinked,omitempty"`

	// is warehouse managed
	IsWarehouseManaged bool `json:"IsWarehouseManaged,omitempty"`

	// Stock Item ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	ItemID strfmt.UUID `json:"ItemId,omitempty"`

	// PartShippedQty
	ItemName string `json:"ItemName,omitempty"`

	// Item number as on channel
	ItemNumber string `json:"ItemNumber,omitempty"`

	// Item source / channel name
	ItemSource string `json:"ItemSource,omitempty"`

	// Current stock level
	Level int32 `json:"Level,omitempty"`

	// Market
	Market int32 `json:"Market,omitempty"`

	// Minimum level
	MinimumLevel int32 `json:"MinimumLevel,omitempty"`

	// Level due in purchase orders
	OnOrder int32 `json:"OnOrder,omitempty"`

	// Purchase order bound to this item
	OnPurchaseOrder *OrderItemOnOrder `json:"OnPurchaseOrder,omitempty"`

	// Order ID (pkOrderID)
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	OrderID strfmt.UUID `json:"OrderId,omitempty"`

	// If order is partly shipped
	PartShipped bool `json:"PartShipped,omitempty"`

	// ShippingCost
	PartShippedQty int32 `json:"PartShippedQty,omitempty"`

	// Unit price
	PricePerUnit float64 `json:"PricePerUnit,omitempty"`

	// Quantity
	Quantity int32 `json:"Quantity,omitempty"`

	// Record row ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	RowID strfmt.UUID `json:"RowId,omitempty"`

	// Product SKU
	SKU string `json:"SKU,omitempty"`

	// Sales Tax
	SalesTax float64 `json:"SalesTax,omitempty"`

	// If serial number scan required
	SerialNumberScanRequired bool `json:"SerialNumberScanRequired,omitempty"`

	// If batch number scan required
	ShippingCost float64 `json:"ShippingCost,omitempty"`

	// Stock Item ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockItemID strfmt.UUID `json:"StockItemId,omitempty"`

	// stock item int Id
	StockItemIntID int32 `json:"StockItemIntId,omitempty"`

	// Stock level indicator
	StockLevelIndicator int32 `json:"StockLevelIndicator,omitempty"`

	// If stock level specified
	StockLevelsSpecified bool `json:"StockLevelsSpecified,omitempty"`

	// Actual tax value on an item
	// Read Only: true
	Tax float64 `json:"Tax,omitempty"`

	// If tax is included in a cost
	TaxCostInclusive bool `json:"TaxCostInclusive,omitempty"`

	// Tax rate
	TaxRate float64 `json:"TaxRate,omitempty"`

	// Item title
	Title string `json:"Title,omitempty"`

	// Unit cost
	UnitCost float64 `json:"UnitCost,omitempty"`

	// Order weight
	Weight float64 `json:"Weight,omitempty"`

	// If item has batches
	// Read Only: true
	IsBatchedStockItem *bool `json:"isBatchedStockItem,omitempty"`
}

// Validate validates this order item
func (m *OrderItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdditionalInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBinRacks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBoxes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompositeSubItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnPurchaseOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRowID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItem) validateAddedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.AddedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("AddedDate", "body", "date-time", m.AddedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) validateAdditionalInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalInfo); i++ {
		if swag.IsZero(m.AdditionalInfo[i]) { // not required
			continue
		}

		if m.AdditionalInfo[i] != nil {
			if err := m.AdditionalInfo[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("AdditionalInfo" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("AdditionalInfo" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderItem) validateBinRacks(formats strfmt.Registry) error {
	if swag.IsZero(m.BinRacks) { // not required
		return nil
	}

	for i := 0; i < len(m.BinRacks); i++ {
		if swag.IsZero(m.BinRacks[i]) { // not required
			continue
		}

		if m.BinRacks[i] != nil {
			if err := m.BinRacks[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("BinRacks" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("BinRacks" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderItem) validateBoxes(formats strfmt.Registry) error {
	if swag.IsZero(m.Boxes) { // not required
		return nil
	}

	for i := 0; i < len(m.Boxes); i++ {
		if swag.IsZero(m.Boxes[i]) { // not required
			continue
		}

		if m.Boxes[i] != nil {
			if err := m.Boxes[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Boxes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Boxes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderItem) validateCompositeSubItems(formats strfmt.Registry) error {
	if swag.IsZero(m.CompositeSubItems) { // not required
		return nil
	}

	for i := 0; i < len(m.CompositeSubItems); i++ {
		if swag.IsZero(m.CompositeSubItems[i]) { // not required
			continue
		}

		if m.CompositeSubItems[i] != nil {
			if err := m.CompositeSubItems[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("CompositeSubItems" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("CompositeSubItems" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderItem) validateImageID(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageID) { // not required
		return nil
	}

	if err := validate.FormatOf("ImageId", "body", "uuid", m.ImageID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) validateItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("ItemId", "body", "uuid", m.ItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) validateOnPurchaseOrder(formats strfmt.Registry) error {
	if swag.IsZero(m.OnPurchaseOrder) { // not required
		return nil
	}

	if m.OnPurchaseOrder != nil {
		if err := m.OnPurchaseOrder.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("OnPurchaseOrder")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("OnPurchaseOrder")
			}

			return err
		}
	}

	return nil
}

func (m *OrderItem) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderId", "body", "uuid", m.OrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) validateRowID(formats strfmt.Registry) error {
	if swag.IsZero(m.RowID) { // not required
		return nil
	}

	if err := validate.FormatOf("RowId", "body", "uuid", m.RowID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) validateStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockItemId", "body", "uuid", m.StockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order item based on the context it is used
func (m *OrderItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBinRacks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBoxes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCompositeSubItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiscountValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHasImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsUnlinked(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnPurchaseOrder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTax(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsBatchedStockItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItem) contextValidateAdditionalInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdditionalInfo); i++ {

		if m.AdditionalInfo[i] != nil {

			if swag.IsZero(m.AdditionalInfo[i]) { // not required
				return nil
			}

			if err := m.AdditionalInfo[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("AdditionalInfo" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("AdditionalInfo" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderItem) contextValidateBinRacks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BinRacks); i++ {

		if m.BinRacks[i] != nil {

			if swag.IsZero(m.BinRacks[i]) { // not required
				return nil
			}

			if err := m.BinRacks[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("BinRacks" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("BinRacks" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderItem) contextValidateBoxes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Boxes); i++ {

		if m.Boxes[i] != nil {

			if swag.IsZero(m.Boxes[i]) { // not required
				return nil
			}

			if err := m.Boxes[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Boxes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Boxes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderItem) contextValidateCompositeSubItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CompositeSubItems); i++ {

		if m.CompositeSubItems[i] != nil {

			if swag.IsZero(m.CompositeSubItems[i]) { // not required
				return nil
			}

			if err := m.CompositeSubItems[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("CompositeSubItems" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("CompositeSubItems" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *OrderItem) contextValidateDiscountValue(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "DiscountValue", "body", m.DiscountValue); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) contextValidateHasImage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "HasImage", "body", m.HasImage); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) contextValidateIsUnlinked(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "IsUnlinked", "body", m.IsUnlinked); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) contextValidateOnPurchaseOrder(ctx context.Context, formats strfmt.Registry) error {

	if m.OnPurchaseOrder != nil {

		if swag.IsZero(m.OnPurchaseOrder) { // not required
			return nil
		}

		if err := m.OnPurchaseOrder.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("OnPurchaseOrder")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("OnPurchaseOrder")
			}

			return err
		}
	}

	return nil
}

func (m *OrderItem) contextValidateTax(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "Tax", "body", m.Tax); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) contextValidateIsBatchedStockItem(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isBatchedStockItem", "body", m.IsBatchedStockItem); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItem) UnmarshalBinary(b []byte) error {
	var res OrderItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
