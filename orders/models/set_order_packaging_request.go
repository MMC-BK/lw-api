// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SetOrderPackagingRequest Request class for SetOrderPackaging method in Orders controller
//
// swagger:model SetOrderPackagingRequest
type SetOrderPackagingRequest struct {

	// Indicates whether the order should be auto split. Usually via the 3D packaging methods.
	IsAutoSplit bool `json:"IsAutoSplit,omitempty"`

	// Indicate if this data is manually adjusted with the rest of fields or is auto calculated
	ManualAdjust bool `json:"ManualAdjust,omitempty"`

	// Total packaging depth
	TotalDepth float64 `json:"TotalDepth,omitempty"`

	// Total Height
	TotalHeight float64 `json:"TotalHeight,omitempty"`

	// Total weight of order packaging
	TotalWeight float64 `json:"TotalWeight,omitempty"`

	// Total Width
	TotalWidth float64 `json:"TotalWidth,omitempty"`

	// Packaging group Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkPackagingGroupID strfmt.UUID `json:"fkPackagingGroupId,omitempty"`

	// Packaging Type Id. It has to be one of types available for selected Group Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	FkPackagingTypeID strfmt.UUID `json:"fkPackagingTypeId,omitempty"`

	// Order Id to set the order packaging data
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkOrderID strfmt.UUID `json:"pkOrderId,omitempty"`
}

// Validate validates this set order packaging request
func (m *SetOrderPackagingRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFkPackagingGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFkPackagingTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkOrderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetOrderPackagingRequest) validateFkPackagingGroupID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkPackagingGroupID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkPackagingGroupId", "body", "uuid", m.FkPackagingGroupID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SetOrderPackagingRequest) validateFkPackagingTypeID(formats strfmt.Registry) error {
	if swag.IsZero(m.FkPackagingTypeID) { // not required
		return nil
	}

	if err := validate.FormatOf("fkPackagingTypeId", "body", "uuid", m.FkPackagingTypeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SetOrderPackagingRequest) validatePkOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkOrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkOrderId", "body", "uuid", m.PkOrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this set order packaging request based on context it is used
func (m *SetOrderPackagingRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SetOrderPackagingRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetOrderPackagingRequest) UnmarshalBinary(b []byte) error {
	var res SetOrderPackagingRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
