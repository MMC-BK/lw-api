// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemBatch stock item batch
//
// swagger:model StockItemBatch
type StockItemBatch struct {

	// Batch ID
	BatchID int32 `json:"BatchId,omitempty"`

	// Batch number
	BatchNumber string `json:"BatchNumber,omitempty"`

	// Batch expiry date
	// Format: date-time
	ExpiresOn strfmt.DateTime `json:"ExpiresOn,omitempty"`

	// Batch records
	Inventory []*StockItemBatchInventory `json:"Inventory"`

	// 0 - None, 1 - Order by sell by date, 2 - Ordered by priority sequence
	InventoryTrackingType int32 `json:"InventoryTrackingType,omitempty"`

	// Is the batch deleted
	IsDeleted bool `json:"IsDeleted,omitempty"`

	// Product SKU
	SKU string `json:"SKU,omitempty"`

	// Batch sell by date
	// Format: date-time
	SellBy strfmt.DateTime `json:"SellBy,omitempty"`

	// Product ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	StockItemID strfmt.UUID `json:"StockItemId,omitempty"`
}

// Validate validates this stock item batch
func (m *StockItemBatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiresOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemBatch) validateExpiresOn(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiresOn) { // not required
		return nil
	}

	if err := validate.FormatOf("ExpiresOn", "body", "date-time", m.ExpiresOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemBatch) validateInventory(formats strfmt.Registry) error {
	if swag.IsZero(m.Inventory) { // not required
		return nil
	}

	for i := 0; i < len(m.Inventory); i++ {
		if swag.IsZero(m.Inventory[i]) { // not required
			continue
		}

		if m.Inventory[i] != nil {
			if err := m.Inventory[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Inventory" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Inventory" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *StockItemBatch) validateSellBy(formats strfmt.Registry) error {
	if swag.IsZero(m.SellBy) { // not required
		return nil
	}

	if err := validate.FormatOf("SellBy", "body", "date-time", m.SellBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockItemBatch) validateStockItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.StockItemID) { // not required
		return nil
	}

	if err := validate.FormatOf("StockItemId", "body", "uuid", m.StockItemID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this stock item batch based on the context it is used
func (m *StockItemBatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInventory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemBatch) contextValidateInventory(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Inventory); i++ {

		if m.Inventory[i] != nil {

			if swag.IsZero(m.Inventory[i]) { // not required
				return nil
			}

			if err := m.Inventory[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Inventory" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Inventory" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StockItemBatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemBatch) UnmarshalBinary(b []byte) error {
	var res StockItemBatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
