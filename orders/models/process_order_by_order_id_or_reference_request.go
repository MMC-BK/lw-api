// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessOrderByOrderIDOrReferenceRequest A request used to process an order by id or reference
//
// swagger:model ProcessOrderByOrderIdOrReferenceRequest
type ProcessOrderByOrderIDOrReferenceRequest struct {

	// The location to process the order from
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	LocationID strfmt.UUID `json:"LocationId,omitempty"`

	// The order id or reference id
	OrderOrReferenceID string `json:"OrderOrReferenceId,omitempty"`

	// Have the processing notes been acknowledged
	OrderProcessingNotesAcknowledged bool `json:"OrderProcessingNotesAcknowledged,omitempty"`

	// Defines if the batches have been scanned
	ScansPerformed bool `json:"ScansPerformed,omitempty"`

	// Workflow job id that the order is supposed to belong to
	WorkflowJobID int32 `json:"WorkflowJobId,omitempty"`
}

// Validate validates this process order by order Id or reference request
func (m *ProcessOrderByOrderIDOrReferenceRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessOrderByOrderIDOrReferenceRequest) validateLocationID(formats strfmt.Registry) error {
	if swag.IsZero(m.LocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("LocationId", "body", "uuid", m.LocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this process order by order Id or reference request based on context it is used
func (m *ProcessOrderByOrderIDOrReferenceRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProcessOrderByOrderIDOrReferenceRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessOrderByOrderIDOrReferenceRequest) UnmarshalBinary(b []byte) error {
	var res ProcessOrderByOrderIDOrReferenceRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
