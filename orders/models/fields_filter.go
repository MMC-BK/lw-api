// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FieldsFilter Fields filter
//
// swagger:model FieldsFilter
type FieldsFilter struct {

	// Boolean type field filters
	BooleanFields []*BooleanFieldFilter `json:"BooleanFields"`

	// Date type field filters
	DateFields []*DateFieldFilter `json:"DateFields"`

	// field visibility
	FieldVisibility []*FieldVisibility `json:"FieldVisibility"`

	// List type field filters
	ListFields []*ListFieldFilter `json:"ListFields"`

	// Numerical type field filters
	NumericFields []*NumericFieldFilter `json:"NumericFields"`

	// Text type field filters
	TextFields []*TextFieldFilter `json:"TextFields"`
}

// Validate validates this fields filter
func (m *FieldsFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBooleanFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldVisibility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumericFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTextFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FieldsFilter) validateBooleanFields(formats strfmt.Registry) error {
	if swag.IsZero(m.BooleanFields) { // not required
		return nil
	}

	for i := 0; i < len(m.BooleanFields); i++ {
		if swag.IsZero(m.BooleanFields[i]) { // not required
			continue
		}

		if m.BooleanFields[i] != nil {
			if err := m.BooleanFields[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("BooleanFields" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("BooleanFields" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *FieldsFilter) validateDateFields(formats strfmt.Registry) error {
	if swag.IsZero(m.DateFields) { // not required
		return nil
	}

	for i := 0; i < len(m.DateFields); i++ {
		if swag.IsZero(m.DateFields[i]) { // not required
			continue
		}

		if m.DateFields[i] != nil {
			if err := m.DateFields[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("DateFields" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("DateFields" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *FieldsFilter) validateFieldVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.FieldVisibility) { // not required
		return nil
	}

	for i := 0; i < len(m.FieldVisibility); i++ {
		if swag.IsZero(m.FieldVisibility[i]) { // not required
			continue
		}

		if m.FieldVisibility[i] != nil {
			if err := m.FieldVisibility[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("FieldVisibility" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("FieldVisibility" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *FieldsFilter) validateListFields(formats strfmt.Registry) error {
	if swag.IsZero(m.ListFields) { // not required
		return nil
	}

	for i := 0; i < len(m.ListFields); i++ {
		if swag.IsZero(m.ListFields[i]) { // not required
			continue
		}

		if m.ListFields[i] != nil {
			if err := m.ListFields[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ListFields" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ListFields" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *FieldsFilter) validateNumericFields(formats strfmt.Registry) error {
	if swag.IsZero(m.NumericFields) { // not required
		return nil
	}

	for i := 0; i < len(m.NumericFields); i++ {
		if swag.IsZero(m.NumericFields[i]) { // not required
			continue
		}

		if m.NumericFields[i] != nil {
			if err := m.NumericFields[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("NumericFields" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("NumericFields" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *FieldsFilter) validateTextFields(formats strfmt.Registry) error {
	if swag.IsZero(m.TextFields) { // not required
		return nil
	}

	for i := 0; i < len(m.TextFields); i++ {
		if swag.IsZero(m.TextFields[i]) { // not required
			continue
		}

		if m.TextFields[i] != nil {
			if err := m.TextFields[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("TextFields" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("TextFields" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this fields filter based on the context it is used
func (m *FieldsFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBooleanFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFieldVisibility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateListFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumericFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTextFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FieldsFilter) contextValidateBooleanFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BooleanFields); i++ {

		if m.BooleanFields[i] != nil {

			if swag.IsZero(m.BooleanFields[i]) { // not required
				return nil
			}

			if err := m.BooleanFields[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("BooleanFields" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("BooleanFields" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *FieldsFilter) contextValidateDateFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DateFields); i++ {

		if m.DateFields[i] != nil {

			if swag.IsZero(m.DateFields[i]) { // not required
				return nil
			}

			if err := m.DateFields[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("DateFields" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("DateFields" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *FieldsFilter) contextValidateFieldVisibility(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FieldVisibility); i++ {

		if m.FieldVisibility[i] != nil {

			if swag.IsZero(m.FieldVisibility[i]) { // not required
				return nil
			}

			if err := m.FieldVisibility[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("FieldVisibility" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("FieldVisibility" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *FieldsFilter) contextValidateListFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ListFields); i++ {

		if m.ListFields[i] != nil {

			if swag.IsZero(m.ListFields[i]) { // not required
				return nil
			}

			if err := m.ListFields[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ListFields" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ListFields" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *FieldsFilter) contextValidateNumericFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NumericFields); i++ {

		if m.NumericFields[i] != nil {

			if swag.IsZero(m.NumericFields[i]) { // not required
				return nil
			}

			if err := m.NumericFields[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("NumericFields" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("NumericFields" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *FieldsFilter) contextValidateTextFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TextFields); i++ {

		if m.TextFields[i] != nil {

			if swag.IsZero(m.TextFields[i]) { // not required
				return nil
			}

			if err := m.TextFields[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("TextFields" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("TextFields" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FieldsFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FieldsFilter) UnmarshalBinary(b []byte) error {
	var res FieldsFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
