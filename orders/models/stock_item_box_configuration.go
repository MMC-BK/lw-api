// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockItemBoxConfiguration Stock item box configuration, dimennsions
//
// swagger:model StockItemBoxConfiguration
type StockItemBoxConfiguration struct {

	// Box barcode, max 64 characters.
	Barcode string `json:"Barcode,omitempty"`

	// Unique box id.
	BoxID int32 `json:"BoxId,omitempty"`

	// Box name max 16 characters
	BoxName string `json:"BoxName,omitempty"`

	// Height of the box
	Height float64 `json:"Height,omitempty"`

	// Depth of the box
	Length float64 `json:"Length,omitempty"`

	// IsDeleted flag.
	LogicalDelete bool `json:"LogicalDelete,omitempty"`

	// Packaging type id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PackagingTypeID strfmt.UUID `json:"PackagingTypeId,omitempty"`

	// stock item int Id
	StockItemIntID int32 `json:"StockItemIntId,omitempty"`

	// Value break down percentage
	ValuePercentage float64 `json:"ValuePercentage,omitempty"`

	// Total weight of the box.
	Weight float64 `json:"Weight,omitempty"`

	// Width of the box
	Width float64 `json:"Width,omitempty"`
}

// Validate validates this stock item box configuration
func (m *StockItemBoxConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackagingTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockItemBoxConfiguration) validatePackagingTypeID(formats strfmt.Registry) error {
	if swag.IsZero(m.PackagingTypeID) { // not required
		return nil
	}

	if err := validate.FormatOf("PackagingTypeId", "body", "uuid", m.PackagingTypeID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stock item box configuration based on context it is used
func (m *StockItemBoxConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StockItemBoxConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockItemBoxConfiguration) UnmarshalBinary(b []byte) error {
	var res StockItemBoxConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
