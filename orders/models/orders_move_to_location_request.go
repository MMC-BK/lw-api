// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrdersMoveToLocationRequest orders move to location request
//
// swagger:model Orders_MoveToLocationRequest
type OrdersMoveToLocationRequest struct {

	// Optional fulfilment status to be applied to successfully moved orders
	// Enum: ["Unassigned","Assigned","Submitted","Accepted"]
	FulfillmentStatusToApply string `json:"fulfillmentStatusToApply,omitempty"`

	// Orders to be moved
	OrderIds []strfmt.UUID `json:"orderIds"`

	// Location where to move orders
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PkStockLocationID strfmt.UUID `json:"pkStockLocationId,omitempty"`
}

// Validate validates this orders move to location request
func (m *OrdersMoveToLocationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFulfillmentStatusToApply(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePkStockLocationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ordersMoveToLocationRequestTypeFulfillmentStatusToApplyPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unassigned","Assigned","Submitted","Accepted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ordersMoveToLocationRequestTypeFulfillmentStatusToApplyPropEnum = append(ordersMoveToLocationRequestTypeFulfillmentStatusToApplyPropEnum, v)
	}
}

const (

	// OrdersMoveToLocationRequestFulfillmentStatusToApplyUnassigned captures enum value "Unassigned"
	OrdersMoveToLocationRequestFulfillmentStatusToApplyUnassigned string = "Unassigned"

	// OrdersMoveToLocationRequestFulfillmentStatusToApplyAssigned captures enum value "Assigned"
	OrdersMoveToLocationRequestFulfillmentStatusToApplyAssigned string = "Assigned"

	// OrdersMoveToLocationRequestFulfillmentStatusToApplySubmitted captures enum value "Submitted"
	OrdersMoveToLocationRequestFulfillmentStatusToApplySubmitted string = "Submitted"

	// OrdersMoveToLocationRequestFulfillmentStatusToApplyAccepted captures enum value "Accepted"
	OrdersMoveToLocationRequestFulfillmentStatusToApplyAccepted string = "Accepted"
)

// prop value enum
func (m *OrdersMoveToLocationRequest) validateFulfillmentStatusToApplyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ordersMoveToLocationRequestTypeFulfillmentStatusToApplyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrdersMoveToLocationRequest) validateFulfillmentStatusToApply(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfillmentStatusToApply) { // not required
		return nil
	}

	// value enum
	if err := m.validateFulfillmentStatusToApplyEnum("fulfillmentStatusToApply", "body", m.FulfillmentStatusToApply); err != nil {
		return err
	}

	return nil
}

func (m *OrdersMoveToLocationRequest) validateOrderIds(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderIds) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderIds); i++ {

		if err := validate.FormatOf("orderIds"+"."+strconv.Itoa(i), "body", "uuid", m.OrderIds[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *OrdersMoveToLocationRequest) validatePkStockLocationID(formats strfmt.Registry) error {
	if swag.IsZero(m.PkStockLocationID) { // not required
		return nil
	}

	if err := validate.FormatOf("pkStockLocationId", "body", "uuid", m.PkStockLocationID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this orders move to location request based on context it is used
func (m *OrdersMoveToLocationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrdersMoveToLocationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrdersMoveToLocationRequest) UnmarshalBinary(b []byte) error {
	var res OrdersMoveToLocationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
