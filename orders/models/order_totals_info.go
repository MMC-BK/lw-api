// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderTotalsInfo order totals info
//
// swagger:model OrderTotalsInfo
type OrderTotalsInfo struct {

	// Currency conversion rate. Set at point of save by the currency
	ConversionRate float64 `json:"ConversionRate,omitempty"`

	// Country tax rate
	CountryTaxRate float64 `json:"CountryTaxRate,omitempty"`

	// Order currency
	Currency string `json:"Currency,omitempty"`

	// Payment method
	PaymentMethod string `json:"PaymentMethod,omitempty"`

	// Payment method ID
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	PaymentMethodID strfmt.UUID `json:"PaymentMethodId,omitempty"`

	// Order postage cost
	PostageCost float64 `json:"PostageCost,omitempty"`

	// Order postage cost ex. tax
	PostageCostExTax float64 `json:"PostageCostExTax,omitempty"`

	// Profit margin
	// Read Only: true
	ProfitMargin float64 `json:"ProfitMargin,omitempty"`

	// Order subtotal
	Subtotal float64 `json:"Subtotal,omitempty"`

	// Tax
	Tax float64 `json:"Tax,omitempty"`

	// Total charge
	TotalCharge float64 `json:"TotalCharge,omitempty"`

	// Total discount applied to the order
	TotalDiscount float64 `json:"TotalDiscount,omitempty"`
}

// Validate validates this order totals info
func (m *OrderTotalsInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaymentMethodID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderTotalsInfo) validatePaymentMethodID(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentMethodID) { // not required
		return nil
	}

	if err := validate.FormatOf("PaymentMethodId", "body", "uuid", m.PaymentMethodID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order totals info based on the context it is used
func (m *OrderTotalsInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProfitMargin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderTotalsInfo) contextValidateProfitMargin(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ProfitMargin", "body", m.ProfitMargin); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderTotalsInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderTotalsInfo) UnmarshalBinary(b []byte) error {
	var res OrderTotalsInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
