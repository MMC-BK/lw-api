// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerAddress customer address
//
// swagger:model CustomerAddress
type CustomerAddress struct {

	// First line of customer address.
	Address1 string `json:"Address1,omitempty"`

	// Second line of customer address.
	Address2 string `json:"Address2,omitempty"`

	// Third line of customer address.
	Address3 string `json:"Address3,omitempty"`

	// Customer's company name.
	Company string `json:"Company,omitempty"`

	// Customer's continent
	Continent string `json:"Continent,omitempty"`

	// Customer's country.
	Country string `json:"Country,omitempty"`

	// country Id
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	CountryID strfmt.UUID `json:"CountryId,omitempty"`

	// Customer's email address.
	EmailAddress string `json:"EmailAddress,omitempty"`

	// Customer's first and second name.
	FullName string `json:"FullName,omitempty"`

	// Customer's telephone number.
	PhoneNumber string `json:"PhoneNumber,omitempty"`

	// Customer's postcode.
	PostCode string `json:"PostCode,omitempty"`

	// Customer's region.
	Region string `json:"Region,omitempty"`

	// Customer's town.
	Town string `json:"Town,omitempty"`
}

// Validate validates this customer address
func (m *CustomerAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountryID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerAddress) validateCountryID(formats strfmt.Registry) error {
	if swag.IsZero(m.CountryID) { // not required
		return nil
	}

	if err := validate.FormatOf("CountryId", "body", "uuid", m.CountryID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this customer address based on context it is used
func (m *CustomerAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerAddress) UnmarshalBinary(b []byte) error {
	var res CustomerAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
