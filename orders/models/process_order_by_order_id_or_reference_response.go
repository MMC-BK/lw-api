// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessOrderByOrderIDOrReferenceResponse A response class used when processing an order by order id or reference
//
// swagger:model ProcessOrderByOrderIdOrReferenceResponse
type ProcessOrderByOrderIDOrReferenceResponse struct {

	// The batched items
	BatchInformation []*StockItemBatch `json:"BatchInformation"`

	// The items that need to be scanned - If any
	Items []*OrderItem `json:"Items"`

	// A message - Provided if there have been errors
	Message string `json:"Message,omitempty"`

	// The ID of the order - Guid empty if not found
	// Example: 00000000-0000-0000-0000-000000000000
	// Format: uuid
	OrderID strfmt.UUID `json:"OrderId,omitempty"`

	// Used when an order has been processed
	OrderSummary *OrderSummary `json:"OrderSummary,omitempty"`

	// The processed state
	// Enum: ["PROCESSED","NOT_FOUND","SCAN_REQUIRED","NOT_PROCESSED","NOTE_ACKNOWLEDGEMENT_REQUIRED","NOT_IN_WORKFLOW"]
	ProcessedState string `json:"ProcessedState,omitempty"`

	// A response object used if further action is required
	Response any `json:"Response,omitempty"`
}

// Validate validates this process order by order Id or reference response
func (m *ProcessOrderByOrderIDOrReferenceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatchInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessedState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessOrderByOrderIDOrReferenceResponse) validateBatchInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchInformation) { // not required
		return nil
	}

	for i := 0; i < len(m.BatchInformation); i++ {
		if swag.IsZero(m.BatchInformation[i]) { // not required
			continue
		}

		if m.BatchInformation[i] != nil {
			if err := m.BatchInformation[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("BatchInformation" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("BatchInformation" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ProcessOrderByOrderIDOrReferenceResponse) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Items" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Items" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ProcessOrderByOrderIDOrReferenceResponse) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderId", "body", "uuid", m.OrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProcessOrderByOrderIDOrReferenceResponse) validateOrderSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderSummary) { // not required
		return nil
	}

	if m.OrderSummary != nil {
		if err := m.OrderSummary.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("OrderSummary")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("OrderSummary")
			}

			return err
		}
	}

	return nil
}

var processOrderByOrderIdOrReferenceResponseTypeProcessedStatePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROCESSED","NOT_FOUND","SCAN_REQUIRED","NOT_PROCESSED","NOTE_ACKNOWLEDGEMENT_REQUIRED","NOT_IN_WORKFLOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		processOrderByOrderIdOrReferenceResponseTypeProcessedStatePropEnum = append(processOrderByOrderIdOrReferenceResponseTypeProcessedStatePropEnum, v)
	}
}

const (

	// ProcessOrderByOrderIDOrReferenceResponseProcessedStatePROCESSED captures enum value "PROCESSED"
	ProcessOrderByOrderIDOrReferenceResponseProcessedStatePROCESSED string = "PROCESSED"

	// ProcessOrderByOrderIDOrReferenceResponseProcessedStateNOTFOUND captures enum value "NOT_FOUND"
	ProcessOrderByOrderIDOrReferenceResponseProcessedStateNOTFOUND string = "NOT_FOUND"

	// ProcessOrderByOrderIDOrReferenceResponseProcessedStateSCANREQUIRED captures enum value "SCAN_REQUIRED"
	ProcessOrderByOrderIDOrReferenceResponseProcessedStateSCANREQUIRED string = "SCAN_REQUIRED"

	// ProcessOrderByOrderIDOrReferenceResponseProcessedStateNOTPROCESSED captures enum value "NOT_PROCESSED"
	ProcessOrderByOrderIDOrReferenceResponseProcessedStateNOTPROCESSED string = "NOT_PROCESSED"

	// ProcessOrderByOrderIDOrReferenceResponseProcessedStateNOTEACKNOWLEDGEMENTREQUIRED captures enum value "NOTE_ACKNOWLEDGEMENT_REQUIRED"
	ProcessOrderByOrderIDOrReferenceResponseProcessedStateNOTEACKNOWLEDGEMENTREQUIRED string = "NOTE_ACKNOWLEDGEMENT_REQUIRED"

	// ProcessOrderByOrderIDOrReferenceResponseProcessedStateNOTINWORKFLOW captures enum value "NOT_IN_WORKFLOW"
	ProcessOrderByOrderIDOrReferenceResponseProcessedStateNOTINWORKFLOW string = "NOT_IN_WORKFLOW"
)

// prop value enum
func (m *ProcessOrderByOrderIDOrReferenceResponse) validateProcessedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, processOrderByOrderIdOrReferenceResponseTypeProcessedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProcessOrderByOrderIDOrReferenceResponse) validateProcessedState(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessedState) { // not required
		return nil
	}

	// value enum
	if err := m.validateProcessedStateEnum("ProcessedState", "body", m.ProcessedState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this process order by order Id or reference response based on the context it is used
func (m *ProcessOrderByOrderIDOrReferenceResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBatchInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessOrderByOrderIDOrReferenceResponse) contextValidateBatchInformation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BatchInformation); i++ {

		if m.BatchInformation[i] != nil {

			if swag.IsZero(m.BatchInformation[i]) { // not required
				return nil
			}

			if err := m.BatchInformation[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("BatchInformation" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("BatchInformation" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ProcessOrderByOrderIDOrReferenceResponse) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {

			if swag.IsZero(m.Items[i]) { // not required
				return nil
			}

			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("Items" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("Items" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ProcessOrderByOrderIDOrReferenceResponse) contextValidateOrderSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderSummary != nil {

		if swag.IsZero(m.OrderSummary) { // not required
			return nil
		}

		if err := m.OrderSummary.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("OrderSummary")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("OrderSummary")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessOrderByOrderIDOrReferenceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessOrderByOrderIDOrReferenceResponse) UnmarshalBinary(b []byte) error {
	var res ProcessOrderByOrderIDOrReferenceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
